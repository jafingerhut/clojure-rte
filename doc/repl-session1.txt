nREPL server started on port 63089 on host 127.0.0.1 - nrepl://127.0.0.1:63089
REPL-y 0.4.4, nREPL 0.6.0
Clojure 1.10.0
OpenJDK 64-Bit Server VM 1.8.0_222-b10
    Docs: (doc function-name-here)
          (find-doc "part-of-name-here")
  Source: (source function-name-here)
 Javadoc: (javadoc java-object-or-class-here)
    Exit: Control+D or (exit) or (quit)
 Results: Stored in vars *1, *2, *3, an exception in *e

user=> (require 'clojure-rte.rte-tester)[32D[33C
nil
user=> (clojure-rte.rte-tester/-main)[29D[30C
Started [cpu] profiling

0/500: trying (:or (:+ (:or (:cat (:? (:? (:or)))) :empty-set)) :epsilon :sigma (:not (:not (:cat (:cat)))))

----------------------------------------
canonicalizing: (:or (:+ (:or (:cat (:? (:? (:or)))) :empty-set)) :epsilon :sigma (:not (:not (:cat (:cat)))))
canonicalized: (:or (:not (:cat :sigma (:* :sigma))) :epsilon :sigma)
cp calls= 39   cpo calls= 60  tp calls= 78  pattern (:or (:+ (:or (:cat (:? (:? (:or)))) :empty-set)) :epsilon :sigma (:not (:not (:cat (:cat)))))
    cpo arg frequencies:
   15 :  :epsilon
   11 :  :sigma
   6 : (seq len 2) (:or :epsilon)
   4 :  :empty-set
   3 : (seq len 3) (:cat :sigma (:* :sigma))
   3 : (seq len 2) (:* :sigma)
   2 : (seq len 3) (:or (:cat (:? (:? (:or)))) :empty-set)
   2 : (seq len 2) (:? (:or))
   2 : (seq len 2) (:cat (:? (:? (:or))))
   2 : (seq len 2) (:not (:cat :sigma (:* :sigma)))
   2 : (seq len 1) (:or)
   1 : (seq len 5) (:or (:+ (:or (:cat (:? (:? (:or)))) :empty-set)) :epsilon :sigma (:not (:not (:cat (:cat)))))
   1 : (seq len 4) (:or (:not (:cat :sigma (:* :sigma))) :epsilon :sigma)
   1 : (seq len 2) (:not (:cat (:cat)))
   1 : (seq len 2) (:* (:or (:cat (:? (:? (:or)))) :empty-set))
   1 : (seq len 2) (:cat (:cat))
   1 : (seq len 2) (:+ (:or (:cat (:? (:? (:or)))) :empty-set))
   1 : (seq len 2) (:not (:not (:cat (:cat))))
   1 : (seq len 1) (:cat)
    --------------------
1/500: trying (:* :sigma)

----------------------------------------
canonicalizing: (:* :sigma)
canonicalized: (:* :sigma)
cp calls= 3   cpo calls= 3  tp calls= 3  pattern (:* :sigma)
    cpo arg frequencies:
   2 :  :sigma
   1 : (seq len 2) (:* :sigma)
    --------------------
2/500: trying (member [1 2 3] [2 1 3])

----------------------------------------
canonicalizing: (member [1 2 3] [2 1 3])
canonicalized: (= [1 2 3])
cp calls= 1   cpo calls= 2  tp calls= 2  pattern (member [1 2 3] [2 1 3])
    cpo arg frequencies:
   1 : (seq len 3) (member [1 2 3] [2 1 3])
   1 : (seq len 2) (= [1 2 3])
    --------------------
3/500: trying :sigma

----------------------------------------
canonicalizing: :sigma
canonicalized: :sigma
cp calls= 1   cpo calls= 1  tp calls= 1  pattern :sigma
    cpo arg frequencies:
   1 :  :sigma
    --------------------
4/500: trying (:not (:+ (:or (:? (:cat)) (:not :epsilon))))

----------------------------------------
canonicalizing: (:not (:+ (:or (:? (:cat)) (:not :epsilon))))
canonicalized: :empty-set
cp calls= 37   cpo calls= 53  tp calls= 63  pattern (:not (:+ (:or (:? (:cat)) (:not :epsilon))))
    cpo arg frequencies:
   20 :  :sigma
   8 :  :epsilon
   6 : (seq len 2) (:* :sigma)
   2 : (seq len 3) (:or (:? (:cat)) (:not :epsilon))
   2 : (seq len 3) (:cat :sigma (:* :sigma))
   2 : (seq len 2) (:or (:* :sigma))
   2 : (seq len 2) (:or :epsilon)
   2 : (seq len 2) (:not :epsilon)
   2 : (seq len 2) (:? (:cat))
   2 : (seq len 1) (:cat)
   1 : (seq len 2) (:cat (:* :sigma))
   1 : (seq len 2) (:+ (:or (:? (:cat)) (:not :epsilon)))
   1 : (seq len 2) (:not (:+ (:or (:? (:cat)) (:not :epsilon))))
   1 : (seq len 2) (:* (:or (:? (:cat)) (:not :epsilon)))
   1 :  :empty-set
    --------------------
5/500: trying (:and :sigma (:and (member [1 2 3] [2 1 3]) (:or (:cat (:+ (:or))) (:? :epsilon)) (satisfies int?)) (:* :empty-set) (:cat (:* (:+ (:? (:or)))) (:? :sigma) (:and (:not :empty-set) :sigma)))

----------------------------------------
canonicalizing: (:and :sigma (:and (member [1 2 3] [2 1 3]) (:or (:cat (:+ (:or))) (:? :epsilon)) (satisfies int?)) (:* :empty-set) (:cat (:* (:+ (:? (:or)))) (:? :sigma) (:and (:not :empty-set) :sigma)))
canonicalized: (:or (:and (:cat (:or :epsilon :sigma) :sigma) (= [1 2 3]) :epsilon :sigma Byte) (:and (:cat (:or :epsilon :sigma) :sigma) (= [1 2 3]) :epsilon :sigma Integer) (:and (:cat (:or :epsilon :sigma) :sigma) (= [1 2 3]) :epsilon :sigma Long) (:and (:cat (:or :epsilon :sigma) :sigma) (= [1 2 3]) :epsilon :sigma Short))
cp calls= 256   cpo calls= 298  tp calls= 316  pattern (:and :sigma (:and (member [1 2 3] [2 1 3]) (:or (:cat (:+ (:or))) (:? :epsilon)) (satisfies int?)) (:* :empty-set) (:cat (:* (:+ (:? (:or)))) (:? :sigma) (:and (:not :empty-set) :sigma)))
    cpo arg frequencies:
   68 :  :epsilon
   57 :  :sigma
   29 : (seq len 2) (= [1 2 3])
   18 : (seq len 3) (:or :epsilon :sigma)
   17 : (seq len 3) (:cat (:or :epsilon :sigma) :sigma)
   9 :  Integer
   9 :  Short
   9 :  Long
   9 :  Byte
   7 :  :empty-set
   4 : (seq len 2) (:or :epsilon)
   4 : (seq len 1) (:or)
   3 : (seq len 4) (:and (= [1 2 3]) :epsilon Integer)
   3 : (seq len 4) (:and (= [1 2 3]) :epsilon Byte)
   3 : (seq len 4) (:and (= [1 2 3]) :epsilon Long)
   3 : (seq len 4) (:and (= [1 2 3]) :epsilon Short)
   2 : (seq len 6) (:and (:cat (:or :epsilon :sigma) :sigma) (= [1 2 3]) :epsilon :sigma Byte)
   2 : (seq len 6) (:and (:cat (:or :epsilon :sigma) :sigma) (= [1 2 3]) :epsilon :sigma Integer)
   2 : (seq len 6) (:and (:cat (:or :epsilon :sigma) :sigma) (= [1 2 3]) :epsilon :sigma Short)
   2 : (seq len 6) (:and (:cat (:or :epsilon :sigma) :sigma) (= [1 2 3]) :epsilon :sigma Long)
   2 : (seq len 2) (:? (:or))
   1 : (seq len 7) (:and (= [1 2 3]) :epsilon Integer (:cat (:or :epsilon :sigma) :sigma) :epsilon :sigma)
   1 : (seq len 7) (:and (= [1 2 3]) :epsilon Long (:cat (:or :epsilon :sigma) :sigma) :epsilon :sigma)
   1 : (seq len 7) (:and (= [1 2 3]) :epsilon Short (:cat (:or :epsilon :sigma) :sigma) :epsilon :sigma)
   1 : (seq len 7) (:and (= [1 2 3]) :epsilon Byte (:cat (:or :epsilon :sigma) :sigma) :epsilon :sigma)
   1 : (seq len 5) (:or (:and Byte (= [1 2 3]) :epsilon) (:and Integer (= [1 2 3]) :epsilon) (:and Long (= [1 2 3]) :epsilon) (:and Short (= [1 2 3]) :epsilon))
   1 : (seq len 5) (:and (:and (= [1 2 3]) :epsilon Long) (:cat (:or :epsilon :sigma) :sigma) :epsilon :sigma)
   1 : (seq len 5) (:and (:and (= [1 2 3]) :epsilon Short) (:cat (:or :epsilon :sigma) :sigma) :epsilon :sigma)
   1 : (seq len 5) (:or (:and (:cat (:or :epsilon :sigma) :sigma) (= [1 2 3]) :epsilon :sigma Byte) (:and (:cat (:or :epsilon :sigma) :sigma) (= [1 2 3]) :epsilon :sigma Integer) (:and (:cat (:or :epsilon :sigma) :sigma) (= [1 2 3]) :epsilon :sigma Long) (:and (:cat (:or :epsilon :sigma) :sigma) (= [1 2 3]) :epsilon :sigma Short))
   1 : (seq len 5) (:and (:and (= [1 2 3]) :epsilon Integer) (:cat (:or :epsilon :sigma) :sigma) :epsilon :sigma)
   1 : (seq len 5) (:or (:and (= [1 2 3]) :epsilon Byte) (:and (= [1 2 3]) :epsilon Integer) (:and (= [1 2 3]) :epsilon Long) (:and (= [1 2 3]) :epsilon Short))
   1 : (seq len 5) (:or (:and (:and (= [1 2 3]) :epsilon Byte) (:cat (:or :epsilon :sigma) :sigma) :epsilon :sigma) (:and (:and (= [1 2 3]) :epsilon Integer) (:cat (:or :epsilon :sigma) :sigma) :epsilon :sigma) (:and (:and (= [1 2 3]) :epsilon Long) (:cat (:or :epsilon :sigma) :sigma) :epsilon :sigma) (:and (:and (= [1 2 3]) :epsilon Short) (:cat (:or :epsilon :sigma) :sigma) :epsilon :sigma))
   1 : (seq len 5) (:and (:and (= [1 2 3]) :epsilon Byte) (:cat (:or :epsilon :sigma) :sigma) :epsilon :sigma)
   1 : (seq len 5) (:or Byte Integer Long Short)
   1 : (seq len 5) (:and :sigma (:and (member [1 2 3] [2 1 3]) (:or (:cat (:+ (:or))) (:? :epsilon)) (satisfies int?)) (:* :empty-set) (:cat (:* (:+ (:? (:or)))) (:? :sigma) (:and (:not :empty-set) :sigma)))
   1 : (seq len 4) (:and (member [1 2 3] [2 1 3]) (:or (:cat (:+ (:or))) (:? :epsilon)) (satisfies int?))
   1 : (seq len 4) (:and Integer (= [1 2 3]) :epsilon)
   1 : (seq len 4) (:and Long (= [1 2 3]) :epsilon)
   1 : (seq len 4) (:cat (:* (:+ (:? (:or)))) (:? :sigma) (:and (:not :empty-set) :sigma))
   1 : (seq len 4) (:and Short (= [1 2 3]) :epsilon)
   1 : (seq len 4) (:and Byte (= [1 2 3]) :epsilon)
   1 : (seq len 3) (:and (:not :empty-set) :sigma)
   1 : (seq len 3) (:or (:cat (:+ (:or))) (:? :epsilon))
   1 : (seq len 3) (member [1 2 3] [2 1 3])
   1 : (seq len 2) (:+ (:? (:or)))
   1 : (seq len 2) (:* :sigma)
   1 : (seq len 2) (:* (:or))
   1 : (seq len 2) (:? :epsilon)
   1 : (seq len 2) (:cat (:+ (:or)))
   1 : (seq len 2) (:not :empty-set)
   1 : (seq len 2) (satisfies int?)
   1 : (seq len 2) (:* :empty-set)
   1 : (seq len 2) (:* (:? (:or)))
   1 : (seq len 2) (:and :sigma)
   1 : (seq len 2) (:? :sigma)
   1 : (seq len 2) (:* (:+ (:? (:or))))
   1 : (seq len 1) (:cat)
    --------------------
6/500: trying (member [1 2 3] [2 1 3])

----------------------------------------
canonicalizing: (member [1 2 3] [2 1 3])
canonicalized: (= [1 2 3])
cp calls= 1   cpo calls= 2  tp calls= 2  pattern (member [1 2 3] [2 1 3])
    cpo arg frequencies:
   1 : (seq len 3) (member [1 2 3] [2 1 3])
   1 : (seq len 2) (= [1 2 3])
    --------------------
7/500: trying (:? (:not (:cat (:and :sigma) (:+ :epsilon))))

----------------------------------------
canonicalizing: (:? (:not (:cat (:and :sigma) (:+ :epsilon))))
canonicalized: (:or (:cat :sigma :sigma (:* :sigma)) :epsilon)
cp calls= 31   cpo calls= 40  tp calls= 45  pattern (:? (:not (:cat (:and :sigma) (:+ :epsilon))))
    cpo arg frequencies:
   14 :  :sigma
   9 :  :epsilon
   3 : (seq len 4) (:cat :sigma :sigma (:* :sigma))
   3 : (seq len 2) (:* :sigma)
   2 : (seq len 3) (:or (:cat :sigma :sigma (:* :sigma)) :epsilon)
   1 : (seq len 4) (:or (:cat :sigma :sigma (:* :sigma)) :epsilon :epsilon)
   1 : (seq len 3) (:cat (:and :sigma) (:+ :epsilon))
   1 : (seq len 2) (:* :epsilon)
   1 : (seq len 2) (:+ :epsilon)
   1 : (seq len 2) (:? (:not (:cat (:and :sigma) (:+ :epsilon))))
   1 : (seq len 2) (:cat :sigma)
   1 : (seq len 2) (:not (:cat (:and :sigma) (:+ :epsilon)))
   1 : (seq len 2) (:and :sigma)
   1 : (seq len 1) (:cat)
    --------------------
8/500: trying (member a b c)

----------------------------------------
canonicalizing: (member a b c)
canonicalized: (= a)
cp calls= 1   cpo calls= 2  tp calls= 2  pattern (member a b c)
    cpo arg frequencies:
   1 : (seq len 4) (member a b c)
   1 : (seq len 2) (= a)
    --------------------
9/500: trying (:* (:+ (:not :empty-set)))

----------------------------------------
canonicalizing: (:* (:+ (:not :empty-set)))
canonicalized: (:* :sigma)
cp calls= 19   cpo calls= 25  tp calls= 27  pattern (:* (:+ (:not :empty-set)))
    cpo arg frequencies:
   12 :  :sigma
   5 : (seq len 2) (:* :sigma)
   2 : (seq len 2) (:not :empty-set)
   2 :  :empty-set
   1 : (seq len 2) (:* (:+ (:not :empty-set)))
   1 : (seq len 2) (:+ (:not :empty-set))
   1 : (seq len 2) (:* (:not :empty-set))
   1 : (seq len 2) (:cat (:* :sigma))
    --------------------
10/500: trying (:not (:or (:cat (:or (:or)) (:or (:or))) :epsilon (satisfies keyword?)))

----------------------------------------
canonicalizing: (:not (:or (:cat (:or (:or)) (:or (:or))) :epsilon (satisfies keyword?)))
canonicalized: (:and (:cat :sigma (:* :sigma)) (:not clojure.lang.Keyword))
cp calls= 24   cpo calls= 32  tp calls= 37  pattern (:not (:or (:cat (:or (:or)) (:or (:or))) :epsilon (satisfies keyword?)))
    cpo arg frequencies:
   6 :  :sigma
   4 :  clojure.lang.Keyword
   3 :  :empty-set
   3 :  :epsilon
   2 : (seq len 3) (:cat :sigma (:* :sigma))
   2 : (seq len 2) (:* :sigma)
   2 : (seq len 2) (:or (:or))
   2 : (seq len 2) (:not clojure.lang.Keyword)
   1 : (seq len 4) (:or (:cat (:or (:or)) (:or (:or))) :epsilon (satisfies keyword?))
   1 : (seq len 3) (:and (:cat :sigma (:* :sigma)) (:not clojure.lang.Keyword))
   1 : (seq len 3) (:cat (:or (:or)) (:or (:or)))
   1 : (seq len 3) (:and (:not :epsilon) (:not clojure.lang.Keyword))
   1 : (seq len 3) (:or :epsilon clojure.lang.Keyword)
   1 : (seq len 2) (:not (:or (:cat (:or (:or)) (:or (:or))) :epsilon (satisfies keyword?)))
   1 : (seq len 2) (:not :epsilon)
   1 : (seq len 2) (satisfies keyword?)
    --------------------
11/500: trying (:cat :empty-set (:cat :epsilon (:? (:cat (:and))) (:? (:or (:cat)))) :epsilon :sigma)

----------------------------------------
canonicalizing: (:cat :empty-set (:cat :epsilon (:? (:cat (:and))) (:? (:or (:cat)))) :epsilon :sigma)
canonicalized: :empty-set
cp calls= 22   cpo calls= 30  tp calls= 38  pattern (:cat :empty-set (:cat :epsilon (:? (:cat (:and))) (:? (:or (:cat)))) :epsilon :sigma)
    cpo arg frequencies:
   11 :  :sigma
   6 :  :epsilon
   3 : (seq len 2) (:* :sigma)
   2 :  :empty-set
   1 : (seq len 5) (:cat :empty-set (:cat :epsilon (:? (:cat (:and))) (:? (:or (:cat)))) :epsilon :sigma)
   1 : (seq len 4) (:cat :epsilon (:? (:cat (:and))) (:? (:or (:cat))))
   1 : (seq len 2) (:cat (:* :sigma))
   1 : (seq len 2) (:? (:or (:cat)))
   1 : (seq len 2) (:or :epsilon)
   1 : (seq len 2) (:or (:cat))
   1 : (seq len 2) (:cat (:and))
   1 : (seq len 2) (:? (:cat (:and)))
    --------------------
12/500: trying (:* (:+ (= 1)))

----------------------------------------
canonicalizing: (:* (:+ (= 1)))
canonicalized: (:* (:cat (= 1) (:* (= 1))))
cp calls= 25   cpo calls= 27  tp calls= 28  pattern (:* (:+ (= 1)))
    cpo arg frequencies:
   15 : (seq len 2) (= 1)
   5 : (seq len 2) (:* (= 1))
   4 : (seq len 3) (:cat (= 1) (:* (= 1)))
   1 : (seq len 2) (:* (:+ (= 1)))
   1 : (seq len 2) (:+ (= 1))
   1 : (seq len 2) (:* (:cat (= 1) (:* (= 1))))
    --------------------
13/500: trying java.lang.Object

----------------------------------------
canonicalizing: java.lang.Object
canonicalized: java.lang.Object
cp calls= 1   cpo calls= 1  tp calls= 1  pattern java.lang.Object
    cpo arg frequencies:
   1 :  java.lang.Object
    --------------------
14/500: trying (:and (:+ (:? (:cat clojure.lang.IMeta))) (:and (:+ (:cat (:+ (:? (:not (:* (:cat))))))) :empty-set :empty-set) (:cat (:* :epsilon) (:or (:and (:? :empty-set)) :epsilon) :sigma) (:+ (:+ :empty-set)))

----------------------------------------
canonicalizing: (:and (:+ (:? (:cat clojure.lang.IMeta))) (:and (:+ (:cat (:+ (:? (:not (:* (:cat))))))) :empty-set :empty-set) (:cat (:* :epsilon) (:or (:and (:? :empty-set)) :epsilon) :sigma) (:+ (:+ :empty-set)))
canonicalized: :empty-set
cp calls= 130   cpo calls= 180  tp calls= 213  pattern (:and (:+ (:? (:cat clojure.lang.IMeta))) (:and (:+ (:cat (:+ (:? (:not (:* (:cat))))))) :empty-set :empty-set) (:cat (:* :epsilon) (:or (:and (:? :empty-set)) :epsilon) :sigma) (:+ (:+ :empty-set)))
    cpo arg frequencies:
   48 :  :sigma
   31 :  :epsilon
   14 : (seq len 2) (:* :sigma)
   12 :  :empty-set
   10 :  clojure.lang.IMeta
   8 : (seq len 3) (:or :epsilon clojure.lang.IMeta)
   4 : (seq len 3) (:cat :sigma (:* :sigma))
   4 : (seq len 2) (:* (:cat))
   4 : (seq len 2) (:or (:* :sigma))
   4 : (seq len 2) (:? (:not (:* (:cat))))
   4 : (seq len 2) (:not (:* (:cat)))
   4 : (seq len 1) (:cat)
   3 : (seq len 2) (:cat (:* :sigma))
   2 : (seq len 2) (:cat clojure.lang.IMeta)
   2 : (seq len 2) (:or :epsilon)
   2 : (seq len 2) (:* (:? (:not (:* (:cat)))))
   2 : (seq len 2) (:+ :empty-set)
   2 : (seq len 2) (:* (:or :epsilon clojure.lang.IMeta))
   2 : (seq len 2) (:? (:cat clojure.lang.IMeta))
   2 : (seq len 2) (:cat (:+ (:? (:not (:* (:cat))))))
   2 : (seq len 2) (:* :empty-set)
   1 : (seq len 5) (:and (:+ (:? (:cat clojure.lang.IMeta))) (:and (:+ (:cat (:+ (:? (:not (:* (:cat))))))) :empty-set :empty-set) (:cat (:* :epsilon) (:or (:and (:? :empty-set)) :epsilon) :sigma) (:+ (:+ :empty-set)))
   1 : (seq len 4) (:and (:+ (:cat (:+ (:? (:not (:* (:cat))))))) :empty-set :empty-set)
   1 : (seq len 4) (:cat (:* :epsilon) (:or (:and (:? :empty-set)) :epsilon) :sigma)
   1 : (seq len 3) (:or (:and (:? :empty-set)) :epsilon)
   1 : (seq len 3) (:cat (:or :epsilon clojure.lang.IMeta) (:* (:or :epsilon clojure.lang.IMeta)))
   1 : (seq len 2) (:* :epsilon)
   1 : (seq len 2) (:and (:? :empty-set))
   1 : (seq len 2) (:* (:+ :empty-set))
   1 : (seq len 2) (:cat :sigma)
   1 : (seq len 2) (:+ (:cat (:+ (:? (:not (:* (:cat)))))))
   1 : (seq len 2) (:+ (:+ :empty-set))
   1 : (seq len 2) (:* (:cat (:+ (:? (:not (:* (:cat)))))))
   1 : (seq len 2) (:+ (:? (:cat clojure.lang.IMeta)))
   1 : (seq len 2) (:* (:? (:cat clojure.lang.IMeta)))
    --------------------
15/500: trying :epsilon

----------------------------------------
canonicalizing: :epsilon
canonicalized: :epsilon
cp calls= 1   cpo calls= 1  tp calls= 1  pattern :epsilon
    cpo arg frequencies:
   1 :  :epsilon
    --------------------
16/500: trying (:cat :sigma :empty-set :epsilon (:and (:cat (:and :empty-set) (:or (:cat))) (:+ (:* (:or))) :empty-set))

----------------------------------------
canonicalizing: (:cat :sigma :empty-set :epsilon (:and (:cat (:and :empty-set) (:or (:cat))) (:+ (:* (:or))) :empty-set))
canonicalized: :empty-set
cp calls= 15   cpo calls= 27  tp calls= 34  pattern (:cat :sigma :empty-set :epsilon (:and (:cat (:and :empty-set) (:or (:cat))) (:+ (:* (:or))) :empty-set))
    cpo arg frequencies:
   8 :  :empty-set
   6 :  :epsilon
   2 : (seq len 2) (:* (:or))
   2 : (seq len 1) (:or)
   1 : (seq len 5) (:cat :sigma :empty-set :epsilon (:and (:cat (:and :empty-set) (:or (:cat))) (:+ (:* (:or))) :empty-set))
   1 : (seq len 4) (:and (:cat (:and :empty-set) (:or (:cat))) (:+ (:* (:or))) :empty-set)
   1 : (seq len 3) (:cat (:and :empty-set) (:or (:cat)))
   1 : (seq len 2) (:* (:* (:or)))
   1 : (seq len 2) (:and :empty-set)
   1 : (seq len 2) (:or (:cat))
   1 : (seq len 2) (:+ (:* (:or)))
   1 : (seq len 1) (:cat)
   1 :  :sigma
    --------------------
17/500: trying (= a)

----------------------------------------
canonicalizing: (= a)
canonicalized: (= a)
cp calls= 1   cpo calls= 1  tp calls= 1  pattern (= a)
    cpo arg frequencies:
   1 : (seq len 2) (= a)
    --------------------
18/500: trying :sigma

----------------------------------------
canonicalizing: :sigma
canonicalized: :sigma
cp calls= 1   cpo calls= 1  tp calls= 1  pattern :sigma
    cpo arg frequencies:
   1 :  :sigma
    --------------------
19/500: trying (:cat :empty-set (:+ (:or (:+ :epsilon) (:and :sigma))) (:* (:cat (:or (:not (:cat))) (:? (:* (:cat))))) :epsilon)

----------------------------------------
canonicalizing: (:cat :empty-set (:+ (:or (:+ :epsilon) (:and :sigma))) (:* (:cat (:or (:not (:cat))) (:? (:* (:cat))))) :epsilon)
canonicalized: :empty-set
cp calls= 99   cpo calls= 122  tp calls= 134  pattern (:cat :empty-set (:+ (:or (:+ :epsilon) (:and :sigma))) (:* (:cat (:or (:not (:cat))) (:? (:* (:cat))))) :epsilon)
    cpo arg frequencies:
   37 :  :sigma
   27 :  :epsilon
   11 : (seq len 3) (:or :epsilon :sigma)
   8 : (seq len 2) (:* :sigma)
   7 : (seq len 3) (:cat :sigma (:* :sigma))
   4 : (seq len 1) (:cat)
   3 : (seq len 2) (:* (:or :epsilon :sigma))
   3 :  :empty-set
   2 : (seq len 3) (:or (:+ :epsilon) (:and :sigma))
   2 : (seq len 2) (:* :epsilon)
   2 : (seq len 2) (:+ :epsilon)
   2 : (seq len 2) (:* (:cat :sigma (:* :sigma)))
   2 : (seq len 2) (:and :sigma)
   1 : (seq len 6) (:cat :empty-set (:or :epsilon :sigma) (:* (:or :epsilon :sigma)) (:* (:cat :sigma (:* :sigma))) :epsilon)
   1 : (seq len 5) (:cat :empty-set (:+ (:or (:+ :epsilon) (:and :sigma))) (:* (:cat (:or (:not (:cat))) (:? (:* (:cat))))) :epsilon)
   1 : (seq len 4) (:cat :sigma (:* :sigma) :epsilon)
   1 : (seq len 3) (:cat (:or :epsilon :sigma) (:* (:or :epsilon :sigma)))
   1 : (seq len 3) (:cat (:or (:not (:cat))) (:? (:* (:cat))))
   1 : (seq len 2) (:+ (:or (:+ :epsilon) (:and :sigma)))
   1 : (seq len 2) (:or (:not (:cat)))
   1 : (seq len 2) (:? (:* (:cat)))
   1 : (seq len 2) (:* (:cat))
   1 : (seq len 2) (:or :epsilon)
   1 : (seq len 2) (:* (:or (:+ :epsilon) (:and :sigma)))
   1 : (seq len 2) (:* (:cat (:or (:not (:cat))) (:? (:* (:cat)))))
    --------------------
20/500: trying (satisfies seq?)

----------------------------------------
canonicalizing: (satisfies seq?)
canonicalized: clojure.lang.ISeq
cp calls= 1   cpo calls= 2  tp calls= 3  pattern (satisfies seq?)
    cpo arg frequencies:
   1 : (seq len 2) (satisfies seq?)
   1 :  clojure.lang.ISeq
    --------------------
21/500: trying (member 2 3 4)

----------------------------------------
canonicalizing: (member 2 3 4)
canonicalized: (= 2)
cp calls= 1   cpo calls= 2  tp calls= 2  pattern (member 2 3 4)
    cpo arg frequencies:
   1 : (seq len 4) (member 2 3 4)
   1 : (seq len 2) (= 2)
    --------------------
22/500: trying (:+ (:and (:not (:and (:not (:+ (:or))))) :epsilon (:cat (satisfies float?) (:or :epsilon))))

----------------------------------------
canonicalizing: (:+ (:and (:not (:and (:not (:+ (:or))))) :epsilon (:cat (satisfies float?) (:or :epsilon))))
canonicalized: :empty-set
cp calls= 44   cpo calls= 68  tp calls= 83  pattern (:+ (:and (:not (:and (:not (:+ (:or))))) :epsilon (:cat (satisfies float?) (:or :epsilon))))
    cpo arg frequencies:
   11 :  :empty-set
   8 :  Double
   8 :  Float
   7 :  :epsilon
   4 : (seq len 3) (:or Double Float)
   4 : (seq len 1) (:or)
   4 :  :sigma
   2 : (seq len 4) (:and (:not (:and (:not (:+ (:or))))) :epsilon (:cat (satisfies float?) (:or :epsilon)))
   2 : (seq len 3) (:cat (satisfies float?) (:or :epsilon))
   2 : (seq len 2) (:* :sigma)
   2 : (seq len 2) (:not (:and (:not (:+ (:or)))))
   2 : (seq len 2) (:or :epsilon)
   2 : (seq len 2) (:* (:or))
   2 : (seq len 2) (:cat (:or Double Float))
   2 : (seq len 2) (:+ (:or))
   2 : (seq len 2) (satisfies float?)
   2 : (seq len 2) (:and (:not (:+ (:or))))
   1 : (seq len 2) (:+ (:and (:not (:and (:not (:+ (:or))))) :epsilon (:cat (satisfies float?) (:or :epsilon))))
   1 : (seq len 2) (:* (:and (:not (:and (:not (:+ (:or))))) :epsilon (:cat (satisfies float?) (:or :epsilon))))
    --------------------
23/500: trying :sigma

----------------------------------------
canonicalizing: :sigma
canonicalized: :sigma
cp calls= 1   cpo calls= 1  tp calls= 1  pattern :sigma
    cpo arg frequencies:
   1 :  :sigma
    --------------------
24/500: trying (:cat (satisfies rational?) (:not (:or (:+ (:cat)) (= a))) (:cat (member a b c) (:and (:cat :epsilon) (:cat :epsilon)) (:? (:cat (:cat)))) (:* (:? :sigma)))

----------------------------------------
canonicalizing: (:cat (satisfies rational?) (:not (:or (:+ (:cat)) (= a))) (:cat (member a b c) (:and (:cat :epsilon) (:cat :epsilon)) (:? (:cat (:cat)))) (:* (:? :sigma)))
canonicalized: (:cat (:or BigDecimal BigInteger Byte Integer Long Short clojure.lang.BigInt clojure.lang.Ratio) (:and (:cat :sigma (:* :sigma)) (:not (= a))) (= a) (:* (:or :epsilon :sigma)))
cp calls= 105   cpo calls= 130  tp calls= 144  pattern (:cat (satisfies rational?) (:not (:or (:+ (:cat)) (= a))) (:cat (member a b c) (:and (:cat :epsilon) (:cat :epsilon)) (:? (:cat (:cat)))) (:* (:? :sigma)))
    cpo arg frequencies:
   19 :  :epsilon
   16 :  :sigma
   6 : (seq len 3) (:or :epsilon :sigma)
   5 : (seq len 2) (= a)
   5 :  BigInteger
   5 :  Integer
   5 :  Short
   5 :  clojure.lang.BigInt
   5 :  Long
   5 :  Byte
   4 :  clojure.lang.Ratio
   4 :  BigDecimal
   3 : (seq len 3) (:cat :sigma (:* :sigma))
   3 : (seq len 2) (:* :sigma)
   3 : (seq len 2) (= a)
   3 : (seq len 2) (:not (= a))
   3 : (seq len 1) (:cat)
   2 : (seq len 9) (:or BigDecimal BigInteger Byte Integer Long Short clojure.lang.BigInt clojure.lang.Ratio)
   2 : (seq len 3) (:and (:cat :sigma (:* :sigma)) (:not (= a)))
   2 : (seq len 2) (:* (:or :epsilon :sigma))
   2 : (seq len 2) (:cat :epsilon)
   1 : (seq len 9) (:or BigInteger Byte Integer Long Short clojure.lang.BigInt BigDecimal clojure.lang.Ratio)
   1 : (seq len 7) (:or BigInteger Byte Integer Long Short clojure.lang.BigInt)
   1 : (seq len 7) (or Integer Long clojure.lang.BigInt BigInteger Short Byte)
   1 : (seq len 5) (:cat (:or BigDecimal BigInteger Byte Integer Long Short clojure.lang.BigInt clojure.lang.Ratio) (:and (:cat :sigma (:* :sigma)) (:not (= a))) (= a) (:* (:or :epsilon :sigma)))
   1 : (seq len 5) (:cat (satisfies rational?) (:not (:or (:+ (:cat)) (= a))) (:cat (member a b c) (:and (:cat :epsilon) (:cat :epsilon)) (:? (:cat (:cat)))) (:* (:? :sigma)))
   1 : (seq len 4) (:cat (member a b c) (:and (:cat :epsilon) (:cat :epsilon)) (:? (:cat (:cat))))
   1 : (seq len 4) (member a b c)
   1 : (seq len 3) (:and (:cat :epsilon) (:cat :epsilon))
   1 : (seq len 3) (:or (:+ (:cat)) (= a))
   1 : (seq len 3) (:or (= a) :epsilon)
   1 : (seq len 3) (:and (:not (= a)) (:not :epsilon))
   1 : (seq len 2) (:* (:cat))
   1 : (seq len 2) (:* (:? :sigma))
   1 : (seq len 2) (:or :epsilon)
   1 : (seq len 2) (:not :epsilon)
   1 : (seq len 2) (:cat (= a))
   1 : (seq len 2) (:? (:cat (:cat)))
   1 : (seq len 2) (satisfies rational?)
   1 : (seq len 2) (:not (:or (:+ (:cat)) (= a)))
   1 : (seq len 2) (:+ (:cat))
   1 : (seq len 2) (:cat (:cat))
   1 : (seq len 2) (:and :epsilon)
   1 : (seq len 2) (:? :sigma)
    --------------------
25/500: trying :epsilon

----------------------------------------
canonicalizing: :epsilon
canonicalized: :epsilon
cp calls= 1   cpo calls= 1  tp calls= 1  pattern :epsilon
    cpo arg frequencies:
   1 :  :epsilon
    --------------------
26/500: trying (:or (:? (:cat (:? :empty-set) :empty-set)) (:* (member [1 2 3] [1 2] [1] [])) (:or (:or (:? (:? (satisfies float?))) (:? (:and))) (:and (:+ (:cat)) (:? (:cat))) (:or (:cat (:or)) (:cat (:or)))) :empty-set)

----------------------------------------
canonicalizing: (:or (:? (:cat (:? :empty-set) :empty-set)) (:* (member [1 2 3] [1 2] [1] [])) (:or (:or (:? (:? (satisfies float?))) (:? (:and))) (:and (:+ (:cat)) (:? (:cat))) (:or (:cat (:or)) (:cat (:or)))) :empty-set)
canonicalized: (:* :sigma)
cp calls= 70   cpo calls= 102  tp calls= 124  pattern (:or (:? (:cat (:? :empty-set) :empty-set)) (:* (member [1 2 3] [1 2] [1] [])) (:or (:or (:? (:? (satisfies float?))) (:? (:and))) (:and (:+ (:cat)) (:? (:cat))) (:or (:cat (:or)) (:cat (:or)))) :empty-set)
    cpo arg frequencies:
   21 :  :epsilon
   14 :  :sigma
   7 :  Double
   7 :  :empty-set
   7 :  Float
   6 : (seq len 2) (:* :sigma)
   4 : (seq len 2) (= [1 2 3])
   4 : (seq len 1) (:cat)
   3 : (seq len 2) (:or :epsilon)
   2 : (seq len 4) (:or :epsilon Double Float)
   2 : (seq len 2) (:cat (:or))
   1 : (seq len 5) (:or (:? (:cat (:? :empty-set) :empty-set)) (:* (member [1 2 3] [1 2] [1] [])) (:or (:or (:? (:? (satisfies float?))) (:? (:and))) (:and (:+ (:cat)) (:? (:cat))) (:or (:cat (:or)) (:cat (:or)))) :empty-set)
   1 : (seq len 5) (:or :epsilon Double Float :epsilon)
   1 : (seq len 5) (member [1 2 3] [1 2] [1] [])
   1 : (seq len 5) (:or (:* :sigma) :epsilon Double Float)
   1 : (seq len 4) (:or Double Float :epsilon)
   1 : (seq len 4) (:or (:or (:? (:? (satisfies float?))) (:? (:and))) (:and (:+ (:cat)) (:? (:cat))) (:or (:cat (:or)) (:cat (:or))))
   1 : (seq len 3) (:or Double Float)
   1 : (seq len 3) (:or (:cat (:or)) (:cat (:or)))
   1 : (seq len 3) (:cat (:? :empty-set) :empty-set)
   1 : (seq len 3) (:or (:? (:? (satisfies float?))) (:? (:and)))
   1 : (seq len 3) (:and (:+ (:cat)) (:? (:cat)))
   1 : (seq len 2) (:* (:cat))
   1 : (seq len 2) (:? (:? (satisfies float?)))
   1 : (seq len 2) (:? :empty-set)
   1 : (seq len 2) (:? (:cat (:? :empty-set) :empty-set))
   1 : (seq len 2) (:? (satisfies float?))
   1 : (seq len 2) (:? (:cat))
   1 : (seq len 2) (:+ (:cat))
   1 : (seq len 2) (:* (= [1 2 3]))
   1 : (seq len 2) (satisfies float?)
   1 : (seq len 2) (:and :epsilon)
   1 : (seq len 2) (:? (:and))
   1 : (seq len 2) (:* (member [1 2 3] [1 2] [1] []))
   1 : (seq len 1) (:or)
   1 : (seq len 1) (:and)
    --------------------
27/500: trying java.lang.Comparable

----------------------------------------
canonicalizing: java.lang.Comparable
canonicalized: java.lang.Comparable
cp calls= 1   cpo calls= 1  tp calls= 1  pattern java.lang.Comparable
    cpo arg frequencies:
   1 :  java.lang.Comparable
    --------------------
28/500: trying (:and (:* :epsilon) (:cat (member 2 3 4) (:not (:and (:not (:cat)))) (:? java.lang.Comparable)) (:cat (:* (:cat (:and))) (:or :sigma :epsilon) (:cat (:? (:cat)) :empty-set)) :empty-set)

----------------------------------------
canonicalizing: (:and (:* :epsilon) (:cat (member 2 3 4) (:not (:and (:not (:cat)))) (:? java.lang.Comparable)) (:cat (:* (:cat (:and))) (:or :sigma :epsilon) (:cat (:? (:cat)) :empty-set)) :empty-set)
canonicalized: :empty-set
cp calls= 52   cpo calls= 68  tp calls= 76  pattern (:and (:* :epsilon) (:cat (member 2 3 4) (:not (:and (:not (:cat)))) (:? java.lang.Comparable)) (:cat (:* (:cat (:and))) (:or :sigma :epsilon) (:cat (:? (:cat)) :empty-set)) :empty-set)
    cpo arg frequencies:
   17 :  :sigma
   11 :  :epsilon
   5 : (seq len 2) (:* :sigma)
   5 :  :empty-set
   3 : (seq len 3) (:cat :sigma (:* :sigma))
   3 :  java.lang.Comparable
   2 : (seq len 3) (:or :epsilon java.lang.Comparable)
   2 : (seq len 2) (= 2)
   2 : (seq len 2) (:not (:cat :sigma (:* :sigma)))
   2 : (seq len 1) (:cat)
   1 : (seq len 5) (:and (:* :epsilon) (:cat (member 2 3 4) (:not (:and (:not (:cat)))) (:? java.lang.Comparable)) (:cat (:* (:cat (:and))) (:or :sigma :epsilon) (:cat (:? (:cat)) :empty-set)) :empty-set)
   1 : (seq len 4) (:cat (= 2) (:not (:cat :sigma (:* :sigma))) (:or :epsilon java.lang.Comparable))
   1 : (seq len 4) (member 2 3 4)
   1 : (seq len 4) (:cat (:* (:cat (:and))) (:or :sigma :epsilon) (:cat (:? (:cat)) :empty-set))
   1 : (seq len 4) (:cat (member 2 3 4) (:not (:and (:not (:cat)))) (:? java.lang.Comparable))
   1 : (seq len 3) (:or :sigma :epsilon)
   1 : (seq len 3) (:cat (:? (:cat)) :empty-set)
   1 : (seq len 3) (:or :epsilon :sigma)
   1 : (seq len 2) (:not (:and (:not (:cat))))
   1 : (seq len 2) (:* :epsilon)
   1 : (seq len 2) (:or :epsilon)
   1 : (seq len 2) (:and (:not (:cat)))
   1 : (seq len 2) (:? java.lang.Comparable)
   1 : (seq len 2) (:cat (:and))
   1 : (seq len 2) (:? (:cat))
   1 : (seq len 2) (:* (:cat (:and)))
    --------------------
29/500: trying (:? (:cat (:and :epsilon (:cat (:? :empty-set))) (:+ (:and :empty-set)) (:and (:? (:and)) :epsilon)))

----------------------------------------
canonicalizing: (:? (:cat (:and :epsilon (:cat (:? :empty-set))) (:+ (:and :empty-set)) (:and (:? (:and)) :epsilon)))
canonicalized: :epsilon
cp calls= 23   cpo calls= 38  tp calls= 50  pattern (:? (:cat (:and :epsilon (:cat (:? :empty-set))) (:+ (:and :empty-set)) (:and (:? (:and)) :epsilon)))
    cpo arg frequencies:
   10 :  :epsilon
   6 :  :sigma
   5 :  :empty-set
   2 : (seq len 2) (:and :empty-set)
   2 : (seq len 2) (:* :sigma)
   2 : (seq len 2) (:or :epsilon)
   2 : (seq len 2) (:and :epsilon)
   1 : (seq len 4) (:cat (:and :epsilon (:cat (:? :empty-set))) (:+ (:and :empty-set)) (:and (:? (:and)) :epsilon))
   1 : (seq len 3) (:and (:? (:and)) :epsilon)
   1 : (seq len 3) (:and :epsilon (:cat (:? :empty-set)))
   1 : (seq len 2) (:+ (:and :empty-set))
   1 : (seq len 2) (:cat (:? :empty-set))
   1 : (seq len 2) (:? (:cat (:and :epsilon (:cat (:? :empty-set))) (:+ (:and :empty-set)) (:and (:? (:and)) :epsilon)))
   1 : (seq len 2) (:* (:and :empty-set))
   1 : (seq len 2) (:? (:and))
   1 : (seq len 1) (:and)
    --------------------
30/500: trying (:cat (:? :empty-set) (:* (:? :empty-set)) :empty-set (:+ (:and (:and (:cat)) (:+ (:+ java.lang.Object)))))

----------------------------------------
canonicalizing: (:cat (:? :empty-set) (:* (:? :empty-set)) :empty-set (:+ (:and (:and (:cat)) (:+ (:+ java.lang.Object)))))
canonicalized: :empty-set
cp calls= 316   cpo calls= 337  tp calls= 352  pattern (:cat (:? :empty-set) (:* (:? :empty-set)) :empty-set (:+ (:and (:and (:cat)) (:+ (:+ java.lang.Object)))))
    cpo arg frequencies:
   159 :  java.lang.Object
   53 : (seq len 2) (:* java.lang.Object)
   36 : (seq len 3) (:cat java.lang.Object (:* java.lang.Object))
   20 :  :epsilon
   15 : (seq len 2) (:* (:cat java.lang.Object (:* java.lang.Object)))
   13 : (seq len 4) (:cat java.lang.Object (:* java.lang.Object) (:* (:cat java.lang.Object (:* java.lang.Object))))
   11 : (seq len 3) (:and (:cat java.lang.Object (:* java.lang.Object) (:* (:cat java.lang.Object (:* java.lang.Object)))) :epsilon)
   5 :  :empty-set
   4 : (seq len 2) (:+ java.lang.Object)
   3 : (seq len 2) (:* (:and (:cat java.lang.Object (:* java.lang.Object) (:* (:cat java.lang.Object (:* java.lang.Object)))) :epsilon))
   2 : (seq len 3) (:and (:and (:cat)) (:+ (:+ java.lang.Object)))
   2 : (seq len 2) (:or :epsilon)
   2 : (seq len 2) (:? :empty-set)
   2 : (seq len 2) (:* (:+ java.lang.Object))
   2 : (seq len 2) (:+ (:+ java.lang.Object))
   2 : (seq len 2) (:and (:cat))
   1 : (seq len 6) (:cat :epsilon :epsilon :empty-set (:and (:cat java.lang.Object (:* java.lang.Object) (:* (:cat java.lang.Object (:* java.lang.Object)))) :epsilon) (:* (:and (:cat java.lang.Object (:* java.lang.Object) (:* (:cat java.lang.Object (:* java.lang.Object)))) :epsilon)))
   1 : (seq len 5) (:cat (:? :empty-set) (:* (:? :empty-set)) :empty-set (:+ (:and (:and (:cat)) (:+ (:+ java.lang.Object)))))
   1 : (seq len 3) (:cat (:and (:cat java.lang.Object (:* java.lang.Object) (:* (:cat java.lang.Object (:* java.lang.Object)))) :epsilon) (:* (:and (:cat java.lang.Object (:* java.lang.Object) (:* (:cat java.lang.Object (:* java.lang.Object)))) :epsilon)))
   1 : (seq len 2) (:* (:? :empty-set))
   1 : (seq len 2) (:* (:and (:and (:cat)) (:+ (:+ java.lang.Object))))
   1 : (seq len 2) (:+ (:and (:and (:cat)) (:+ (:+ java.lang.Object))))
    --------------------
31/500: trying (:+ (:cat (:* (:not (member [1 2 3] [2 1 3]))) :epsilon (:* (:not (:? (:* (:and)))))))

----------------------------------------
canonicalizing: (:+ (:cat (:* (:not (member [1 2 3] [2 1 3]))) :epsilon (:* (:not (:? (:* (:and)))))))
canonicalized: (:* (:not (= [1 2 3])))
cp calls= 82   cpo calls= 105  tp calls= 113  pattern (:+ (:cat (:* (:not (member [1 2 3] [2 1 3]))) :epsilon (:* (:not (:? (:* (:and)))))))
    cpo arg frequencies:
   24 : (seq len 2) (= [1 2 3])
   22 : (seq len 2) (:not (= [1 2 3]))
   16 :  :sigma
   6 : (seq len 2) (:* :sigma)
   6 : (seq len 2) (:* (:not (= [1 2 3])))
   6 :  :epsilon
   3 : (seq len 2) (:cat (:* (:not (= [1 2 3]))))
   2 : (seq len 4) (:cat (:* (:not (member [1 2 3] [2 1 3]))) :epsilon (:* (:not (:? (:* (:and))))))
   2 : (seq len 3) (member [1 2 3] [2 1 3])
   2 : (seq len 2) (:not (:? (:* (:and))))
   2 : (seq len 2) (:* (:not (member [1 2 3] [2 1 3])))
   2 : (seq len 2) (:not (member [1 2 3] [2 1 3]))
   2 : (seq len 2) (:* (:and))
   2 : (seq len 2) (:* (:not (:? (:* (:and)))))
   2 : (seq len 2) (:? (:* (:and)))
   2 : (seq len 1) (:and)
   2 :  :empty-set
   1 : (seq len 2) (:* (:cat (:* (:not (member [1 2 3] [2 1 3]))) :epsilon (:* (:not (:? (:* (:and)))))))
   1 : (seq len 2) (:+ (:cat (:* (:not (member [1 2 3] [2 1 3]))) :epsilon (:* (:not (:? (:* (:and)))))))
    --------------------
32/500: trying (= a)

----------------------------------------
canonicalizing: (= a)
canonicalized: (= a)
cp calls= 1   cpo calls= 1  tp calls= 1  pattern (= a)
    cpo arg frequencies:
   1 : (seq len 2) (= a)
    --------------------
33/500: trying (:cat (:+ :empty-set) (:cat (:cat :empty-set (:or (:not :empty-set))) :empty-set :empty-set) (:or (:or (:? (:or)) (:cat (:cat))) (:cat :sigma (:cat :epsilon)) (:and (:and :empty-set) (:+ (:cat)))) (:and :sigma (:and (:+ (:cat)) (:+ (:* :sigma))) (:* (:* (:* :sigma)))))

----------------------------------------
canonicalizing: (:cat (:+ :empty-set) (:cat (:cat :empty-set (:or (:not :empty-set))) :empty-set :empty-set) (:or (:or (:? (:or)) (:cat (:cat))) (:cat :sigma (:cat :epsilon)) (:and (:and :empty-set) (:+ (:cat)))) (:and :sigma (:and (:+ (:cat)) (:+ (:* :sigma))) (:* (:* (:* :sigma)))))
canonicalized: :empty-set
cp calls= 63   cpo calls= 99  tp calls= 121  pattern (:cat (:+ :empty-set) (:cat (:cat :empty-set (:or (:not :empty-set))) :empty-set :empty-set) (:or (:or (:? (:or)) (:cat (:cat))) (:cat :sigma (:cat :epsilon)) (:and (:and :empty-set) (:+ (:cat)))) (:and :sigma (:and (:+ (:cat)) (:+ (:* :sigma))) (:* (:* (:* :sigma)))))
    cpo arg frequencies:
   23 :  :sigma
   17 :  :epsilon
   13 :  :empty-set
   8 : (seq len 2) (:* :sigma)
   6 : (seq len 1) (:cat)
   2 : (seq len 2) (:* (:cat))
   2 : (seq len 2) (:or :epsilon)
   2 : (seq len 2) (:+ (:cat))
   2 : (seq len 2) (:* (:* :sigma))
   1 : (seq len 5) (:cat (:+ :empty-set) (:cat (:cat :empty-set (:or (:not :empty-set))) :empty-set :empty-set) (:or (:or (:? (:or)) (:cat (:cat))) (:cat :sigma (:cat :epsilon)) (:and (:and :empty-set) (:+ (:cat)))) (:and :sigma (:and (:+ (:cat)) (:+ (:* :sigma))) (:* (:* (:* :sigma)))))
   1 : (seq len 4) (:cat (:cat :empty-set (:or (:not :empty-set))) :empty-set :empty-set)
   1 : (seq len 4) (:or (:or (:? (:or)) (:cat (:cat))) (:cat :sigma (:cat :epsilon)) (:and (:and :empty-set) (:+ (:cat))))
   1 : (seq len 4) (:and :sigma (:and (:+ (:cat)) (:+ (:* :sigma))) (:* (:* (:* :sigma))))
   1 : (seq len 3) (:and :epsilon :sigma)
   1 : (seq len 3) (:and (:+ (:cat)) (:+ (:* :sigma)))
   1 : (seq len 3) (:or (:? (:or)) (:cat (:cat)))
   1 : (seq len 3) (:and (:and :empty-set) (:+ (:cat)))
   1 : (seq len 3) (:cat :empty-set (:or (:not :empty-set)))
   1 : (seq len 3) (:or :epsilon :sigma)
   1 : (seq len 3) (:cat :sigma (:cat :epsilon))
   1 : (seq len 2) (:and :empty-set)
   1 : (seq len 2) (:cat (:* :sigma))
   1 : (seq len 2) (:+ :empty-set)
   1 : (seq len 2) (:? (:or))
   1 : (seq len 2) (:cat :sigma)
   1 : (seq len 2) (:+ (:* :sigma))
   1 : (seq len 2) (:cat (:cat))
   1 : (seq len 2) (:or (:not :empty-set))
   1 : (seq len 2) (:* :empty-set)
   1 : (seq len 2) (:and :epsilon)
   1 : (seq len 2) (:* (:* (:* :sigma)))
   1 : (seq len 2) (:cat :epsilon)
   1 : (seq len 1) (:or)
    --------------------
34/500: trying (:not (:+ (:cat (:? (:or)) (:+ (:* (:or))))))

----------------------------------------
canonicalizing: (:not (:+ (:cat (:? (:or)) (:+ (:* (:or))))))
canonicalized: (:cat :sigma (:* :sigma))
cp calls= 27   cpo calls= 55  tp calls= 73  pattern (:not (:+ (:cat (:? (:or)) (:+ (:* (:or))))))
    cpo arg frequencies:
   16 :  :epsilon
   6 : (seq len 1) (:or)
   6 :  :empty-set
   5 : (seq len 1) (:cat)
   4 : (seq len 2) (:* (:or))
   3 :  :sigma
   2 : (seq len 3) (:cat (:? (:or)) (:+ (:* (:or))))
   2 : (seq len 2) (:* (:* (:or)))
   2 : (seq len 2) (:or :epsilon)
   2 : (seq len 2) (:? (:or))
   2 : (seq len 2) (:+ (:* (:or)))
   1 : (seq len 3) (:cat :sigma (:* :sigma))
   1 : (seq len 2) (:* :sigma)
   1 : (seq len 2) (:not (:+ (:cat (:? (:or)) (:+ (:* (:or))))))
   1 : (seq len 2) (:* (:cat (:? (:or)) (:+ (:* (:or)))))
   1 : (seq len 2) (:+ (:cat (:? (:or)) (:+ (:* (:or)))))
    --------------------
35/500: trying (:+ (:not (:+ (:not (:? (member 2 3 4))))))

----------------------------------------
canonicalizing: (:+ (:not (:+ (:not (:? (member 2 3 4))))))
canonicalized: (:cat (:not (:cat (:and (:cat :sigma (:* :sigma)) (:not (= 2))) (:* (:and (:cat :sigma (:* :sigma)) (:not (= 2)))))) (:* (:not (:cat (:and (:cat :sigma (:* :sigma)) (:not (= 2))) (:* (:and (:cat :sigma (:* :sigma)) (:not (= 2))))))))
cp calls= 405   cpo calls= 433  tp calls= 440  pattern (:+ (:not (:+ (:not (:? (member 2 3 4))))))
    cpo arg frequencies:
   132 :  :sigma
   52 : (seq len 2) (= 2)
   44 : (seq len 3) (:cat :sigma (:* :sigma))
   44 : (seq len 2) (:* :sigma)
   44 : (seq len 2) (:not (= 2))
   40 : (seq len 3) (:and (:cat :sigma (:* :sigma)) (:not (= 2)))
   12 : (seq len 2) (:* (:and (:cat :sigma (:* :sigma)) (:not (= 2))))
   12 :  :epsilon
   10 : (seq len 3) (:cat (:and (:cat :sigma (:* :sigma)) (:not (= 2))) (:* (:and (:cat :sigma (:* :sigma)) (:not (= 2)))))
   8 : (seq len 2) (:not (:cat (:and (:cat :sigma (:* :sigma)) (:not (= 2))) (:* (:and (:cat :sigma (:* :sigma)) (:not (= 2))))))
   4 : (seq len 4) (member 2 3 4)
   4 : (seq len 3) (:and (:not (= 2)) (:not :epsilon))
   4 : (seq len 3) (:or (= 2) :epsilon)
   4 : (seq len 2) (:? (member 2 3 4))
   4 : (seq len 2) (:not :epsilon)
   4 : (seq len 2) (:not (:? (member 2 3 4)))
   2 : (seq len 2) (:+ (:not (:? (member 2 3 4))))
   2 : (seq len 2) (:* (:not (:cat (:and (:cat :sigma (:* :sigma)) (:not (= 2))) (:* (:and (:cat :sigma (:* :sigma)) (:not (= 2)))))))
   2 : (seq len 2) (:not (:+ (:not (:? (member 2 3 4)))))
   2 : (seq len 2) (:* (:not (:? (member 2 3 4))))
   1 : (seq len 3) (:cat (:not (:cat (:and (:cat :sigma (:* :sigma)) (:not (= 2))) (:* (:and (:cat :sigma (:* :sigma)) (:not (= 2)))))) (:* (:not (:cat (:and (:cat :sigma (:* :sigma)) (:not (= 2))) (:* (:and (:cat :sigma (:* :sigma)) (:not (= 2))))))))
   1 : (seq len 2) (:+ (:not (:+ (:not (:? (member 2 3 4))))))
   1 : (seq len 2) (:* (:not (:+ (:not (:? (member 2 3 4))))))
    --------------------
36/500: trying (:or (:or (:and (:? (:* java.lang.CharSequence)) (:or (:* :sigma))) (:or java.io.Serializable :sigma) (:* (:? :sigma))) :empty-set (:? :sigma) :epsilon)

----------------------------------------
canonicalizing: (:or (:or (:and (:? (:* java.lang.CharSequence)) (:or (:* :sigma))) (:or java.io.Serializable :sigma) (:* (:? :sigma))) :empty-set (:? :sigma) :epsilon)
canonicalized: (:or (:* (:or :epsilon :sigma)) (:* java.lang.CharSequence) :epsilon :sigma java.io.Serializable)
cp calls= 95   cpo calls= 106  tp calls= 111  pattern (:or (:or (:and (:? (:* java.lang.CharSequence)) (:or (:* :sigma))) (:or java.io.Serializable :sigma) (:* (:? :sigma))) :empty-set (:? :sigma) :epsilon)
    cpo arg frequencies:
   23 :  :sigma
   23 :  :epsilon
   14 :  java.lang.CharSequence
   11 : (seq len 3) (:or :epsilon :sigma)
   7 : (seq len 2) (:* java.lang.CharSequence)
   5 :  java.io.Serializable
   4 : (seq len 2) (:* (:or :epsilon :sigma))
   2 : (seq len 6) (:or (:* (:or :epsilon :sigma)) (:* java.lang.CharSequence) :epsilon :sigma java.io.Serializable)
   2 : (seq len 3) (:or (:* java.lang.CharSequence) :epsilon)
   2 : (seq len 2) (:? :sigma)
   2 :  :empty-set
   1 : (seq len 10) (:or (:* (:or :epsilon :sigma)) (:* java.lang.CharSequence) :epsilon :sigma java.io.Serializable :epsilon :sigma :empty-set :epsilon)
   1 : (seq len 5) (:or (:or (:and (:? (:* java.lang.CharSequence)) (:or (:* :sigma))) (:or java.io.Serializable :sigma) (:* (:? :sigma))) :empty-set (:? :sigma) :epsilon)
   1 : (seq len 4) (:or (:and (:? (:* java.lang.CharSequence)) (:or (:* :sigma))) (:or java.io.Serializable :sigma) (:* (:? :sigma)))
   1 : (seq len 3) (:or :sigma java.io.Serializable)
   1 : (seq len 3) (:or java.io.Serializable :sigma)
   1 : (seq len 3) (:and (:? (:* java.lang.CharSequence)) (:or (:* :sigma)))
   1 : (seq len 2) (:* :sigma)
   1 : (seq len 2) (:* (:? :sigma))
   1 : (seq len 2) (:or (:* :sigma))
   1 : (seq len 2) (:? (:* java.lang.CharSequence))
   1 : (seq len 2) (:and (:or (:* java.lang.CharSequence) :epsilon))
    --------------------
37/500: trying :sigma

----------------------------------------
canonicalizing: :sigma
canonicalized: :sigma
cp calls= 1   cpo calls= 1  tp calls= 1  pattern :sigma
    cpo arg frequencies:
   1 :  :sigma
    --------------------
38/500: trying (:and :sigma (:+ (satisfies seq?)) java.lang.CharSequence (:and (:* :epsilon) (:cat (:or (:and)) (:* (:cat))) :empty-set))

----------------------------------------
canonicalizing: (:and :sigma (:+ (satisfies seq?)) java.lang.CharSequence (:and (:* :epsilon) (:cat (:or (:and)) (:* (:cat))) :empty-set))
canonicalized: :empty-set
cp calls= 30   cpo calls= 42  tp calls= 49  pattern (:and :sigma (:+ (satisfies seq?)) java.lang.CharSequence (:and (:* :epsilon) (:cat (:or (:and)) (:* (:cat))) :empty-set))
    cpo arg frequencies:
   9 :  :sigma
   8 :  clojure.lang.ISeq
   4 :  :epsilon
   3 :  :empty-set
   2 : (seq len 2) (:* :sigma)
   2 : (seq len 2) (satisfies seq?)
   2 : (seq len 2) (:* clojure.lang.ISeq)
   1 : (seq len 5) (:and :sigma (:+ (satisfies seq?)) java.lang.CharSequence (:and (:* :epsilon) (:cat (:or (:and)) (:* (:cat))) :empty-set))
   1 : (seq len 4) (:and (:* :epsilon) (:cat (:or (:and)) (:* (:cat))) :empty-set)
   1 : (seq len 3) (:cat clojure.lang.ISeq (:* clojure.lang.ISeq))
   1 : (seq len 3) (:cat (:or (:and)) (:* (:cat)))
   1 : (seq len 2) (:cat (:* :sigma))
   1 : (seq len 2) (:* (:cat))
   1 : (seq len 2) (:* :epsilon)
   1 : (seq len 2) (:+ (satisfies seq?))
   1 : (seq len 2) (:* (satisfies seq?))
   1 : (seq len 2) (:or (:and))
   1 : (seq len 1) (:cat)
   1 :  java.lang.CharSequence
    --------------------
39/500: trying (satisfies float?)

----------------------------------------
canonicalizing: (satisfies float?)
canonicalized: (:or Double Float)
cp calls= 5   cpo calls= 6  tp calls= 7  pattern (satisfies float?)
    cpo arg frequencies:
   2 :  Double
   2 :  Float
   1 : (seq len 3) (:or Double Float)
   1 : (seq len 2) (satisfies float?)
    --------------------
40/500: trying (:cat (:not (:or :epsilon (:? :sigma))) (:* (:+ (:* (:cat)))) (:+ (:cat (:? (:* (:* :sigma))) (:or (:not (:cat))))) (:cat (:? (:cat (:and))) :sigma (:cat (:cat (:and)) (:* (:not :empty-set)))))

----------------------------------------
canonicalizing: (:cat (:not (:or :epsilon (:? :sigma))) (:* (:+ (:* (:cat)))) (:+ (:cat (:? (:* (:* :sigma))) (:or (:not (:cat))))) (:cat (:? (:cat (:and))) :sigma (:cat (:cat (:and)) (:* (:not :empty-set)))))
canonicalized: (:cat (:or (:and (:cat :sigma (:* :sigma)) (:cat :sigma :sigma (:* :sigma))) (:and (:cat :sigma (:* :sigma)) :epsilon)) (:* :sigma) :sigma (:* :sigma) (:* (:cat (:* :sigma) :sigma (:* :sigma))) (:* :sigma) :sigma (:* :sigma))
cp calls= 327   cpo calls= 367  tp calls= 385  pattern (:cat (:not (:or :epsilon (:? :sigma))) (:* (:+ (:* (:cat)))) (:+ (:cat (:? (:* (:* :sigma))) (:or (:not (:cat))))) (:cat (:? (:cat (:and))) :sigma (:cat (:cat (:and)) (:* (:not :empty-set)))))
    cpo arg frequencies:
   184 :  :sigma
   65 : (seq len 2) (:* :sigma)
   26 :  :epsilon
   13 : (seq len 3) (:cat :sigma (:* :sigma))
   12 : (seq len 4) (:cat (:* :sigma) :sigma (:* :sigma))
   6 : (seq len 4) (:cat :sigma :sigma (:* :sigma))
   5 : (seq len 1) (:cat)
   4 : (seq len 3) (:and (:cat :sigma (:* :sigma)) :epsilon)
   4 : (seq len 3) (:and (:cat :sigma (:* :sigma)) (:cat :sigma :sigma (:* :sigma)))
   4 : (seq len 2) (:* (:cat (:* :sigma) :sigma (:* :sigma)))
   3 : (seq len 3) (:or (:and (:cat :sigma (:* :sigma)) (:cat :sigma :sigma (:* :sigma))) (:and (:cat :sigma (:* :sigma)) :epsilon))
   2 : (seq len 3) (:cat (:? (:* (:* :sigma))) (:or (:not (:cat))))
   2 : (seq len 3) (:or :epsilon :sigma)
   2 : (seq len 2) (:or (:not (:cat)))
   2 : (seq len 2) (:* (:cat))
   2 : (seq len 2) (:cat (:and))
   2 : (seq len 2) (:? (:* (:* :sigma)))
   2 : (seq len 2) (:* (:* :sigma))
   1 : (seq len 10) (:cat (:or (:and (:cat :sigma (:* :sigma)) (:cat :sigma :sigma (:* :sigma))) (:and (:cat :sigma (:* :sigma)) :epsilon)) :epsilon (:* :sigma) :sigma (:* :sigma) (:* (:cat (:* :sigma) :sigma (:* :sigma))) (:* :sigma) :sigma (:* :sigma))
   1 : (seq len 9) (:cat (:or (:and (:cat :sigma (:* :sigma)) (:cat :sigma :sigma (:* :sigma))) (:and (:cat :sigma (:* :sigma)) :epsilon)) (:* :sigma) :sigma (:* :sigma) (:* (:cat (:* :sigma) :sigma (:* :sigma))) (:* :sigma) :sigma (:* :sigma))
   1 : (seq len 5) (:cat (:* :sigma) :sigma (:* :sigma) (:* (:cat (:* :sigma) :sigma (:* :sigma))))
   1 : (seq len 5) (:cat (:not (:or :epsilon (:? :sigma))) (:* (:+ (:* (:cat)))) (:+ (:cat (:? (:* (:* :sigma))) (:or (:not (:cat))))) (:cat (:? (:cat (:and))) :sigma (:cat (:cat (:and)) (:* (:not :empty-set)))))
   1 : (seq len 4) (:or :epsilon :sigma :epsilon)
   1 : (seq len 4) (:cat (:? (:cat (:and))) :sigma (:cat (:cat (:and)) (:* (:not :empty-set))))
   1 : (seq len 3) (:cat (:cat (:and)) (:* (:not :empty-set)))
   1 : (seq len 3) (:and (:not :epsilon) (:not :sigma))
   1 : (seq len 3) (:or (:and (:cat :sigma :sigma (:* :sigma)) (:cat :sigma (:* :sigma))) (:and :epsilon (:cat :sigma (:* :sigma))))
   1 : (seq len 3) (:or :epsilon (:? :sigma))
   1 : (seq len 3) (:and :epsilon (:cat :sigma (:* :sigma)))
   1 : (seq len 3) (:and (:cat :sigma :sigma (:* :sigma)) (:cat :sigma (:* :sigma)))
   1 : (seq len 3) (:or (:cat :sigma :sigma (:* :sigma)) :epsilon)
   1 : (seq len 2) (:cat (:* :sigma))
   1 : (seq len 2) (:not (:or :epsilon (:? :sigma)))
   1 : (seq len 2) (:* (:not :empty-set))
   1 : (seq len 2) (:not :epsilon)
   1 : (seq len 2) (:+ (:cat (:? (:* (:* :sigma))) (:or (:not (:cat)))))
   1 : (seq len 2) (:* (:cat (:? (:* (:* :sigma))) (:or (:not (:cat)))))
   1 : (seq len 2) (:not :empty-set)
   1 : (seq len 2) (:not :sigma)
   1 : (seq len 2) (:? (:cat (:and)))
   1 : (seq len 2) (:* (:* (:cat)))
   1 : (seq len 2) (:+ (:* (:cat)))
   1 : (seq len 2) (:* (:+ (:* (:cat))))
   1 : (seq len 2) (:? :sigma)
   1 :  :empty-set
    --------------------
41/500: trying :sigma

----------------------------------------
canonicalizing: :sigma
canonicalized: :sigma
cp calls= 1   cpo calls= 1  tp calls= 1  pattern :sigma
    cpo arg frequencies:
   1 :  :sigma
    --------------------
42/500: trying (:cat (:? (:or (:? (:or)) (satisfies keyword?))) (:cat (:or (:or (:? (:and))) (:cat (:? (:* :epsilon)))) :empty-set (:* (:+ (:cat)))) :empty-set :epsilon)

----------------------------------------
canonicalizing: (:cat (:? (:or (:? (:or)) (satisfies keyword?))) (:cat (:or (:or (:? (:and))) (:cat (:? (:* :epsilon)))) :empty-set (:* (:+ (:cat)))) :empty-set :epsilon)
canonicalized: :empty-set
cp calls= 40   cpo calls= 61  tp calls= 76  pattern (:cat (:? (:or (:? (:or)) (satisfies keyword?))) (:cat (:or (:or (:? (:and))) (:cat (:? (:* :epsilon)))) :empty-set (:* (:+ (:cat)))) :empty-set :epsilon)
    cpo arg frequencies:
   18 :  :epsilon
   8 :  :sigma
   5 :  :empty-set
   4 :  clojure.lang.Keyword
   3 : (seq len 2) (:* :sigma)
   3 : (seq len 1) (:cat)
   2 : (seq len 3) (:or :epsilon clojure.lang.Keyword)
   2 : (seq len 2) (:or :epsilon)
   1 : (seq len 5) (:cat (:? (:or (:? (:or)) (satisfies keyword?))) (:cat (:or (:or (:? (:and))) (:cat (:? (:* :epsilon)))) :empty-set (:* (:+ (:cat)))) :empty-set :epsilon)
   1 : (seq len 4) (:or :epsilon clojure.lang.Keyword :epsilon)
   1 : (seq len 4) (:cat (:or (:or (:? (:and))) (:cat (:? (:* :epsilon)))) :empty-set (:* (:+ (:cat))))
   1 : (seq len 3) (:or (:or (:? (:and))) (:cat (:? (:* :epsilon))))
   1 : (seq len 3) (:or (:? (:or)) (satisfies keyword?))
   1 : (seq len 2) (:cat (:? (:* :epsilon)))
   1 : (seq len 2) (:* (:cat))
   1 : (seq len 2) (:* :epsilon)
   1 : (seq len 2) (:or (:? (:and)))
   1 : (seq len 2) (:? (:or))
   1 : (seq len 2) (:* (:+ (:cat)))
   1 : (seq len 2) (:+ (:cat))
   1 : (seq len 2) (satisfies keyword?)
   1 : (seq len 2) (:? (:or (:? (:or)) (satisfies keyword?)))
   1 : (seq len 1) (:or)
   1 : (seq len 1) (:and)
    --------------------
43/500: trying :sigma

----------------------------------------
canonicalizing: :sigma
canonicalized: :sigma
cp calls= 1   cpo calls= 1  tp calls= 1  pattern :sigma
    cpo arg frequencies:
   1 :  :sigma
    --------------------
44/500: trying (:* (:* (satisfies int?)))

----------------------------------------
canonicalizing: (:* (:* (satisfies int?)))
canonicalized: (:* (:or Byte Integer Long Short))
cp calls= 36   cpo calls= 39  tp calls= 40  pattern (:* (:* (satisfies int?)))
    cpo arg frequencies:
   7 :  Integer
   7 :  Short
   7 :  Long
   7 :  Byte
   6 : (seq len 5) (:or Byte Integer Long Short)
   2 : (seq len 2) (:* (:or Byte Integer Long Short))
   1 : (seq len 2) (:* (satisfies int?))
   1 : (seq len 2) (:* (:* (satisfies int?)))
   1 : (seq len 2) (satisfies int?)
    --------------------
45/500: trying (:or :epsilon :empty-set (:* :epsilon) (:? (:cat :sigma :epsilon)))

----------------------------------------
canonicalizing: (:or :epsilon :empty-set (:* :epsilon) (:? (:cat :sigma :epsilon)))
canonicalized: (:or :epsilon :sigma)
cp calls= 18   cpo calls= 24  tp calls= 26  pattern (:or :epsilon :empty-set (:* :epsilon) (:? (:cat :sigma :epsilon)))
    cpo arg frequencies:
   9 :  :epsilon
   5 :  :sigma
   2 : (seq len 3) (:or :epsilon :sigma)
   2 :  :empty-set
   1 : (seq len 5) (:or :epsilon :empty-set (:* :epsilon) (:? (:cat :sigma :epsilon)))
   1 : (seq len 5) (:or :epsilon :sigma :empty-set :epsilon)
   1 : (seq len 3) (:cat :sigma :epsilon)
   1 : (seq len 2) (:* :epsilon)
   1 : (seq len 2) (:cat :sigma)
   1 : (seq len 2) (:? (:cat :sigma :epsilon))
    --------------------
46/500: trying (:not (:? :epsilon))

----------------------------------------
canonicalizing: (:not (:? :epsilon))
canonicalized: (:cat :sigma (:* :sigma))
cp calls= 8   cpo calls= 11  tp calls= 13  pattern (:not (:? :epsilon))
    cpo arg frequencies:
   3 :  :epsilon
   3 :  :sigma
   1 : (seq len 3) (:cat :sigma (:* :sigma))
   1 : (seq len 2) (:not (:? :epsilon))
   1 : (seq len 2) (:? :epsilon)
   1 : (seq len 2) (:or :epsilon)
   1 : (seq len 2) (:* :sigma)
    --------------------
47/500: trying (:+ (:cat (:cat java.lang.Number (:and (:cat))) :empty-set :empty-set))

----------------------------------------
canonicalizing: (:+ (:cat (:cat java.lang.Number (:and (:cat))) :empty-set :empty-set))
canonicalized: :empty-set
cp calls= 14   cpo calls= 24  tp calls= 31  pattern (:+ (:cat (:cat java.lang.Number (:and (:cat))) :empty-set :empty-set))
    cpo arg frequencies:
   7 :  :empty-set
   4 :  java.lang.Number
   3 :  :epsilon
   2 : (seq len 4) (:cat (:cat java.lang.Number (:and (:cat))) :empty-set :empty-set)
   2 : (seq len 3) (:cat java.lang.Number (:and (:cat)))
   2 : (seq len 2) (:cat java.lang.Number)
   2 : (seq len 2) (:and (:cat))
   1 : (seq len 2) (:* (:cat (:cat java.lang.Number (:and (:cat))) :empty-set :empty-set))
   1 : (seq len 2) (:+ (:cat (:cat java.lang.Number (:and (:cat))) :empty-set :empty-set))
    --------------------
48/500: trying (:not :epsilon)

----------------------------------------
canonicalizing: (:not :epsilon)
canonicalized: (:cat :sigma (:* :sigma))
cp calls= 6   cpo calls= 7  tp calls= 7  pattern (:not :epsilon)
    cpo arg frequencies:
   3 :  :sigma
   1 : (seq len 3) (:cat :sigma (:* :sigma))
   1 : (seq len 2) (:not :epsilon)
   1 : (seq len 2) (:* :sigma)
   1 :  :epsilon
    --------------------
49/500: trying (:+ :empty-set)

----------------------------------------
canonicalizing: (:+ :empty-set)
canonicalized: :empty-set
cp calls= 4   cpo calls= 6  tp calls= 7  pattern (:+ :empty-set)
    cpo arg frequencies:
   3 :  :empty-set
   1 : (seq len 2) (:+ :empty-set)
   1 : (seq len 2) (:* :empty-set)
   1 :  :epsilon
    --------------------
50/500: trying :sigma

----------------------------------------
canonicalizing: :sigma
canonicalized: :sigma
cp calls= 1   cpo calls= 1  tp calls= 1  pattern :sigma
    cpo arg frequencies:
   1 :  :sigma
    --------------------
51/500: trying (:cat (:cat :sigma (:? (:+ (:cat))) (:cat (:? (satisfies string?)) (:and :epsilon))) :empty-set (:or :empty-set (:and :epsilon (:* :epsilon)) (:not (satisfies string?))) java.lang.CharSequence)

----------------------------------------
canonicalizing: (:cat (:cat :sigma (:? (:+ (:cat))) (:cat (:? (satisfies string?)) (:and :epsilon))) :empty-set (:or :empty-set (:and :epsilon (:* :epsilon)) (:not (satisfies string?))) java.lang.CharSequence)
canonicalized: :empty-set
cp calls= 48   cpo calls= 69  tp calls= 81  pattern (:cat (:cat :sigma (:? (:+ (:cat))) (:cat (:? (satisfies string?)) (:and :epsilon))) :empty-set (:or :empty-set (:and :epsilon (:* :epsilon)) (:not (satisfies string?))) java.lang.CharSequence)
    cpo arg frequencies:
   19 :  :epsilon
   10 :  String
   4 : (seq len 3) (:or :epsilon String)
   4 :  :empty-set
   3 : (seq len 2) (:not String)
   3 : (seq len 1) (:cat)
   3 :  :sigma
   2 : (seq len 3) (:or (:not String) :epsilon)
   2 : (seq len 2) (satisfies string?)
   2 : (seq len 2) (:and :epsilon)
   2 :  java.lang.CharSequence
   1 : (seq len 6) (:cat :sigma (:or :epsilon String) :empty-set (:or (:not String) :epsilon) java.lang.CharSequence)
   1 : (seq len 5) (:cat (:cat :sigma (:? (:+ (:cat))) (:cat (:? (satisfies string?)) (:and :epsilon))) :empty-set (:or :empty-set (:and :epsilon (:* :epsilon)) (:not (satisfies string?))) java.lang.CharSequence)
   1 : (seq len 4) (:cat :sigma (:? (:+ (:cat))) (:cat (:? (satisfies string?)) (:and :epsilon)))
   1 : (seq len 4) (:or :empty-set (:and :epsilon (:* :epsilon)) (:not (satisfies string?)))
   1 : (seq len 3) (:cat (:? (satisfies string?)) (:and :epsilon))
   1 : (seq len 3) (:and :epsilon (:* :epsilon))
   1 : (seq len 3) (:cat :sigma (:or :epsilon String))
   1 : (seq len 2) (:? (:+ (:cat)))
   1 : (seq len 2) (:* (:cat))
   1 : (seq len 2) (:* :epsilon)
   1 : (seq len 2) (:or :epsilon)
   1 : (seq len 2) (:+ (:cat))
   1 : (seq len 2) (:? (satisfies string?))
   1 : (seq len 2) (:not (satisfies string?))
   1 : (seq len 2) (:cat (:or :epsilon String))
    --------------------
52/500: trying (:+ (:* (:* (:or :empty-set))))

----------------------------------------
canonicalizing: (:+ (:* (:* (:or :empty-set))))
canonicalized: :epsilon
cp calls= 8   cpo calls= 17  tp calls= 21  pattern (:+ (:* (:* (:or :empty-set))))
    cpo arg frequencies:
   6 :  :epsilon
   2 : (seq len 2) (:* (:* (:or :empty-set)))
   2 : (seq len 2) (:* (:or :empty-set))
   2 : (seq len 2) (:or :empty-set)
   2 :  :empty-set
   1 : (seq len 2) (:+ (:* (:* (:or :empty-set))))
   1 : (seq len 2) (:* (:* (:* (:or :empty-set))))
   1 : (seq len 1) (:cat)
    --------------------
53/500: trying :empty-set

----------------------------------------
canonicalizing: :empty-set
canonicalized: :empty-set
cp calls= 1   cpo calls= 1  tp calls= 1  pattern :empty-set
    cpo arg frequencies:
   1 :  :empty-set
    --------------------
54/500: trying (:+ (:? (:not (:? :epsilon))))

----------------------------------------
canonicalizing: (:+ (:? (:not (:? :epsilon))))
canonicalized: (:* :sigma)
cp calls= 36   cpo calls= 49  tp calls= 59  pattern (:+ (:? (:not (:? :epsilon))))
    cpo arg frequencies:
   20 :  :sigma
   8 :  :epsilon
   6 : (seq len 2) (:* :sigma)
   2 : (seq len 3) (:cat :sigma (:* :sigma))
   2 : (seq len 2) (:or (:* :sigma))
   2 : (seq len 2) (:or :epsilon)
   2 : (seq len 2) (:? :epsilon)
   2 : (seq len 2) (:? (:not (:? :epsilon)))
   2 : (seq len 2) (:not (:? :epsilon))
   1 : (seq len 2) (:cat (:* :sigma))
   1 : (seq len 2) (:+ (:? (:not (:? :epsilon))))
   1 : (seq len 2) (:* (:? (:not (:? :epsilon))))
    --------------------
55/500: trying (:+ (:or (:* (:and (:+ (:cat)))) :empty-set :sigma))

----------------------------------------
canonicalizing: (:+ (:or (:* (:and (:+ (:cat)))) :empty-set :sigma))
canonicalized: (:cat (:or :epsilon :sigma) (:* (:or :epsilon :sigma)))
cp calls= 41   cpo calls= 57  tp calls= 68  pattern (:+ (:or (:* (:and (:+ (:cat)))) :empty-set :sigma))
    cpo arg frequencies:
   18 :  :epsilon
   10 :  :sigma
   8 : (seq len 3) (:or :epsilon :sigma)
   6 : (seq len 1) (:cat)
   2 : (seq len 4) (:or (:* (:and (:+ (:cat)))) :empty-set :sigma)
   2 : (seq len 2) (:* (:or :epsilon :sigma))
   2 : (seq len 2) (:* (:cat))
   2 : (seq len 2) (:* (:and (:+ (:cat))))
   2 : (seq len 2) (:and (:+ (:cat)))
   2 :  :empty-set
   1 : (seq len 3) (:cat (:or :epsilon :sigma) (:* (:or :epsilon :sigma)))
   1 : (seq len 2) (:* (:or (:* (:and (:+ (:cat)))) :empty-set :sigma))
   1 : (seq len 2) (:+ (:or (:* (:and (:+ (:cat)))) :empty-set :sigma))
    --------------------
56/500: trying (:? (:and (:cat :epsilon (:+ :empty-set)) (:cat (:not (:not clojure.lang.IMeta)) (:* :sigma)) :sigma))

----------------------------------------
canonicalizing: (:? (:and (:cat :epsilon (:+ :empty-set)) (:cat (:not (:not clojure.lang.IMeta)) (:* :sigma)) :sigma))
canonicalized: :epsilon
cp calls= 21   cpo calls= 29  tp calls= 32  pattern (:? (:and (:cat :epsilon (:+ :empty-set)) (:cat (:not (:not clojure.lang.IMeta)) (:* :sigma)) :sigma))
    cpo arg frequencies:
   5 :  :sigma
   5 :  :empty-set
   4 :  :epsilon
   3 :  clojure.lang.IMeta
   2 : (seq len 2) (:* :sigma)
   1 : (seq len 4) (:and (:cat :epsilon (:+ :empty-set)) (:cat (:not (:not clojure.lang.IMeta)) (:* :sigma)) :sigma)
   1 : (seq len 3) (:cat (:not (:not clojure.lang.IMeta)) (:* :sigma))
   1 : (seq len 3) (:cat clojure.lang.IMeta (:* :sigma))
   1 : (seq len 3) (:cat :epsilon (:+ :empty-set))
   1 : (seq len 2) (:not (:not clojure.lang.IMeta))
   1 : (seq len 2) (:or :epsilon)
   1 : (seq len 2) (:not clojure.lang.IMeta)
   1 : (seq len 2) (:? (:and (:cat :epsilon (:+ :empty-set)) (:cat (:not (:not clojure.lang.IMeta)) (:* :sigma)) :sigma))
   1 : (seq len 2) (:+ :empty-set)
   1 : (seq len 2) (:* :empty-set)
    --------------------
57/500: trying (:cat (:not (:and (:+ (:cat)) :empty-set)) (:+ :epsilon) (:cat (:or (:or :empty-set) (:? (:+ (:+ (member 1 a))))) (:cat (:* (:+ :epsilon)) :epsilon) (:? (:cat (:? :sigma)))) (:* :empty-set))

----------------------------------------
canonicalizing: (:cat (:not (:and (:+ (:cat)) :empty-set)) (:+ :epsilon) (:cat (:or (:or :empty-set) (:? (:+ (:+ (member 1 a))))) (:cat (:* (:+ :epsilon)) :epsilon) (:? (:cat (:? :sigma)))) (:* :empty-set))
canonicalized: (:cat (:* :sigma) (:or (:cat (= 1) (:* (= 1)) (:* (:cat (= 1) (:* (= 1))))) :epsilon) (:or :epsilon :sigma))
cp calls= 217   cpo calls= 254  tp calls= 271  pattern (:cat (:not (:and (:+ (:cat)) :empty-set)) (:+ :epsilon) (:cat (:or (:or :empty-set) (:? (:+ (:+ (member 1 a))))) (:cat (:* (:+ :epsilon)) :epsilon) (:? (:cat (:? :sigma)))) (:* :empty-set))
    cpo arg frequencies:
   88 : (seq len 2) (= 1)
   34 :  :epsilon
   28 : (seq len 2) (:* (= 1))
   19 : (seq len 3) (:cat (= 1) (:* (= 1)))
   13 :  :sigma
   8 : (seq len 2) (:* (:cat (= 1) (:* (= 1))))
   7 : (seq len 4) (:cat (= 1) (:* (= 1)) (:* (:cat (= 1) (:* (= 1)))))
   6 : (seq len 1) (:cat)
   5 : (seq len 3) (:or (:cat (= 1) (:* (= 1)) (:* (:cat (= 1) (:* (= 1))))) :epsilon)
   5 : (seq len 3) (:or :epsilon :sigma)
   5 :  :empty-set
   4 : (seq len 3) (member 1 a)
   3 : (seq len 2) (:* :sigma)
   2 : (seq len 2) (:* (member 1 a))
   2 : (seq len 2) (:* :epsilon)
   2 : (seq len 2) (:+ :epsilon)
   2 : (seq len 2) (:+ (member 1 a))
   1 : (seq len 6) (:cat (:* :sigma) :epsilon (:or (:cat (= 1) (:* (= 1)) (:* (:cat (= 1) (:* (= 1))))) :epsilon) (:or :epsilon :sigma) :epsilon)
   1 : (seq len 5) (:cat (:not (:and (:+ (:cat)) :empty-set)) (:+ :epsilon) (:cat (:or (:or :empty-set) (:? (:+ (:+ (member 1 a))))) (:cat (:* (:+ :epsilon)) :epsilon) (:? (:cat (:? :sigma)))) (:* :empty-set))
   1 : (seq len 4) (:or :epsilon :sigma :epsilon)
   1 : (seq len 4) (:cat (:or (:or :empty-set) (:? (:+ (:+ (member 1 a))))) (:cat (:* (:+ :epsilon)) :epsilon) (:? (:cat (:? :sigma))))
   1 : (seq len 4) (:cat (:* :sigma) (:or (:cat (= 1) (:* (= 1)) (:* (:cat (= 1) (:* (= 1))))) :epsilon) (:or :epsilon :sigma))
   1 : (seq len 4) (:or (:cat (= 1) (:* (= 1)) (:* (:cat (= 1) (:* (= 1))))) :epsilon :empty-set)
   1 : (seq len 3) (:or (:or :empty-set) (:? (:+ (:+ (member 1 a)))))
   1 : (seq len 3) (:cat (:* (:+ :epsilon)) :epsilon)
   1 : (seq len 3) (:cat (:or (:cat (= 1) (:* (= 1)) (:* (:cat (= 1) (:* (= 1))))) :epsilon) (:or :epsilon :sigma))
   1 : (seq len 3) (:and (:+ (:cat)) :empty-set)
   1 : (seq len 2) (:* (:cat))
   1 : (seq len 2) (:? (:cat (:? :sigma)))
   1 : (seq len 2) (:cat (:? :sigma))
   1 : (seq len 2) (:+ (:+ (member 1 a)))
   1 : (seq len 2) (:* (:+ :epsilon))
   1 : (seq len 2) (:+ (:cat))
   1 : (seq len 2) (:? (:+ (:+ (member 1 a))))
   1 : (seq len 2) (:not (:and (:+ (:cat)) :empty-set))
   1 : (seq len 2) (:* :empty-set)
   1 : (seq len 2) (:* (:+ (member 1 a)))
   1 : (seq len 2) (:or :empty-set)
    --------------------
58/500: trying (:cat (:? (:cat (:and (:or)) (:not (:or)))) :empty-set (:or (:+ (:+ (:+ :sigma))) (= a) (:cat (:* (:+ (:cat))) (satisfies symbol?))) (:or (:cat (:? (:cat)) (:and (member 2 3 4))) (:* (:and (:? (:and)))) (:cat (:* (:* (:+ (:+ (:cat))))) (:* (:cat)))))

----------------------------------------
canonicalizing: (:cat (:? (:cat (:and (:or)) (:not (:or)))) :empty-set (:or (:+ (:+ (:+ :sigma))) (= a) (:cat (:* (:+ (:cat))) (satisfies symbol?))) (:or (:cat (:? (:cat)) (:and (member 2 3 4))) (:* (:and (:? (:and)))) (:cat (:* (:* (:+ (:+ (:cat))))) (:* (:cat)))))
canonicalized: :empty-set
cp calls= 303   cpo calls= 359  tp calls= 397  pattern (:cat (:? (:cat (:and (:or)) (:not (:or)))) :empty-set (:or (:+ (:+ (:+ :sigma))) (= a) (:cat (:* (:+ (:cat))) (satisfies symbol?))) (:or (:cat (:? (:cat)) (:and (member 2 3 4))) (:* (:and (:? (:and)))) (:cat (:* (:* (:+ (:+ (:cat))))) (:* (:cat)))))
    cpo arg frequencies:
   153 :  :sigma
   52 : (seq len 2) (:* :sigma)
   32 : (seq len 3) (:cat :sigma (:* :sigma))
   26 :  :epsilon
   13 : (seq len 2) (:* (:cat :sigma (:* :sigma)))
   13 : (seq len 1) (:cat)
   9 : (seq len 4) (:cat :sigma (:* :sigma) (:* (:cat :sigma (:* :sigma))))
   5 :  :empty-set
   4 : (seq len 2) (:* (:cat))
   4 : (seq len 2) (:+ :sigma)
   3 : (seq len 2) (:+ (:cat))
   3 : (seq len 2) (:* (:cat :sigma (:* :sigma) (:* (:cat :sigma (:* :sigma)))))
   3 :  clojure.lang.Symbol
   2 : (seq len 5) (:cat :sigma (:* :sigma) (:* (:cat :sigma (:* :sigma))) (:* (:cat :sigma (:* :sigma) (:* (:cat :sigma (:* :sigma))))))
   2 : (seq len 2) (= 2)
   2 : (seq len 2) (:or :epsilon)
   2 : (seq len 2) (:* (:+ (:cat)))
   2 : (seq len 2) (:* (:+ :sigma))
   2 : (seq len 2) (= a)
   2 : (seq len 2) (:+ (:+ :sigma))
   1 : (seq len 5) (:cat (:? (:cat (:and (:or)) (:not (:or)))) :empty-set (:or (:+ (:+ (:+ :sigma))) (= a) (:cat (:* (:+ (:cat))) (satisfies symbol?))) (:or (:cat (:? (:cat)) (:and (member 2 3 4))) (:* (:and (:? (:and)))) (:cat (:* (:* (:+ (:+ (:cat))))) (:* (:cat)))))
   1 : (seq len 4) (:or (:cat (:? (:cat)) (:and (member 2 3 4))) (:* (:and (:? (:and)))) (:cat (:* (:* (:+ (:+ (:cat))))) (:* (:cat))))
   1 : (seq len 4) (:or (:cat :sigma (:* :sigma) (:* (:cat :sigma (:* :sigma))) (:* (:cat :sigma (:* :sigma) (:* (:cat :sigma (:* :sigma)))))) (= a) clojure.lang.Symbol)
   1 : (seq len 4) (:or (:+ (:+ (:+ :sigma))) (= a) (:cat (:* (:+ (:cat))) (satisfies symbol?)))
   1 : (seq len 3) (:cat (:? (:cat)) (:and (member 2 3 4)))
   1 : (seq len 3) (:cat (:* (:+ (:cat))) (satisfies symbol?))
   1 : (seq len 3) (:cat (:* (:* (:+ (:+ (:cat))))) (:* (:cat)))
   1 : (seq len 3) (:cat (:and (:or)) (:not (:or)))
   1 : (seq len 2) (:* (:* (:+ (:+ (:cat)))))
   1 : (seq len 2) (satisfies symbol?)
   1 : (seq len 2) (:+ (:+ (:+ :sigma)))
   1 : (seq len 2) (:* (:+ (:+ :sigma)))
   1 : (seq len 2) (:cat (= 2))
   1 : (seq len 2) (:+ (:+ (:cat)))
   1 : (seq len 2) (:* (:and (:? (:and))))
   1 : (seq len 2) (:cat clojure.lang.Symbol)
   1 : (seq len 2) (:and (member 2 3 4))
   1 : (seq len 2) (:? (:cat))
   1 : (seq len 2) (:? (:cat (:and (:or)) (:not (:or))))
   1 : (seq len 2) (:not (:or))
   1 : (seq len 2) (:and (:? (:and)))
   1 : (seq len 2) (:and (:or))
   1 : (seq len 2) (:* (:+ (:+ (:cat))))
   1 : (seq len 1) (:or)
   1 : (seq len 1) (:and)
    --------------------
59/500: trying (:? (:or (:not (:cat (:or))) :sigma (:* :empty-set)))

----------------------------------------
canonicalizing: (:? (:or (:not (:cat (:or))) :sigma (:* :empty-set)))
canonicalized: (:* :sigma)
cp calls= 14   cpo calls= 19  tp calls= 22  pattern (:? (:or (:not (:cat (:or))) :sigma (:* :empty-set)))
    cpo arg frequencies:
   7 :  :sigma
   3 : (seq len 2) (:* :sigma)
   2 :  :empty-set
   2 :  :epsilon
   1 : (seq len 4) (:or (:not (:cat (:or))) :sigma (:* :empty-set))
   1 : (seq len 2) (:not (:cat (:or)))
   1 : (seq len 2) (:? (:or (:not (:cat (:or))) :sigma (:* :empty-set)))
   1 : (seq len 2) (:cat (:or))
   1 : (seq len 2) (:* :empty-set)
    --------------------
60/500: trying :epsilon

----------------------------------------
canonicalizing: :epsilon
canonicalized: :epsilon
cp calls= 1   cpo calls= 1  tp calls= 1  pattern :epsilon
    cpo arg frequencies:
   1 :  :epsilon
    --------------------
61/500: trying (:or (:cat (:cat (:cat (:* :sigma)) (:cat (:and))) (:cat :epsilon (= 0)) (:cat (:cat (:not :epsilon)) (:cat (member a b c)))) (:* (:not (:and (:cat)))) (:and (:+ (:or :epsilon)) (member [1 2 3] [2 1 3]) (:and :sigma (:? (:cat)))) (:+ (satisfies string?)))

----------------------------------------
canonicalizing: (:or (:cat (:cat (:cat (:* :sigma)) (:cat (:and))) (:cat :epsilon (= 0)) (:cat (:cat (:not :epsilon)) (:cat (member a b c)))) (:* (:not (:and (:cat)))) (:and (:+ (:or :epsilon)) (member [1 2 3] [2 1 3]) (:and :sigma (:? (:cat)))) (:+ (satisfies string?)))
canonicalized: (:or (:* (:cat :sigma (:* :sigma))) (:and (= [1 2 3]) :epsilon :sigma) (:cat (:* :sigma) (= 0) :sigma (:* :sigma) (= a)) (:cat String (:* String)))
cp calls= 125   cpo calls= 155  tp calls= 174  pattern (:or (:cat (:cat (:cat (:* :sigma)) (:cat (:and))) (:cat :epsilon (= 0)) (:cat (:cat (:not :epsilon)) (:cat (member a b c)))) (:* (:not (:and (:cat)))) (:and (:+ (:or :epsilon)) (member [1 2 3] [2 1 3]) (:and :sigma (:? (:cat)))) (:+ (satisfies string?)))
    cpo arg frequencies:
   51 :  :sigma
   15 : (seq len 2) (:* :sigma)
   15 :  :epsilon
   11 :  String
   7 : (seq len 3) (:cat :sigma (:* :sigma))
   4 : (seq len 2) (= [1 2 3])
   4 : (seq len 2) (= a)
   4 : (seq len 2) (= 0)
   3 : (seq len 2) (:* String)
   3 : (seq len 2) (:or :epsilon)
   2 : (seq len 6) (:cat (:* :sigma) (= 0) :sigma (:* :sigma) (= a))
   2 : (seq len 4) (:and (= [1 2 3]) :epsilon :sigma)
   2 : (seq len 3) (:cat String (:* String))
   2 : (seq len 2) (:cat (:* :sigma))
   2 : (seq len 2) (satisfies string?)
   2 : (seq len 2) (:* (:cat :sigma (:* :sigma)))
   2 : (seq len 1) (:cat)
   1 : (seq len 5) (:or (:cat (:cat (:cat (:* :sigma)) (:cat (:and))) (:cat :epsilon (= 0)) (:cat (:cat (:not :epsilon)) (:cat (member a b c)))) (:* (:not (:and (:cat)))) (:and (:+ (:or :epsilon)) (member [1 2 3] [2 1 3]) (:and :sigma (:? (:cat)))) (:+ (satisfies string?)))
   1 : (seq len 5) (:or (:* (:cat :sigma (:* :sigma))) (:and (= [1 2 3]) :epsilon :sigma) (:cat (:* :sigma) (= 0) :sigma (:* :sigma) (= a)) (:cat String (:* String)))
   1 : (seq len 5) (:and :epsilon :sigma (= [1 2 3]) :epsilon)
   1 : (seq len 4) (:and (:+ (:or :epsilon)) (member [1 2 3] [2 1 3]) (:and :sigma (:? (:cat))))
   1 : (seq len 4) (:cat (:cat (:cat (:* :sigma)) (:cat (:and))) (:cat :epsilon (= 0)) (:cat (:cat (:not :epsilon)) (:cat (member a b c))))
   1 : (seq len 4) (:cat :sigma (:* :sigma) (= a))
   1 : (seq len 3) (:and :epsilon :sigma)
   1 : (seq len 3) (:cat (:cat (:not :epsilon)) (:cat (member a b c)))
   1 : (seq len 3) (:cat :epsilon (= 0))
   1 : (seq len 3) (:and :sigma (:? (:cat)))
   1 : (seq len 3) (member [1 2 3] [2 1 3])
   1 : (seq len 3) (:cat (:cat (:* :sigma)) (:cat (:and)))
   1 : (seq len 2) (:+ (satisfies string?))
   1 : (seq len 2) (:not (:and (:cat)))
   1 : (seq len 2) (:cat (member a b c))
   1 : (seq len 2) (:cat (:and))
   1 : (seq len 2) (:cat (= 0))
   1 : (seq len 2) (:? (:cat))
   1 : (seq len 2) (:cat (:not :epsilon))
   1 : (seq len 2) (:and (:cat))
   1 : (seq len 2) (:* (:not (:and (:cat))))
   1 : (seq len 2) (:* (:or :epsilon))
   1 : (seq len 2) (:+ (:or :epsilon))
   1 : (seq len 2) (:* (satisfies string?))
    --------------------
62/500: trying (:or :sigma :sigma (:cat (:not (:+ (:not (:* :empty-set)))) (:or (:* (:cat)) (:? (:+ (:cat)))) (:or (:cat (:? (:cat))) (:cat :empty-set))) (:or clojure.lang.IMeta :empty-set (:not (member a b))))

----------------------------------------
canonicalizing: (:or :sigma :sigma (:cat (:not (:+ (:not (:* :empty-set)))) (:or (:* (:cat)) (:? (:+ (:cat)))) (:or (:cat (:? (:cat))) (:cat :empty-set))) (:or clojure.lang.IMeta :empty-set (:not (member a b))))
canonicalized: (:or (:not (:cat :sigma (:* :sigma) (:* (:cat :sigma (:* :sigma))))) (:not (= a)) :sigma clojure.lang.IMeta)
cp calls= 164   cpo calls= 195  tp calls= 211  pattern (:or :sigma :sigma (:cat (:not (:+ (:not (:* :empty-set)))) (:or (:* (:cat)) (:? (:+ (:cat)))) (:or (:cat (:? (:cat))) (:cat :empty-set))) (:or clojure.lang.IMeta :empty-set (:not (member a b))))
    cpo arg frequencies:
   73 :  :sigma
   23 : (seq len 2) (:* :sigma)
   17 : (seq len 3) (:cat :sigma (:* :sigma))
   15 :  :epsilon
   7 : (seq len 2) (:* (:cat :sigma (:* :sigma)))
   6 : (seq len 4) (:cat :sigma (:* :sigma) (:* (:cat :sigma (:* :sigma))))
   5 : (seq len 2) (= a)
   5 : (seq len 1) (:cat)
   4 : (seq len 2) (:or :epsilon)
   4 : (seq len 2) (:not (:cat :sigma (:* :sigma) (:* (:cat :sigma (:* :sigma)))))
   4 : (seq len 2) (:not (= a))
   4 :  :empty-set
   4 :  clojure.lang.IMeta
   2 : (seq len 2) (:* (:cat))
   2 : (seq len 2) (:not (:* :empty-set))
   2 : (seq len 2) (:* :empty-set)
   1 : (seq len 5) (:or (:not (:cat :sigma (:* :sigma) (:* (:cat :sigma (:* :sigma))))) (:not (= a)) clojure.lang.IMeta :sigma)
   1 : (seq len 5) (:or (:not (:cat :sigma (:* :sigma) (:* (:cat :sigma (:* :sigma))))) (:not (= a)) :sigma clojure.lang.IMeta)
   1 : (seq len 5) (:or :sigma :sigma (:cat (:not (:+ (:not (:* :empty-set)))) (:or (:* (:cat)) (:? (:+ (:cat)))) (:or (:cat (:? (:cat))) (:cat :empty-set))) (:or clojure.lang.IMeta :empty-set (:not (member a b))))
   1 : (seq len 4) (:cat (:not (:+ (:not (:* :empty-set)))) (:or (:* (:cat)) (:? (:+ (:cat)))) (:or (:cat (:? (:cat))) (:cat :empty-set)))
   1 : (seq len 4) (:or clojure.lang.IMeta :empty-set (:not (member a b)))
   1 : (seq len 3) (:or (:cat (:? (:cat))) (:cat :empty-set))
   1 : (seq len 3) (:or (:not (= a)) clojure.lang.IMeta)
   1 : (seq len 3) (:or (:* (:cat)) (:? (:+ (:cat))))
   1 : (seq len 3) (member a b)
   1 : (seq len 2) (:? (:+ (:cat)))
   1 : (seq len 2) (:* (:not (:* :empty-set)))
   1 : (seq len 2) (:+ (:not (:* :empty-set)))
   1 : (seq len 2) (:not (member a b))
   1 : (seq len 2) (:+ (:cat))
   1 : (seq len 2) (:cat (:? (:cat)))
   1 : (seq len 2) (:not (:+ (:not (:* :empty-set))))
   1 : (seq len 2) (:cat :empty-set)
   1 : (seq len 2) (:cat (:not (:cat :sigma (:* :sigma) (:* (:cat :sigma (:* :sigma))))))
    --------------------
63/500: trying (:* :epsilon)

----------------------------------------
canonicalizing: (:* :epsilon)
canonicalized: :epsilon
cp calls= 2   cpo calls= 3  tp calls= 3  pattern (:* :epsilon)
    cpo arg frequencies:
   2 :  :epsilon
   1 : (seq len 2) (:* :epsilon)
    --------------------
64/500: trying (:+ (:+ (:or (:not :empty-set) (:cat :empty-set))))

----------------------------------------
canonicalizing: (:+ (:+ (:or (:not :empty-set) (:cat :empty-set))))
canonicalized: (:* :sigma)
cp calls= 56   cpo calls= 77  tp calls= 87  pattern (:+ (:+ (:or (:not :empty-set) (:cat :empty-set))))
    cpo arg frequencies:
   34 :  :sigma
   14 : (seq len 2) (:* :sigma)
   8 :  :empty-set
   4 : (seq len 3) (:or (:not :empty-set) (:cat :empty-set))
   4 : (seq len 2) (:not :empty-set)
   4 : (seq len 2) (:cat :empty-set)
   3 : (seq len 2) (:cat (:* :sigma))
   2 : (seq len 2) (:* (:or (:not :empty-set) (:cat :empty-set)))
   2 : (seq len 2) (:+ (:or (:not :empty-set) (:cat :empty-set)))
   1 : (seq len 2) (:+ (:+ (:or (:not :empty-set) (:cat :empty-set))))
   1 : (seq len 2) (:* (:+ (:or (:not :empty-set) (:cat :empty-set))))
    --------------------
65/500: trying (:and (:or :epsilon (:+ (:or (satisfies string?))) (:cat :sigma (:? (:or)))) (:cat (:cat (:cat :sigma) (member [1 2 3] [2 1 3])) (:+ (:? (:? (:cat)))) :epsilon) :epsilon (:not (:+ (:and (:+ (:cat))))))

----------------------------------------
canonicalizing: (:and (:or :epsilon (:+ (:or (satisfies string?))) (:cat :sigma (:? (:or)))) (:cat (:cat (:cat :sigma) (member [1 2 3] [2 1 3])) (:+ (:? (:? (:cat)))) :epsilon) :epsilon (:not (:+ (:and (:+ (:cat))))))
canonicalized: (:or (:and (:* String) (:cat :sigma (:* :sigma)) (:cat :sigma (= [1 2 3])) :epsilon) (:and (:cat :sigma (:* :sigma)) (:cat :sigma (= [1 2 3])) :epsilon :sigma))
cp calls= 122   cpo calls= 167  tp calls= 201  pattern (:and (:or :epsilon (:+ (:or (satisfies string?))) (:cat :sigma (:? (:or)))) (:cat (:cat (:cat :sigma) (member [1 2 3] [2 1 3])) (:+ (:? (:? (:cat)))) :epsilon) :epsilon (:not (:+ (:and (:+ (:cat))))))
    cpo arg frequencies:
   34 :  :epsilon
   33 :  :sigma
   14 :  String
   10 : (seq len 1) (:cat)
   9 : (seq len 2) (= [1 2 3])
   7 : (seq len 3) (:cat :sigma (= [1 2 3]))
   6 : (seq len 3) (:cat :sigma (:* :sigma))
   6 : (seq len 2) (:* :sigma)
   5 : (seq len 2) (:* String)
   5 : (seq len 2) (:or :epsilon)
   2 : (seq len 5) (:and (:cat :sigma (:* :sigma)) (:cat :sigma (= [1 2 3])) :epsilon :sigma)
   2 : (seq len 5) (:and (:* String) (:cat :sigma (:* :sigma)) (:cat :sigma (= [1 2 3])) :epsilon)
   2 : (seq len 2) (:or (satisfies string?))
   2 : (seq len 2) (:* (:cat))
   2 : (seq len 2) (:? (:? (:cat)))
   2 : (seq len 2) (:cat :sigma)
   2 : (seq len 2) (:? (:cat))
   2 : (seq len 2) (:and (:+ (:cat)))
   1 : (seq len 5) (:and (:or :epsilon (:+ (:or (satisfies string?))) (:cat :sigma (:? (:or)))) (:cat (:cat (:cat :sigma) (member [1 2 3] [2 1 3])) (:+ (:? (:? (:cat)))) :epsilon) :epsilon (:not (:+ (:and (:+ (:cat))))))
   1 : (seq len 5) (:cat :sigma (= [1 2 3]) :epsilon :epsilon)
   1 : (seq len 5) (:and :sigma (:cat :sigma (:* :sigma)) (:cat :sigma (= [1 2 3])) :epsilon)
   1 : (seq len 4) (:cat (:cat (:cat :sigma) (member [1 2 3] [2 1 3])) (:+ (:? (:? (:cat)))) :epsilon)
   1 : (seq len 4) (:or :epsilon (:+ (:or (satisfies string?))) (:cat :sigma (:? (:or))))
   1 : (seq len 3) (:or (:and (:* String) (:cat :sigma (:* :sigma)) (:cat :sigma (= [1 2 3])) :epsilon) (:and :sigma (:cat :sigma (:* :sigma)) (:cat :sigma (= [1 2 3])) :epsilon))
   1 : (seq len 3) (:cat :sigma (:? (:or)))
   1 : (seq len 3) (:or (:* String) :sigma)
   1 : (seq len 3) (:cat (:cat :sigma) (member [1 2 3] [2 1 3]))
   1 : (seq len 3) (:cat String (:* String))
   1 : (seq len 3) (member [1 2 3] [2 1 3])
   1 : (seq len 3) (:or (:and (:* String) (:cat :sigma (:* :sigma)) (:cat :sigma (= [1 2 3])) :epsilon) (:and (:cat :sigma (:* :sigma)) (:cat :sigma (= [1 2 3])) :epsilon :sigma))
   1 : (seq len 2) (:not (:+ (:and (:+ (:cat)))))
   1 : (seq len 2) (:+ (:? (:? (:cat))))
   1 : (seq len 2) (:* (:or (satisfies string?)))
   1 : (seq len 2) (:? (:or))
   1 : (seq len 2) (:* (:? (:? (:cat))))
   1 : (seq len 2) (:+ (:or (satisfies string?)))
   1 : (seq len 2) (:+ (:and (:+ (:cat))))
   1 : (seq len 2) (:* (:and (:+ (:cat))))
   1 : (seq len 1) (:or)
   1 :  :empty-set
    --------------------
66/500: trying (:cat (:cat (:and (:or (:and)) (:cat (:cat))) :epsilon (:? (:* (:or)))) clojure.lang.IMeta (:not (:* (:cat (= 0)))) (:cat (:? (:+ (:and))) (satisfies seq?) (member 1 2 3)))

----------------------------------------
canonicalizing: (:cat (:cat (:and (:or (:and)) (:cat (:cat))) :epsilon (:? (:* (:or)))) clojure.lang.IMeta (:not (:* (:cat (= 0)))) (:cat (:? (:+ (:and))) (satisfies seq?) (member 1 2 3)))
canonicalized: (:cat clojure.lang.IMeta (:not (:* (= 0))) (:* :sigma) clojure.lang.ISeq (= 1))
cp calls= 75   cpo calls= 99  tp calls= 115  pattern (:cat (:cat (:and (:or (:and)) (:cat (:cat))) :epsilon (:? (:* (:or)))) clojure.lang.IMeta (:not (:* (:cat (= 0)))) (:cat (:? (:+ (:and))) (satisfies seq?) (member 1 2 3)))
    cpo arg frequencies:
   26 :  :sigma
   10 : (seq len 2) (= 0)
   9 : (seq len 2) (:* :sigma)
   9 :  :epsilon
   4 : (seq len 2) (= 1)
   4 : (seq len 2) (:* (= 0))
   4 :  clojure.lang.ISeq
   3 : (seq len 2) (:not (:* (= 0)))
   3 :  clojure.lang.IMeta
   2 : (seq len 1) (:and)
   1 : (seq len 7) (:cat :epsilon clojure.lang.IMeta (:not (:* (= 0))) (:* :sigma) clojure.lang.ISeq (= 1))
   1 : (seq len 6) (:cat clojure.lang.IMeta (:not (:* (= 0))) (:* :sigma) clojure.lang.ISeq (= 1))
   1 : (seq len 5) (:cat (:cat (:and (:or (:and)) (:cat (:cat))) :epsilon (:? (:* (:or)))) clojure.lang.IMeta (:not (:* (:cat (= 0)))) (:cat (:? (:+ (:and))) (satisfies seq?) (member 1 2 3)))
   1 : (seq len 4) (:cat (:? (:+ (:and))) (satisfies seq?) (member 1 2 3))
   1 : (seq len 4) (:cat (:* :sigma) clojure.lang.ISeq (= 1))
   1 : (seq len 4) (:cat (:and (:or (:and)) (:cat (:cat))) :epsilon (:? (:* (:or))))
   1 : (seq len 4) (member 1 2 3)
   1 : (seq len 3) (:and (:or (:and)) (:cat (:cat)))
   1 : (seq len 2) (:cat (:* :sigma))
   1 : (seq len 2) (:or :epsilon)
   1 : (seq len 2) (:+ (:and))
   1 : (seq len 2) (:* (:or))
   1 : (seq len 2) (:* (:cat (= 0)))
   1 : (seq len 2) (:not (:* (:cat (= 0))))
   1 : (seq len 2) (:cat (= 0))
   1 : (seq len 2) (:? (:* (:or)))
   1 : (seq len 2) (satisfies seq?)
   1 : (seq len 2) (:cat (:cat))
   1 : (seq len 2) (:* (:and))
   1 : (seq len 2) (:? (:+ (:and)))
   1 : (seq len 2) (:and :epsilon)
   1 : (seq len 2) (:or (:and))
   1 : (seq len 1) (:or)
   1 : (seq len 1) (:cat)
   1 :  :empty-set
    --------------------
67/500: trying :epsilon

----------------------------------------
canonicalizing: :epsilon
canonicalized: :epsilon
cp calls= 1   cpo calls= 1  tp calls= 1  pattern :epsilon
    cpo arg frequencies:
   1 :  :epsilon
    --------------------
68/500: trying (:or (satisfies string?) :sigma :sigma (:? (:not (:* clojure.lang.IMeta))))

----------------------------------------
canonicalizing: (:or (satisfies string?) :sigma :sigma (:? (:not (:* clojure.lang.IMeta))))
canonicalized: (:or (:not (:* clojure.lang.IMeta)) :epsilon :sigma String)
cp calls= 22   cpo calls= 25  tp calls= 27  pattern (:or (satisfies string?) :sigma :sigma (:? (:not (:* clojure.lang.IMeta))))
    cpo arg frequencies:
   6 :  clojure.lang.IMeta
   3 : (seq len 2) (:not (:* clojure.lang.IMeta))
   3 : (seq len 2) (:* clojure.lang.IMeta)
   3 :  :sigma
   3 :  :epsilon
   2 :  String
   1 : (seq len 5) (:or (:not (:* clojure.lang.IMeta)) :epsilon :sigma String)
   1 : (seq len 5) (:or (satisfies string?) :sigma :sigma (:? (:not (:* clojure.lang.IMeta))))
   1 : (seq len 3) (:or (:not (:* clojure.lang.IMeta)) :epsilon)
   1 : (seq len 2) (:? (:not (:* clojure.lang.IMeta)))
   1 : (seq len 2) (satisfies string?)
    --------------------
69/500: trying (:+ (:+ java.lang.Object))

----------------------------------------
canonicalizing: (:+ (:+ java.lang.Object))
canonicalized: (:cat java.lang.Object (:* java.lang.Object) (:* (:cat java.lang.Object (:* java.lang.Object))))
cp calls= 50   cpo calls= 54  tp calls= 57  pattern (:+ (:+ java.lang.Object))
    cpo arg frequencies:
   30 :  java.lang.Object
   10 : (seq len 2) (:* java.lang.Object)
   7 : (seq len 3) (:cat java.lang.Object (:* java.lang.Object))
   2 : (seq len 2) (:+ java.lang.Object)
   2 : (seq len 2) (:* (:cat java.lang.Object (:* java.lang.Object)))
   1 : (seq len 4) (:cat java.lang.Object (:* java.lang.Object) (:* (:cat java.lang.Object (:* java.lang.Object))))
   1 : (seq len 2) (:+ (:+ java.lang.Object))
   1 : (seq len 2) (:* (:+ java.lang.Object))
    --------------------
70/500: trying (:not (:and (:cat (:not (:+ (member 1 a))) :sigma) (:cat (:not (:cat)) :empty-set) :sigma))

----------------------------------------
canonicalizing: (:not (:and (:cat (:not (:+ (member 1 a))) :sigma) (:cat (:not (:cat)) :empty-set) :sigma))
canonicalized: (:* :sigma)
cp calls= 44   cpo calls= 56  tp calls= 58  pattern (:not (:and (:cat (:not (:+ (member 1 a))) :sigma) (:cat (:not (:cat)) :empty-set) :sigma))
    cpo arg frequencies:
   14 : (seq len 2) (= 1)
   11 :  :sigma
   4 : (seq len 2) (:* (= 1))
   4 :  :empty-set
   3 : (seq len 3) (:cat (= 1) (:* (= 1)))
   3 : (seq len 2) (:* :sigma)
   2 : (seq len 3) (member 1 a)
   2 : (seq len 2) (:not (:cat (= 1) (:* (= 1))))
   1 : (seq len 4) (:and (:cat (:not (:+ (member 1 a))) :sigma) (:cat (:not (:cat)) :empty-set) :sigma)
   1 : (seq len 4) (:cat :sigma (:* :sigma) :empty-set)
   1 : (seq len 3) (:cat :sigma (:* :sigma))
   1 : (seq len 3) (:cat (:not (:cat)) :empty-set)
   1 : (seq len 3) (:cat (:not (:cat (= 1) (:* (= 1)))) :sigma)
   1 : (seq len 3) (:cat (:not (:+ (member 1 a))) :sigma)
   1 : (seq len 2) (:* (member 1 a))
   1 : (seq len 2) (:not (:+ (member 1 a)))
   1 : (seq len 2) (:not (:and (:cat (:not (:+ (member 1 a))) :sigma) (:cat (:not (:cat)) :empty-set) :sigma))
   1 : (seq len 2) (:+ (member 1 a))
   1 : (seq len 2) (:not (:cat))
   1 : (seq len 1) (:cat)
   1 :  :epsilon
    --------------------
71/500: trying (:or (:* (:not :sigma)) (satisfies int?) (:and (:not :empty-set) (:or :sigma (:* :sigma)) :epsilon) (:cat :sigma (:? :epsilon) :epsilon))

----------------------------------------
canonicalizing: (:or (:* (:not :sigma)) (satisfies int?) (:and (:not :empty-set) (:or :sigma (:* :sigma)) :epsilon) (:cat :sigma (:? :epsilon) :epsilon))
canonicalized: (:or (:* (:or (:cat :sigma :sigma (:* :sigma)) :epsilon)) :epsilon :sigma Byte Integer Long Short)
cp calls= 109   cpo calls= 122  tp calls= 127  pattern (:or (:* (:not :sigma)) (satisfies int?) (:and (:not :empty-set) (:or :sigma (:* :sigma)) :epsilon) (:cat :sigma (:? :epsilon) :epsilon))
    cpo arg frequencies:
   44 :  :sigma
   16 :  :epsilon
   11 : (seq len 2) (:* :sigma)
   8 : (seq len 4) (:cat :sigma :sigma (:* :sigma))
   8 : (seq len 3) (:or (:cat :sigma :sigma (:* :sigma)) :epsilon)
   4 :  Integer
   4 :  Short
   4 :  Long
   4 :  Byte
   3 : (seq len 2) (:* (:or (:cat :sigma :sigma (:* :sigma)) :epsilon))
   1 : (seq len 8) (:or (:* (:or (:cat :sigma :sigma (:* :sigma)) :epsilon)) Byte Integer Long Short :epsilon :sigma)
   1 : (seq len 8) (:or (:* (:or (:cat :sigma :sigma (:* :sigma)) :epsilon)) :epsilon :sigma Byte Integer Long Short)
   1 : (seq len 5) (:or Byte Integer Long Short)
   1 : (seq len 5) (:or (:* (:not :sigma)) (satisfies int?) (:and (:not :empty-set) (:or :sigma (:* :sigma)) :epsilon) (:cat :sigma (:? :epsilon) :epsilon))
   1 : (seq len 4) (:cat :sigma (:? :epsilon) :epsilon)
   1 : (seq len 4) (:and (:not :empty-set) (:or :sigma (:* :sigma)) :epsilon)
   1 : (seq len 3) (:or :sigma (:* :sigma))
   1 : (seq len 2) (:or :epsilon)
   1 : (seq len 2) (:* (:not :sigma))
   1 : (seq len 2) (:? :epsilon)
   1 : (seq len 2) (:cat :sigma)
   1 : (seq len 2) (:not :empty-set)
   1 : (seq len 2) (:not :sigma)
   1 : (seq len 2) (satisfies int?)
   1 : (seq len 2) (:and :epsilon)
   1 :  :empty-set
    --------------------
72/500: trying (:cat (:not :sigma) (:? (:* (:or (:+ (:cat))))) :sigma (member a b))

----------------------------------------
canonicalizing: (:cat (:not :sigma) (:? (:* (:or (:+ (:cat))))) :sigma (member a b))
canonicalized: (:cat (:or (:cat :sigma :sigma (:* :sigma)) :epsilon) :sigma (= a))
cp calls= 29   cpo calls= 40  tp calls= 47  pattern (:cat (:not :sigma) (:? (:* (:or (:+ (:cat))))) :sigma (member a b))
    cpo arg frequencies:
   11 :  :sigma
   9 :  :epsilon
   3 : (seq len 1) (:cat)
   2 : (seq len 4) (:cat :sigma :sigma (:* :sigma))
   2 : (seq len 3) (:or (:cat :sigma :sigma (:* :sigma)) :epsilon)
   2 : (seq len 2) (:* :sigma)
   2 : (seq len 2) (= a)
   1 : (seq len 5) (:cat (:not :sigma) (:? (:* (:or (:+ (:cat))))) :sigma (member a b))
   1 : (seq len 4) (:cat (:or (:cat :sigma :sigma (:* :sigma)) :epsilon) :sigma (= a))
   1 : (seq len 3) (member a b)
   1 : (seq len 2) (:* (:cat))
   1 : (seq len 2) (:or :epsilon)
   1 : (seq len 2) (:or (:+ (:cat)))
   1 : (seq len 2) (:not :sigma)
   1 : (seq len 2) (:* (:or (:+ (:cat))))
   1 : (seq len 2) (:? (:* (:or (:+ (:cat)))))
    --------------------
73/500: trying (:cat (:cat (:* (:not (:? (member [1 2 3] [2 1 3])))) (:* (:* (:and))) (:not (:cat :sigma))) java.lang.Number :epsilon :epsilon)

----------------------------------------
canonicalizing: (:cat (:cat (:* (:not (:? (member [1 2 3] [2 1 3])))) (:* (:* (:and))) (:not (:cat :sigma))) java.lang.Number :epsilon :epsilon)
canonicalized: (:cat (:* (:and (:cat :sigma (:* :sigma)) (:not (= [1 2 3])))) (:* :sigma) (:or (:cat :sigma :sigma (:* :sigma)) :epsilon) java.lang.Number)
cp calls= 159   cpo calls= 173  tp calls= 176  pattern (:cat (:cat (:* (:not (:? (member [1 2 3] [2 1 3])))) (:* (:* (:and))) (:not (:cat :sigma))) java.lang.Number :epsilon :epsilon)
    cpo arg frequencies:
   64 :  :sigma
   21 : (seq len 2) (:* :sigma)
   13 : (seq len 2) (= [1 2 3])
   11 : (seq len 3) (:cat :sigma (:* :sigma))
   11 : (seq len 2) (:not (= [1 2 3]))
   11 :  :epsilon
   10 : (seq len 3) (:and (:cat :sigma (:* :sigma)) (:not (= [1 2 3])))
   4 : (seq len 4) (:cat :sigma :sigma (:* :sigma))
   4 : (seq len 3) (:or (:cat :sigma :sigma (:* :sigma)) :epsilon)
   4 : (seq len 2) (:* (:and (:cat :sigma (:* :sigma)) (:not (= [1 2 3]))))
   3 :  java.lang.Number
   1 : (seq len 7) (:cat (:* (:and (:cat :sigma (:* :sigma)) (:not (= [1 2 3])))) (:* :sigma) (:or (:cat :sigma :sigma (:* :sigma)) :epsilon) java.lang.Number :epsilon :epsilon)
   1 : (seq len 5) (:cat (:* (:and (:cat :sigma (:* :sigma)) (:not (= [1 2 3])))) (:* :sigma) (:or (:cat :sigma :sigma (:* :sigma)) :epsilon) java.lang.Number)
   1 : (seq len 5) (:cat (:cat (:* (:not (:? (member [1 2 3] [2 1 3])))) (:* (:* (:and))) (:not (:cat :sigma))) java.lang.Number :epsilon :epsilon)
   1 : (seq len 4) (:cat (:* (:not (:? (member [1 2 3] [2 1 3])))) (:* (:* (:and))) (:not (:cat :sigma)))
   1 : (seq len 4) (:cat (:* (:and (:cat :sigma (:* :sigma)) (:not (= [1 2 3])))) (:* :sigma) (:or (:cat :sigma :sigma (:* :sigma)) :epsilon))
   1 : (seq len 3) (:or (= [1 2 3]) :epsilon)
   1 : (seq len 3) (member [1 2 3] [2 1 3])
   1 : (seq len 3) (:and (:not (= [1 2 3])) (:not :epsilon))
   1 : (seq len 2) (:? (member [1 2 3] [2 1 3]))
   1 : (seq len 2) (:not (:? (member [1 2 3] [2 1 3])))
   1 : (seq len 2) (:* (:* (:and)))
   1 : (seq len 2) (:cat :sigma)
   1 : (seq len 2) (:not :epsilon)
   1 : (seq len 2) (:not (:cat :sigma))
   1 : (seq len 2) (:* (:and))
   1 : (seq len 2) (:* (:not (:? (member [1 2 3] [2 1 3]))))
   1 : (seq len 1) (:and)
    --------------------
74/500: trying (:* (:? :empty-set))

----------------------------------------
canonicalizing: (:* (:? :empty-set))
canonicalized: :epsilon
cp calls= 4   cpo calls= 7  tp calls= 9  pattern (:* (:? :empty-set))
    cpo arg frequencies:
   3 :  :epsilon
   1 : (seq len 2) (:* (:? :empty-set))
   1 : (seq len 2) (:? :empty-set)
   1 : (seq len 2) (:or :epsilon)
   1 :  :empty-set
    --------------------
75/500: trying :epsilon

----------------------------------------
canonicalizing: :epsilon
canonicalized: :epsilon
cp calls= 1   cpo calls= 1  tp calls= 1  pattern :epsilon
    cpo arg frequencies:
   1 :  :epsilon
    --------------------
76/500: trying (:? :sigma)

----------------------------------------
canonicalizing: (:? :sigma)
canonicalized: (:or :epsilon :sigma)
cp calls= 5   cpo calls= 6  tp calls= 7  pattern (:? :sigma)
    cpo arg frequencies:
   2 :  :epsilon
   2 :  :sigma
   1 : (seq len 3) (:or :epsilon :sigma)
   1 : (seq len 2) (:? :sigma)
    --------------------
77/500: trying :empty-set

----------------------------------------
canonicalizing: :empty-set
canonicalized: :empty-set
cp calls= 1   cpo calls= 1  tp calls= 1  pattern :empty-set
    cpo arg frequencies:
   1 :  :empty-set
    --------------------
78/500: trying :epsilon

----------------------------------------
canonicalizing: :epsilon
canonicalized: :epsilon
cp calls= 1   cpo calls= 1  tp calls= 1  pattern :epsilon
    cpo arg frequencies:
   1 :  :epsilon
    --------------------
79/500: trying (:cat (:+ (:cat (:* (:* (:cat))) (:? :epsilon))) (:or (:and (:and (:cat)) (:* (:not (:* (:? (:? (:cat))))))) (:* (:? :sigma)) (member 2 3 4)) (:or (:not (:not (:cat))) (:not (:not (:* (:not (:or))))) :sigma) (:cat (:not (:and (:or))) (:or (:or (:+ (:* (:+ :empty-set)))) java.lang.CharSequence) (:+ :sigma)))

----------------------------------------
canonicalizing: (:cat (:+ (:cat (:* (:* (:cat))) (:? :epsilon))) (:or (:and (:and (:cat)) (:* (:not (:* (:? (:? (:cat))))))) (:* (:? :sigma)) (member 2 3 4)) (:or (:not (:not (:cat))) (:not (:not (:* (:not (:or))))) :sigma) (:cat (:not (:and (:or))) (:or (:or (:+ (:* (:+ :empty-set)))) java.lang.CharSequence) (:+ :sigma)))
canonicalized: (:cat (:or (:* (:or :epsilon :sigma)) (:and (:* (:cat :sigma (:* :sigma))) :epsilon) (= 2)) (:* :sigma) (:or :epsilon java.lang.CharSequence) :sigma (:* :sigma))
cp calls= 264   cpo calls= 321  tp calls= 349  pattern (:cat (:+ (:cat (:* (:* (:cat))) (:? :epsilon))) (:or (:and (:and (:cat)) (:* (:not (:* (:? (:? (:cat))))))) (:* (:? :sigma)) (member 2 3 4)) (:or (:not (:not (:cat))) (:not (:not (:* (:not (:or))))) :sigma) (:cat (:not (:and (:or))) (:or (:or (:+ (:* (:+ :empty-set)))) java.lang.CharSequence) (:+ :sigma)))
    cpo arg frequencies:
   100 :  :sigma
   55 :  :epsilon
   32 : (seq len 2) (:* :sigma)
   17 : (seq len 3) (:cat :sigma (:* :sigma))
   12 : (seq len 3) (:or :epsilon :sigma)
   9 :  :empty-set
   8 : (seq len 1) (:cat)
   6 : (seq len 2) (:* (:cat :sigma (:* :sigma)))
   6 :  java.lang.CharSequence
   5 : (seq len 3) (:or :epsilon java.lang.CharSequence)
   5 : (seq len 3) (:and (:* (:cat :sigma (:* :sigma))) :epsilon)
   5 : (seq len 2) (:* (:or :epsilon :sigma))
   5 : (seq len 2) (= 2)
   4 : (seq len 4) (:or (:* (:or :epsilon :sigma)) (:and (:* (:cat :sigma (:* :sigma))) :epsilon) (= 2))
   4 : (seq len 2) (:or :epsilon)
   2 : (seq len 3) (:cat (:* (:* (:cat))) (:? :epsilon))
   2 : (seq len 2) (:* (:cat))
   2 : (seq len 2) (:+ :empty-set)
   2 : (seq len 2) (:? :epsilon)
   2 : (seq len 2) (:* (:+ :empty-set))
   2 : (seq len 2) (:* (:* (:cat)))
   2 : (seq len 2) (:* :empty-set)
   1 : (seq len 8) (:cat :epsilon (:or (:* (:or :epsilon :sigma)) (:and (:* (:cat :sigma (:* :sigma))) :epsilon) (= 2)) (:* :sigma) (:* :sigma) (:or :epsilon java.lang.CharSequence) :sigma (:* :sigma))
   1 : (seq len 7) (:cat :epsilon (:or (:* (:or :epsilon :sigma)) (:and (:* (:cat :sigma (:* :sigma))) :epsilon) (= 2)) (:* :sigma) (:or :epsilon java.lang.CharSequence) :sigma (:* :sigma))
   1 : (seq len 6) (:cat (:or (:* (:or :epsilon :sigma)) (:and (:* (:cat :sigma (:* :sigma))) :epsilon) (= 2)) (:* :sigma) (:or :epsilon java.lang.CharSequence) :sigma (:* :sigma))
   1 : (seq len 5) (:cat (:* :sigma) (:or :epsilon java.lang.CharSequence) :sigma (:* :sigma))
   1 : (seq len 5) (:cat (:+ (:cat (:* (:* (:cat))) (:? :epsilon))) (:or (:and (:and (:cat)) (:* (:not (:* (:? (:? (:cat))))))) (:* (:? :sigma)) (member 2 3 4)) (:or (:not (:not (:cat))) (:not (:not (:* (:not (:or))))) :sigma) (:cat (:not (:and (:or))) (:or (:or (:+ (:* (:+ :empty-set)))) java.lang.CharSequence) (:+ :sigma)))
   1 : (seq len 4) (:cat (:not (:and (:or))) (:or (:or (:+ (:* (:+ :empty-set)))) java.lang.CharSequence) (:+ :sigma))
   1 : (seq len 4) (:or (:not (:not (:cat))) (:not (:not (:* (:not (:or))))) :sigma)
   1 : (seq len 4) (member 2 3 4)
   1 : (seq len 4) (:or (:and (:and (:cat)) (:* (:not (:* (:? (:? (:cat))))))) (:* (:? :sigma)) (member 2 3 4))
   1 : (seq len 3) (:and (:and (:cat)) (:* (:not (:* (:? (:? (:cat)))))))
   1 : (seq len 3) (:or (:or (:+ (:* (:+ :empty-set)))) java.lang.CharSequence)
   1 : (seq len 2) (:not (:not (:* (:not (:or)))))
   1 : (seq len 2) (:* (:? :sigma))
   1 : (seq len 2) (:? (:? (:cat)))
   1 : (seq len 2) (:or (:+ (:* (:+ :empty-set))))
   1 : (seq len 2) (:not (:not (:cat)))
   1 : (seq len 2) (:not (:* (:? (:? (:cat)))))
   1 : (seq len 2) (:* (:? (:? (:cat))))
   1 : (seq len 2) (:not (:cat :sigma (:* :sigma)))
   1 : (seq len 2) (:not (:and (:or)))
   1 : (seq len 2) (:? (:cat))
   1 : (seq len 2) (:and (:cat))
   1 : (seq len 2) (:not (:cat))
   1 : (seq len 2) (:* (:* (:+ :empty-set)))
   1 : (seq len 2) (:+ :sigma)
   1 : (seq len 2) (:* (:not (:* (:? (:? (:cat))))))
   1 : (seq len 2) (:* (:cat (:* (:* (:cat))) (:? :epsilon)))
   1 : (seq len 2) (:not (:* (:not (:or))))
   1 : (seq len 2) (:not (:or))
   1 : (seq len 2) (:* (:not (:or)))
   1 : (seq len 2) (:and (:or))
   1 : (seq len 2) (:+ (:cat (:* (:* (:cat))) (:? :epsilon)))
   1 : (seq len 2) (:? :sigma)
   1 : (seq len 1) (:or)
    --------------------
80/500: trying :epsilon

----------------------------------------
canonicalizing: :epsilon
canonicalized: :epsilon
cp calls= 1   cpo calls= 1  tp calls= 1  pattern :epsilon
    cpo arg frequencies:
   1 :  :epsilon
    --------------------
81/500: trying :empty-set

----------------------------------------
canonicalizing: :empty-set
canonicalized: :empty-set
cp calls= 1   cpo calls= 1  tp calls= 1  pattern :empty-set
    cpo arg frequencies:
   1 :  :empty-set
    --------------------
82/500: trying (:and :epsilon (:* (member [1 2 3] [2 1 3])) (:* (:or :sigma (:or :empty-set))) (:cat :sigma (:cat (:or :epsilon) :empty-set) :epsilon))

----------------------------------------
canonicalizing: (:and :epsilon (:* (member [1 2 3] [2 1 3])) (:* (:or :sigma (:or :empty-set))) (:cat :sigma (:cat (:or :epsilon) :empty-set) :epsilon))
canonicalized: :empty-set
cp calls= 20   cpo calls= 30  tp calls= 33  pattern (:and :epsilon (:* (member [1 2 3] [2 1 3])) (:* (:or :sigma (:or :empty-set))) (:cat :sigma (:cat (:or :epsilon) :empty-set) :epsilon))
    cpo arg frequencies:
   6 :  :sigma
   5 :  :empty-set
   4 : (seq len 2) (= [1 2 3])
   3 :  :epsilon
   1 : (seq len 5) (:and :epsilon (:* (member [1 2 3] [2 1 3])) (:* (:or :sigma (:or :empty-set))) (:cat :sigma (:cat (:or :epsilon) :empty-set) :epsilon))
   1 : (seq len 4) (:cat :sigma (:cat (:or :epsilon) :empty-set) :epsilon)
   1 : (seq len 3) (:cat (:or :epsilon) :empty-set)
   1 : (seq len 3) (:or :sigma (:or :empty-set))
   1 : (seq len 3) (member [1 2 3] [2 1 3])
   1 : (seq len 2) (:* :sigma)
   1 : (seq len 2) (:or :sigma)
   1 : (seq len 2) (:or :epsilon)
   1 : (seq len 2) (:* (:or :sigma (:or :empty-set)))
   1 : (seq len 2) (:* (= [1 2 3]))
   1 : (seq len 2) (:* (member [1 2 3] [2 1 3]))
   1 : (seq len 2) (:or :empty-set)
    --------------------
83/500: trying :empty-set

----------------------------------------
canonicalizing: :empty-set
canonicalized: :empty-set
cp calls= 1   cpo calls= 1  tp calls= 1  pattern :empty-set
    cpo arg frequencies:
   1 :  :empty-set
    --------------------
84/500: trying (:and (:* (:not :empty-set)) (:and :sigma (:and :epsilon :epsilon) java.lang.Comparable) (:or (:+ (:not (:cat))) (:* (:not (:or))) (:not (:cat (= a)))) (:or :epsilon :epsilon :sigma))

----------------------------------------
canonicalizing: (:and (:* (:not :empty-set)) (:and :sigma (:and :epsilon :epsilon) java.lang.Comparable) (:or (:+ (:not (:cat))) (:* (:not (:or))) (:not (:cat (= a)))) (:or :epsilon :epsilon :sigma))
canonicalized: (:and :epsilon :sigma java.lang.Comparable)
cp calls= 117   cpo calls= 142  tp calls= 149  pattern (:and (:* (:not :empty-set)) (:and :sigma (:and :epsilon :epsilon) java.lang.Comparable) (:or (:+ (:not (:cat))) (:* (:not (:or))) (:not (:cat (= a)))) (:or :epsilon :epsilon :sigma))
    cpo arg frequencies:
   51 :  :sigma
   20 :  :epsilon
   14 : (seq len 2) (:* :sigma)
   10 :  java.lang.Comparable
   7 : (seq len 3) (:cat :sigma (:* :sigma))
   4 : (seq len 4) (:and :epsilon :sigma java.lang.Comparable)
   3 : (seq len 3) (:or :epsilon :sigma)
   2 : (seq len 2) (= a)
   2 : (seq len 2) (:* (:cat :sigma (:* :sigma)))
   2 : (seq len 2) (:not (:cat))
   2 : (seq len 1) (:cat)
   2 :  :empty-set
   1 : (seq len 6) (:and (:* :sigma) :epsilon :sigma java.lang.Comparable (:or :epsilon :sigma))
   1 : (seq len 5) (:and (:* (:not :empty-set)) (:and :sigma (:and :epsilon :epsilon) java.lang.Comparable) (:or (:+ (:not (:cat))) (:* (:not (:or))) (:not (:cat (= a)))) (:or :epsilon :epsilon :sigma))
   1 : (seq len 5) (:and (:or :epsilon :sigma) :epsilon :sigma java.lang.Comparable)
   1 : (seq len 5) (:and :epsilon :epsilon :sigma java.lang.Comparable)
   1 : (seq len 5) (:and :sigma :epsilon :sigma java.lang.Comparable)
   1 : (seq len 4) (:or :epsilon :epsilon :sigma)
   1 : (seq len 4) (:cat :sigma (:* :sigma) (:* (:cat :sigma (:* :sigma))))
   1 : (seq len 4) (:or (:+ (:not (:cat))) (:* (:not (:or))) (:not (:cat (= a))))
   1 : (seq len 4) (:and :sigma (:and :epsilon :epsilon) java.lang.Comparable)
   1 : (seq len 3) (:or (:and :epsilon :epsilon :sigma java.lang.Comparable) (:and :sigma :epsilon :sigma java.lang.Comparable))
   1 : (seq len 3) (:and :epsilon :epsilon)
   1 : (seq len 2) (:+ (:not (:cat)))
   1 : (seq len 2) (:* (:not :empty-set))
   1 : (seq len 2) (:cat (= a))
   1 : (seq len 2) (:* (:not (:cat)))
   1 : (seq len 2) (:not :empty-set)
   1 : (seq len 2) (:not (:cat (= a)))
   1 : (seq len 2) (:not (:or))
   1 : (seq len 2) (:* (:not (:or)))
   1 : (seq len 2) (:and :epsilon)
   1 : (seq len 2) (:not (= a))
   1 : (seq len 2) (:or (:and :epsilon :sigma java.lang.Comparable))
   1 : (seq len 1) (:or)
    --------------------
85/500: trying :sigma

----------------------------------------
canonicalizing: :sigma
canonicalized: :sigma
cp calls= 1   cpo calls= 1  tp calls= 1  pattern :sigma
    cpo arg frequencies:
   1 :  :sigma
    --------------------
86/500: trying (:* (:* (:? (:? (:+ :empty-set)))))

----------------------------------------
canonicalizing: (:* (:* (:? (:? (:+ :empty-set)))))
canonicalized: :epsilon
cp calls= 10   cpo calls= 18  tp calls= 23  pattern (:* (:* (:? (:? (:+ :empty-set)))))
    cpo arg frequencies:
   7 :  :epsilon
   3 :  :empty-set
   2 : (seq len 2) (:or :epsilon)
   1 : (seq len 2) (:? (:? (:+ :empty-set)))
   1 : (seq len 2) (:+ :empty-set)
   1 : (seq len 2) (:? (:+ :empty-set))
   1 : (seq len 2) (:* (:? (:? (:+ :empty-set))))
   1 : (seq len 2) (:* (:* (:? (:? (:+ :empty-set)))))
   1 : (seq len 2) (:* :empty-set)
    --------------------
87/500: trying (:not (:not :sigma))

----------------------------------------
canonicalizing: (:not (:not :sigma))
canonicalized: (:and (:cat :sigma (:* :sigma)) (:not (:cat :sigma :sigma (:* :sigma))))
cp calls= 35   cpo calls= 39  tp calls= 39  pattern (:not (:not :sigma))
    cpo arg frequencies:
   19 :  :sigma
   5 : (seq len 2) (:* :sigma)
   3 : (seq len 4) (:cat :sigma :sigma (:* :sigma))
   2 : (seq len 3) (:cat :sigma (:* :sigma))
   2 : (seq len 2) (:not (:cat :sigma :sigma (:* :sigma)))
   2 :  :epsilon
   1 : (seq len 3) (:and (:cat :sigma (:* :sigma)) (:not (:cat :sigma :sigma (:* :sigma))))
   1 : (seq len 3) (:or (:cat :sigma :sigma (:* :sigma)) :epsilon)
   1 : (seq len 3) (:and (:not (:cat :sigma :sigma (:* :sigma))) (:not :epsilon))
   1 : (seq len 2) (:not (:not :sigma))
   1 : (seq len 2) (:not :epsilon)
   1 : (seq len 2) (:not :sigma)
    --------------------
88/500: trying (:* :epsilon)

----------------------------------------
canonicalizing: (:* :epsilon)
canonicalized: :epsilon
cp calls= 2   cpo calls= 3  tp calls= 3  pattern (:* :epsilon)
    cpo arg frequencies:
   2 :  :epsilon
   1 : (seq len 2) (:* :epsilon)
    --------------------
89/500: trying (:? (:? (:not (:cat :sigma))))

----------------------------------------
canonicalizing: (:? (:? (:not (:cat :sigma))))
canonicalized: (:or (:cat :sigma :sigma (:* :sigma)) :epsilon)
cp calls= 43   cpo calls= 49  tp calls= 52  pattern (:? (:? (:not (:cat :sigma))))
    cpo arg frequencies:
   21 :  :sigma
   9 :  :epsilon
   5 : (seq len 4) (:cat :sigma :sigma (:* :sigma))
   5 : (seq len 2) (:* :sigma)
   3 : (seq len 3) (:or (:cat :sigma :sigma (:* :sigma)) :epsilon)
   2 : (seq len 4) (:or (:cat :sigma :sigma (:* :sigma)) :epsilon :epsilon)
   1 : (seq len 2) (:? (:not (:cat :sigma)))
   1 : (seq len 2) (:cat :sigma)
   1 : (seq len 2) (:not (:cat :sigma))
   1 : (seq len 2) (:? (:? (:not (:cat :sigma))))
    --------------------
90/500: trying (:or (:cat (:+ :epsilon) :empty-set (:not java.io.Serializable)) (:cat (:+ (:cat (:cat))) (:or (:+ (:and)) (:? :empty-set)) (:or :epsilon (:or :sigma))) (:? (:and (:and :sigma) :empty-set)) (:? :sigma))

----------------------------------------
canonicalizing: (:or (:cat (:+ :epsilon) :empty-set (:not java.io.Serializable)) (:cat (:+ (:cat (:cat))) (:or (:+ (:and)) (:? :empty-set)) (:or :epsilon (:or :sigma))) (:? (:and (:and :sigma) :empty-set)) (:? :sigma))
canonicalized: (:or (:cat (:* :sigma) (:or :epsilon :sigma)) :epsilon :sigma)
cp calls= 79   cpo calls= 106  tp calls= 125  pattern (:or (:cat (:+ :epsilon) :empty-set (:not java.io.Serializable)) (:cat (:+ (:cat (:cat))) (:or (:+ (:and)) (:? :empty-set)) (:or :epsilon (:or :sigma))) (:? (:and (:and :sigma) :empty-set)) (:? :sigma))
    cpo arg frequencies:
   32 :  :sigma
   22 :  :epsilon
   8 : (seq len 2) (:* :sigma)
   6 :  :empty-set
   5 : (seq len 3) (:or :epsilon :sigma)
   3 : (seq len 3) (:cat (:* :sigma) (:or :epsilon :sigma))
   2 : (seq len 2) (:or :epsilon)
   2 : (seq len 2) (:cat (:cat))
   2 : (seq len 1) (:cat)
   2 : (seq len 1) (:and)
   1 : (seq len 6) (:or (:cat (:* :sigma) (:or :epsilon :sigma)) :epsilon :sigma :empty-set :epsilon)
   1 : (seq len 5) (:or (:cat (:+ :epsilon) :empty-set (:not java.io.Serializable)) (:cat (:+ (:cat (:cat))) (:or (:+ (:and)) (:? :empty-set)) (:or :epsilon (:or :sigma))) (:? (:and (:and :sigma) :empty-set)) (:? :sigma))
   1 : (seq len 4) (:cat (:+ (:cat (:cat))) (:or (:+ (:and)) (:? :empty-set)) (:or :epsilon (:or :sigma)))
   1 : (seq len 4) (:cat (:+ :epsilon) :empty-set (:not java.io.Serializable))
   1 : (seq len 4) (:or (:cat (:* :sigma) (:or :epsilon :sigma)) :epsilon :sigma)
   1 : (seq len 3) (:or :epsilon (:or :sigma))
   1 : (seq len 3) (:and (:and :sigma) :empty-set)
   1 : (seq len 3) (:or (:+ (:and)) (:? :empty-set))
   1 : (seq len 2) (:cat (:* :sigma))
   1 : (seq len 2) (:* :epsilon)
   1 : (seq len 2) (:or :sigma)
   1 : (seq len 2) (:+ :epsilon)
   1 : (seq len 2) (:? (:and (:and :sigma) :empty-set))
   1 : (seq len 2) (:+ (:and))
   1 : (seq len 2) (:? :empty-set)
   1 : (seq len 2) (:+ (:cat (:cat)))
   1 : (seq len 2) (:* (:cat (:cat)))
   1 : (seq len 2) (:not java.io.Serializable)
   1 : (seq len 2) (:* (:and))
   1 : (seq len 2) (:and :sigma)
   1 : (seq len 2) (:? :sigma)
   1 :  java.io.Serializable
    --------------------
91/500: trying (:? :empty-set)

----------------------------------------
canonicalizing: (:? :empty-set)
canonicalized: :epsilon
cp calls= 3   cpo calls= 5  tp calls= 7  pattern (:? :empty-set)
    cpo arg frequencies:
   2 :  :epsilon
   1 : (seq len 2) (:? :empty-set)
   1 : (seq len 2) (:or :epsilon)
   1 :  :empty-set
    --------------------
92/500: trying :sigma

----------------------------------------
canonicalizing: :sigma
canonicalized: :sigma
cp calls= 1   cpo calls= 1  tp calls= 1  pattern :sigma
    cpo arg frequencies:
   1 :  :sigma
    --------------------
93/500: trying (:cat (:not (:cat (:cat :empty-set) :empty-set)) (:cat (:cat :empty-set (:not :epsilon)) (member [1 2 3] [1 2] [1] []) (:* :empty-set)) (member a b) (:or (:* :epsilon) (satisfies keyword?) :sigma))

----------------------------------------
canonicalizing: (:cat (:not (:cat (:cat :empty-set) :empty-set)) (:cat (:cat :empty-set (:not :epsilon)) (member [1 2 3] [1 2] [1] []) (:* :empty-set)) (member a b) (:or (:* :epsilon) (satisfies keyword?) :sigma))
canonicalized: :empty-set
cp calls= 33   cpo calls= 47  tp calls= 49  pattern (:cat (:not (:cat (:cat :empty-set) :empty-set)) (:cat (:cat :empty-set (:not :epsilon)) (member [1 2 3] [1 2] [1] []) (:* :empty-set)) (member a b) (:or (:* :epsilon) (satisfies keyword?) :sigma))
    cpo arg frequencies:
   10 :  :sigma
   9 :  :empty-set
   5 :  :epsilon
   3 : (seq len 2) (:* :sigma)
   2 :  clojure.lang.Keyword
   1 : (seq len 5) (member [1 2 3] [1 2] [1] [])
   1 : (seq len 5) (:cat (:not (:cat (:cat :empty-set) :empty-set)) (:cat (:cat :empty-set (:not :epsilon)) (member [1 2 3] [1 2] [1] []) (:* :empty-set)) (member a b) (:or (:* :epsilon) (satisfies keyword?) :sigma))
   1 : (seq len 4) (:or (:* :epsilon) (satisfies keyword?) :sigma)
   1 : (seq len 4) (:cat (:cat :empty-set (:not :epsilon)) (member [1 2 3] [1 2] [1] []) (:* :empty-set))
   1 : (seq len 4) (:or :epsilon :sigma clojure.lang.Keyword)
   1 : (seq len 4) (:cat :empty-set :sigma (:* :sigma))
   1 : (seq len 3) (:cat :sigma (:* :sigma))
   1 : (seq len 3) (:cat :empty-set (:not :epsilon))
   1 : (seq len 3) (:cat (:cat :empty-set) :empty-set)
   1 : (seq len 3) (member a b)
   1 : (seq len 2) (= [1 2 3])
   1 : (seq len 2) (:* :epsilon)
   1 : (seq len 2) (:not (:cat (:cat :empty-set) :empty-set))
   1 : (seq len 2) (:not :epsilon)
   1 : (seq len 2) (= a)
   1 : (seq len 2) (satisfies keyword?)
   1 : (seq len 2) (:* :empty-set)
   1 : (seq len 2) (:cat :empty-set)
    --------------------
94/500: trying (satisfies float?)

----------------------------------------
canonicalizing: (satisfies float?)
canonicalized: (:or Double Float)
cp calls= 5   cpo calls= 6  tp calls= 7  pattern (satisfies float?)
    cpo arg frequencies:
   2 :  Double
   2 :  Float
   1 : (seq len 3) (:or Double Float)
   1 : (seq len 2) (satisfies float?)
    --------------------
95/500: trying (:cat :sigma :empty-set (:+ :sigma) (:cat (:or (:+ (:? :empty-set)) (satisfies seq?)) :sigma :empty-set))

----------------------------------------
canonicalizing: (:cat :sigma :empty-set (:+ :sigma) (:cat (:or (:+ (:? :empty-set)) (satisfies seq?)) :sigma :empty-set))
canonicalized: :empty-set
cp calls= 34   cpo calls= 47  tp calls= 55  pattern (:cat :sigma :empty-set (:+ :sigma) (:cat (:or (:+ (:? :empty-set)) (satisfies seq?)) :sigma :empty-set))
    cpo arg frequencies:
   12 :  :sigma
   8 :  :empty-set
   7 :  :epsilon
   3 : (seq len 2) (:* :sigma)
   2 : (seq len 2) (:or :epsilon)
   2 : (seq len 2) (:? :empty-set)
   2 :  clojure.lang.ISeq
   1 : (seq len 6) (:cat :sigma :empty-set :sigma (:* :sigma) :empty-set)
   1 : (seq len 5) (:cat :sigma :empty-set (:+ :sigma) (:cat (:or (:+ (:? :empty-set)) (satisfies seq?)) :sigma :empty-set))
   1 : (seq len 4) (:cat (:or (:+ (:? :empty-set)) (satisfies seq?)) :sigma :empty-set)
   1 : (seq len 3) (:cat :sigma (:* :sigma))
   1 : (seq len 3) (:or (:+ (:? :empty-set)) (satisfies seq?))
   1 : (seq len 3) (:or :epsilon clojure.lang.ISeq)
   1 : (seq len 2) (:+ (:? :empty-set))
   1 : (seq len 2) (:* (:? :empty-set))
   1 : (seq len 2) (satisfies seq?)
   1 : (seq len 2) (:+ :sigma)
   1 : (seq len 1) (:cat)
    --------------------
96/500: trying (:* (:cat :epsilon (:* (member a b c)) (:and (:+ (:* (:cat))) :empty-set)))

----------------------------------------
canonicalizing: (:* (:cat :epsilon (:* (member a b c)) (:and (:+ (:* (:cat))) :empty-set)))
canonicalized: :epsilon
cp calls= 16   cpo calls= 28  tp calls= 32  pattern (:* (:cat :epsilon (:* (member a b c)) (:and (:+ (:* (:cat))) :empty-set)))
    cpo arg frequencies:
   8 :  :epsilon
   4 : (seq len 2) (= a)
   3 : (seq len 1) (:cat)
   3 :  :empty-set
   2 : (seq len 2) (:* (:cat))
   1 : (seq len 4) (member a b c)
   1 : (seq len 4) (:cat :epsilon (:* (member a b c)) (:and (:+ (:* (:cat))) :empty-set))
   1 : (seq len 3) (:and (:+ (:* (:cat))) :empty-set)
   1 : (seq len 2) (:* (= a))
   1 : (seq len 2) (:* (member a b c))
   1 : (seq len 2) (:* (:* (:cat)))
   1 : (seq len 2) (:* (:cat :epsilon (:* (member a b c)) (:and (:+ (:* (:cat))) :empty-set)))
   1 : (seq len 2) (:+ (:* (:cat)))
    --------------------
97/500: trying :empty-set

----------------------------------------
canonicalizing: :empty-set
canonicalized: :empty-set
cp calls= 1   cpo calls= 1  tp calls= 1  pattern :empty-set
    cpo arg frequencies:
   1 :  :empty-set
    --------------------
98/500: trying :sigma

----------------------------------------
canonicalizing: :sigma
canonicalized: :sigma
cp calls= 1   cpo calls= 1  tp calls= 1  pattern :sigma
    cpo arg frequencies:
   1 :  :sigma
    --------------------
99/500: trying (:cat (:not :empty-set) (:not (:* (:? (member a b)))) (:* :epsilon) :empty-set)

----------------------------------------
canonicalizing: (:cat (:not :empty-set) (:not (:* (:? (member a b)))) (:* :epsilon) :empty-set)
canonicalized: :empty-set
cp calls= 31   cpo calls= 38  tp calls= 39  pattern (:cat (:not :empty-set) (:not (:* (:? (member a b)))) (:* :epsilon) :empty-set)
    cpo arg frequencies:
   9 :  :epsilon
   7 : (seq len 2) (= a)
   6 : (seq len 3) (:or (= a) :epsilon)
   3 :  :empty-set
   2 : (seq len 2) (:* (:or (= a) :epsilon))
   2 :  :sigma
   1 : (seq len 5) (:cat (:not :empty-set) (:not (:* (:? (member a b)))) (:* :epsilon) :empty-set)
   1 : (seq len 3) (member a b)
   1 : (seq len 2) (:* :sigma)
   1 : (seq len 2) (:* :epsilon)
   1 : (seq len 2) (:not (:* (:or (= a) :epsilon)))
   1 : (seq len 2) (:? (member a b))
   1 : (seq len 2) (:not :empty-set)
   1 : (seq len 2) (:* (:? (member a b)))
   1 : (seq len 2) (:not (:* (:? (member a b))))
    --------------------
100/500: trying (:not :epsilon)

----------------------------------------
canonicalizing: (:not :epsilon)
canonicalized: (:cat :sigma (:* :sigma))
cp calls= 6   cpo calls= 7  tp calls= 7  pattern (:not :epsilon)
    cpo arg frequencies:
   3 :  :sigma
   1 : (seq len 3) (:cat :sigma (:* :sigma))
   1 : (seq len 2) (:not :epsilon)
   1 : (seq len 2) (:* :sigma)
   1 :  :epsilon
    --------------------
101/500: trying (:not (:cat :empty-set (:not (:+ :sigma)) (:* (:cat (:* (:or))))))

----------------------------------------
canonicalizing: (:not (:cat :empty-set (:not (:+ :sigma)) (:* (:cat (:* (:or))))))
canonicalized: (:* :sigma)
cp calls= 23   cpo calls= 30  tp calls= 33  pattern (:not (:cat :empty-set (:not (:+ :sigma)) (:* (:cat (:* (:or))))))
    cpo arg frequencies:
   11 :  :sigma
   4 : (seq len 2) (:* :sigma)
   3 :  :empty-set
   2 : (seq len 3) (:cat :sigma (:* :sigma))
   2 :  :epsilon
   1 : (seq len 4) (:cat :empty-set (:not (:+ :sigma)) (:* (:cat (:* (:or)))))
   1 : (seq len 2) (:not (:+ :sigma))
   1 : (seq len 2) (:not (:cat :empty-set (:not (:+ :sigma)) (:* (:cat (:* (:or))))))
   1 : (seq len 2) (:* (:cat (:* (:or))))
   1 : (seq len 2) (:not (:cat :sigma (:* :sigma)))
   1 : (seq len 2) (:cat (:* (:or)))
   1 : (seq len 2) (:+ :sigma)
   1 : (seq len 1) (:or)
    --------------------
102/500: trying (:cat (:cat (:or (:* (:or)) (satisfies string?)) (:+ (:* :epsilon)) (:and (:? (:+ :empty-set)) (member a b c a b c))) (:* (satisfies keyword?)) :epsilon (:? :sigma))

----------------------------------------
canonicalizing: (:cat (:cat (:or (:* (:or)) (satisfies string?)) (:+ (:* :epsilon)) (:and (:? (:+ :empty-set)) (member a b c a b c))) (:* (satisfies keyword?)) :epsilon (:? :sigma))
canonicalized: (:cat (:or :epsilon String) (:and (= a) :epsilon) (:* clojure.lang.Keyword) (:or :epsilon :sigma))
cp calls= 66   cpo calls= 87  tp calls= 96  pattern (:cat (:cat (:or (:* (:or)) (satisfies string?)) (:+ (:* :epsilon)) (:and (:? (:+ :empty-set)) (member a b c a b c))) (:* (satisfies keyword?)) :epsilon (:? :sigma))
    cpo arg frequencies:
   24 :  :epsilon
   8 :  clojure.lang.Keyword
   5 : (seq len 2) (= a)
   5 :  String
   4 : (seq len 3) (:or :epsilon String)
   4 : (seq len 3) (:and (= a) :epsilon)
   4 :  :sigma
   4 :  :empty-set
   3 : (seq len 3) (:or :epsilon :sigma)
   3 : (seq len 2) (:* clojure.lang.Keyword)
   2 : (seq len 2) (:* :epsilon)
   1 : (seq len 7) (member a b c a b c)
   1 : (seq len 6) (:cat (:or :epsilon String) (:and (= a) :epsilon) (:* clojure.lang.Keyword) :epsilon (:or :epsilon :sigma))
   1 : (seq len 5) (:cat (:cat (:or (:* (:or)) (satisfies string?)) (:+ (:* :epsilon)) (:and (:? (:+ :empty-set)) (member a b c a b c))) (:* (satisfies keyword?)) :epsilon (:? :sigma))
   1 : (seq len 5) (:cat (:or :epsilon String) (:and (= a) :epsilon) (:* clojure.lang.Keyword) (:or :epsilon :sigma))
   1 : (seq len 4) (:cat (:or (:* (:or)) (satisfies string?)) (:+ (:* :epsilon)) (:and (:? (:+ :empty-set)) (member a b c a b c)))
   1 : (seq len 3) (:and (:? (:+ :empty-set)) (member a b c a b c))
   1 : (seq len 3) (:or (:* (:or)) (satisfies string?))
   1 : (seq len 3) (:cat (:or :epsilon String) (:and (= a) :epsilon))
   1 : (seq len 2) (:or :epsilon)
   1 : (seq len 2) (:* (:or))
   1 : (seq len 2) (:+ :empty-set)
   1 : (seq len 2) (satisfies string?)
   1 : (seq len 2) (:* (:* :epsilon))
   1 : (seq len 2) (:? (:+ :empty-set))
   1 : (seq len 2) (:+ (:* :epsilon))
   1 : (seq len 2) (satisfies keyword?)
   1 : (seq len 2) (:* :empty-set)
   1 : (seq len 2) (:* (satisfies keyword?))
   1 : (seq len 2) (:? :sigma)
   1 : (seq len 1) (:or)
   1 : (seq len 1) (:cat)
    --------------------
103/500: trying (:or (:? :sigma) :epsilon (:and (satisfies float?) (:not (:and :empty-set)) (:* (:? (:or)))) java.lang.Number)

----------------------------------------
canonicalizing: (:or (:? :sigma) :epsilon (:and (satisfies float?) (:not (:and :empty-set)) (:* (:? (:or)))) java.lang.Number)
canonicalized: (:or (:and :epsilon Double) (:and :epsilon Float) :epsilon :sigma java.lang.Number)
cp calls= 61   cpo calls= 76  tp calls= 82  pattern (:or (:? :sigma) :epsilon (:and (satisfies float?) (:not (:and :empty-set)) (:* (:? (:or)))) java.lang.Number)
    cpo arg frequencies:
   20 :  :epsilon
   8 :  Double
   8 :  Float
   6 :  :sigma
   4 : (seq len 3) (:and :epsilon Double)
   4 : (seq len 3) (:and :epsilon Float)
   3 :  java.lang.Number
   2 : (seq len 3) (:or Double Float)
   2 :  :empty-set
   1 : (seq len 7) (:or (:and :epsilon Double) (:and :epsilon Float) :epsilon :sigma :epsilon java.lang.Number)
   1 : (seq len 6) (:or (:and :epsilon Double) (:and :epsilon Float) :epsilon :sigma java.lang.Number)
   1 : (seq len 5) (:or (:? :sigma) :epsilon (:and (satisfies float?) (:not (:and :empty-set)) (:* (:? (:or)))) java.lang.Number)
   1 : (seq len 4) (:and (satisfies float?) (:not (:and :empty-set)) (:* (:? (:or))))
   1 : (seq len 3) (:and Double :epsilon)
   1 : (seq len 3) (:or (:and Double :epsilon) (:and Float :epsilon))
   1 : (seq len 3) (:and (:or Double Float) :epsilon)
   1 : (seq len 3) (:and Float :epsilon)
   1 : (seq len 3) (:or (:and :epsilon Double) (:and :epsilon Float))
   1 : (seq len 3) (:or :epsilon :sigma)
   1 : (seq len 2) (:and :empty-set)
   1 : (seq len 2) (:* :sigma)
   1 : (seq len 2) (:or :epsilon)
   1 : (seq len 2) (:? (:or))
   1 : (seq len 2) (:not (:and :empty-set))
   1 : (seq len 2) (satisfies float?)
   1 : (seq len 2) (:* (:? (:or)))
   1 : (seq len 2) (:? :sigma)
   1 : (seq len 1) (:or)
    --------------------
104/500: trying :epsilon

----------------------------------------
canonicalizing: :epsilon
canonicalized: :epsilon
cp calls= 1   cpo calls= 1  tp calls= 1  pattern :epsilon
    cpo arg frequencies:
   1 :  :epsilon
    --------------------
105/500: trying (:cat (:cat (:? (:+ (satisfies integer?))) :epsilon (member a b)) (:* (:or (:* (:and)) (:+ (:or)))) (:+ (satisfies rational?)) (:+ :epsilon))

----------------------------------------
canonicalizing: (:cat (:cat (:? (:+ (satisfies integer?))) :epsilon (member a b)) (:* (:or (:* (:and)) (:+ (:or)))) (:+ (satisfies rational?)) (:+ :epsilon))
canonicalized: (:cat (:* (:or BigInteger Byte Integer Long Short clojure.lang.BigInt)) (= a) (:* :sigma) (:or BigDecimal BigInteger Byte Integer Long Short clojure.lang.BigInt clojure.lang.Ratio) (:* (:or BigDecimal BigInteger Byte Integer Long Short clojure.lang.BigInt clojure.lang.Ratio)))
cp calls= 359   cpo calls= 388  tp calls= 402  pattern (:cat (:cat (:? (:+ (satisfies integer?))) :epsilon (member a b)) (:* (:or (:* (:and)) (:+ (:or)))) (:+ (satisfies rational?)) (:+ :epsilon))
    cpo arg frequencies:
   40 :  BigInteger
   40 :  Integer
   40 :  Short
   40 :  clojure.lang.BigInt
   40 :  Long
   40 :  Byte
   20 : (seq len 7) (:or BigInteger Byte Integer Long Short clojure.lang.BigInt)
   18 :  clojure.lang.Ratio
   18 :  BigDecimal
   14 : (seq len 9) (:or BigDecimal BigInteger Byte Integer Long Short clojure.lang.BigInt clojure.lang.Ratio)
   14 :  :sigma
   8 :  :epsilon
   6 : (seq len 2) (:* :sigma)
   6 : (seq len 2) (:* (:or BigInteger Byte Integer Long Short clojure.lang.BigInt))
   4 : (seq len 2) (:* (:or BigDecimal BigInteger Byte Integer Long Short clojure.lang.BigInt clojure.lang.Ratio))
   4 : (seq len 2) (= a)
   3 :  :empty-set
   2 : (seq len 9) (:or BigInteger Byte Integer Long Short clojure.lang.BigInt BigDecimal clojure.lang.Ratio)
   2 : (seq len 7) (or Integer Long clojure.lang.BigInt BigInteger Short Byte)
   2 : (seq len 2) (satisfies integer?)
   2 : (seq len 2) (satisfies rational?)
   2 : (seq len 1) (:or)
   1 : (seq len 7) (:cat (:* (:or BigInteger Byte Integer Long Short clojure.lang.BigInt)) (= a) (:* :sigma) (:or BigDecimal BigInteger Byte Integer Long Short clojure.lang.BigInt clojure.lang.Ratio) (:* (:or BigDecimal BigInteger Byte Integer Long Short clojure.lang.BigInt clojure.lang.Ratio)) :epsilon)
   1 : (seq len 6) (:cat (:* (:or BigInteger Byte Integer Long Short clojure.lang.BigInt)) (= a) (:* :sigma) (:or BigDecimal BigInteger Byte Integer Long Short clojure.lang.BigInt clojure.lang.Ratio) (:* (:or BigDecimal BigInteger Byte Integer Long Short clojure.lang.BigInt clojure.lang.Ratio)))
   1 : (seq len 5) (:cat (:cat (:? (:+ (satisfies integer?))) :epsilon (member a b)) (:* (:or (:* (:and)) (:+ (:or)))) (:+ (satisfies rational?)) (:+ :epsilon))
   1 : (seq len 4) (:cat (:? (:+ (satisfies integer?))) :epsilon (member a b))
   1 : (seq len 3) (:or (:* (:and)) (:+ (:or)))
   1 : (seq len 3) (:cat (:or BigDecimal BigInteger Byte Integer Long Short clojure.lang.BigInt clojure.lang.Ratio) (:* (:or BigDecimal BigInteger Byte Integer Long Short clojure.lang.BigInt clojure.lang.Ratio)))
   1 : (seq len 3) (:cat (:* (:or BigInteger Byte Integer Long Short clojure.lang.BigInt)) (= a))
   1 : (seq len 3) (:cat (:or BigInteger Byte Integer Long Short clojure.lang.BigInt) (:* (:or BigInteger Byte Integer Long Short clojure.lang.BigInt)))
   1 : (seq len 3) (member a b)
   1 : (seq len 2) (:+ (satisfies rational?))
   1 : (seq len 2) (:? (:+ (satisfies integer?)))
   1 : (seq len 2) (:* :epsilon)
   1 : (seq len 2) (:+ :epsilon)
   1 : (seq len 2) (:* (:or (:* (:and)) (:+ (:or))))
   1 : (seq len 2) (:* (:or))
   1 : (seq len 2) (:* (satisfies integer?))
   1 : (seq len 2) (:+ (satisfies integer?))
   1 : (seq len 2) (:* (satisfies rational?))
   1 : (seq len 2) (:+ (:or))
   1 : (seq len 2) (:* (:and))
   1 : (seq len 2) (:or (:* (:or BigInteger Byte Integer Long Short clojure.lang.BigInt)))
   1 : (seq len 1) (:cat)
   1 : (seq len 1) (:and)
    --------------------
106/500: trying (:or (satisfies ratio?) (:? (:cat (:not :empty-set) (:or (:not (:cat))))) :epsilon :sigma)

----------------------------------------
canonicalizing: (:or (satisfies ratio?) (:? (:cat (:not :empty-set) (:or (:not (:cat))))) :epsilon :sigma)
canonicalized: (:or (:cat (:* :sigma) :sigma (:* :sigma)) :epsilon :sigma clojure.lang.Ratio)
cp calls= 56   cpo calls= 64  tp calls= 68  pattern (:or (satisfies ratio?) (:? (:cat (:not :empty-set) (:or (:not (:cat))))) :epsilon :sigma)
    cpo arg frequencies:
   28 :  :sigma
   10 : (seq len 2) (:* :sigma)
   7 :  :epsilon
   4 : (seq len 4) (:cat (:* :sigma) :sigma (:* :sigma))
   3 :  clojure.lang.Ratio
   1 : (seq len 6) (:or (:cat (:* :sigma) :sigma (:* :sigma)) :epsilon :epsilon :sigma clojure.lang.Ratio)
   1 : (seq len 5) (:or (satisfies ratio?) (:? (:cat (:not :empty-set) (:or (:not (:cat))))) :epsilon :sigma)
   1 : (seq len 5) (:or (:cat (:* :sigma) :sigma (:* :sigma)) :epsilon :sigma clojure.lang.Ratio)
   1 : (seq len 3) (:cat :sigma (:* :sigma))
   1 : (seq len 3) (:cat (:not :empty-set) (:or (:not (:cat))))
   1 : (seq len 3) (:or (:cat (:* :sigma) :sigma (:* :sigma)) :epsilon)
   1 : (seq len 2) (:or (:not (:cat)))
   1 : (seq len 2) (satisfies ratio?)
   1 : (seq len 2) (:not :empty-set)
   1 : (seq len 2) (:? (:cat (:not :empty-set) (:or (:not (:cat)))))
   1 : (seq len 1) (:cat)
   1 :  :empty-set
    --------------------
107/500: trying (:not (:+ (:+ (:or (satisfies rational?)))))

----------------------------------------
canonicalizing: (:not (:+ (:+ (:or (satisfies rational?)))))
canonicalized: (:not (:cat (:or BigDecimal BigInteger Byte Integer Long Short clojure.lang.BigInt clojure.lang.Ratio) (:* (:or BigDecimal BigInteger Byte Integer Long Short clojure.lang.BigInt clojure.lang.Ratio)) (:* (:cat (:or BigDecimal BigInteger Byte Integer Long Short clojure.lang.BigInt clojure.lang.Ratio) (:* (:or BigDecimal BigInteger Byte Integer Long Short clojure.lang.BigInt clojure.lang.Ratio))))))
cp calls= 507   cpo calls= 526  tp calls= 537  pattern (:not (:+ (:+ (:or (satisfies rational?)))))
    cpo arg frequencies:
   55 :  BigInteger
   55 :  Integer
   55 :  Short
   55 :  clojure.lang.BigInt
   55 :  Long
   55 :  Byte
   51 :  clojure.lang.Ratio
   51 :  BigDecimal
   43 : (seq len 9) (:or BigDecimal BigInteger Byte Integer Long Short clojure.lang.BigInt clojure.lang.Ratio)
   13 : (seq len 2) (:* (:or BigDecimal BigInteger Byte Integer Long Short clojure.lang.BigInt clojure.lang.Ratio))
   9 : (seq len 3) (:cat (:or BigDecimal BigInteger Byte Integer Long Short clojure.lang.BigInt clojure.lang.Ratio) (:* (:or BigDecimal BigInteger Byte Integer Long Short clojure.lang.BigInt clojure.lang.Ratio)))
   4 : (seq len 9) (:or BigInteger Byte Integer Long Short clojure.lang.BigInt BigDecimal clojure.lang.Ratio)
   4 : (seq len 7) (:or BigInteger Byte Integer Long Short clojure.lang.BigInt)
   4 : (seq len 7) (or Integer Long clojure.lang.BigInt BigInteger Short Byte)
   4 : (seq len 2) (:or (satisfies rational?))
   3 : (seq len 2) (:* (:cat (:or BigDecimal BigInteger Byte Integer Long Short clojure.lang.BigInt clojure.lang.Ratio) (:* (:or BigDecimal BigInteger Byte Integer Long Short clojure.lang.BigInt clojure.lang.Ratio))))
   2 : (seq len 4) (:cat (:or BigDecimal BigInteger Byte Integer Long Short clojure.lang.BigInt clojure.lang.Ratio) (:* (:or BigDecimal BigInteger Byte Integer Long Short clojure.lang.BigInt clojure.lang.Ratio)) (:* (:cat (:or BigDecimal BigInteger Byte Integer Long Short clojure.lang.BigInt clojure.lang.Ratio) (:* (:or BigDecimal BigInteger Byte Integer Long Short clojure.lang.BigInt clojure.lang.Ratio)))))
   2 : (seq len 2) (:+ (:or (satisfies rational?)))
   2 : (seq len 2) (:* (:or (satisfies rational?)))
   1 : (seq len 2) (:+ (:+ (:or (satisfies rational?))))
   1 : (seq len 2) (:not (:cat (:or BigDecimal BigInteger Byte Integer Long Short clojure.lang.BigInt clojure.lang.Ratio) (:* (:or BigDecimal BigInteger Byte Integer Long Short clojure.lang.BigInt clojure.lang.Ratio)) (:* (:cat (:or BigDecimal BigInteger Byte Integer Long Short clojure.lang.BigInt clojure.lang.Ratio) (:* (:or BigDecimal BigInteger Byte Integer Long Short clojure.lang.BigInt clojure.lang.Ratio))))))
   1 : (seq len 2) (:* (:+ (:or (satisfies rational?))))
   1 : (seq len 2) (:not (:+ (:+ (:or (satisfies rational?)))))
    --------------------
108/500: trying (:+ :empty-set)

----------------------------------------
canonicalizing: (:+ :empty-set)
canonicalized: :empty-set
cp calls= 4   cpo calls= 6  tp calls= 7  pattern (:+ :empty-set)
    cpo arg frequencies:
   3 :  :empty-set
   1 : (seq len 2) (:+ :empty-set)
   1 : (seq len 2) (:* :empty-set)
   1 :  :epsilon
    --------------------
109/500: trying (:* (:? (:+ (:? (:? :sigma)))))

----------------------------------------
canonicalizing: (:* (:? (:+ (:? (:? :sigma)))))
canonicalized: (:* (:or :epsilon :sigma))
cp calls= 66   cpo calls= 77  tp calls= 84  pattern (:* (:? (:+ (:? (:? :sigma)))))
    cpo arg frequencies:
   25 :  :epsilon
   20 :  :sigma
   16 : (seq len 3) (:or :epsilon :sigma)
   4 : (seq len 2) (:* (:or :epsilon :sigma))
   2 : (seq len 4) (:or :epsilon :sigma :epsilon)
   2 : (seq len 2) (:? (:? :sigma))
   2 : (seq len 2) (:? :sigma)
   1 : (seq len 3) (:cat (:or :epsilon :sigma) (:* (:or :epsilon :sigma)))
   1 : (seq len 2) (:? (:+ (:? (:? :sigma))))
   1 : (seq len 2) (:* (:? (:+ (:? (:? :sigma)))))
   1 : (seq len 2) (:or (:* (:or :epsilon :sigma)))
   1 : (seq len 2) (:+ (:? (:? :sigma)))
   1 : (seq len 2) (:* (:? (:? :sigma)))
    --------------------
110/500: trying :empty-set

----------------------------------------
canonicalizing: :empty-set
canonicalized: :empty-set
cp calls= 1   cpo calls= 1  tp calls= 1  pattern :empty-set
    cpo arg frequencies:
   1 :  :empty-set
    --------------------
111/500: trying (:cat :epsilon (:? :empty-set) :epsilon (:? (:* (= [1 2 3]))))

----------------------------------------
canonicalizing: (:cat :epsilon (:? :empty-set) :epsilon (:? (:* (= [1 2 3]))))
canonicalized: (:or (:* (= [1 2 3])) :epsilon)
cp calls= 23   cpo calls= 28  tp calls= 32  pattern (:cat :epsilon (:? :empty-set) :epsilon (:? (:* (= [1 2 3]))))
    cpo arg frequencies:
   8 : (seq len 2) (= [1 2 3])
   8 :  :epsilon
   4 : (seq len 2) (:* (= [1 2 3]))
   2 : (seq len 3) (:or (:* (= [1 2 3])) :epsilon)
   1 : (seq len 5) (:cat :epsilon (:? :empty-set) :epsilon (:? (:* (= [1 2 3]))))
   1 : (seq len 2) (:or :epsilon)
   1 : (seq len 2) (:? :empty-set)
   1 : (seq len 2) (:cat (:or (:* (= [1 2 3])) :epsilon))
   1 : (seq len 2) (:? (:* (= [1 2 3])))
   1 :  :empty-set
    --------------------
112/500: trying :sigma

----------------------------------------
canonicalizing: :sigma
canonicalized: :sigma
cp calls= 1   cpo calls= 1  tp calls= 1  pattern :sigma
    cpo arg frequencies:
   1 :  :sigma
    --------------------
113/500: trying (:cat :epsilon (:not (:and :empty-set (:cat :epsilon))) (:or clojure.lang.IMeta :empty-set (:* (:or (:and)))) (:and :sigma (:+ :sigma) (:cat (:+ (:cat)) :sigma)))

----------------------------------------
canonicalizing: (:cat :epsilon (:not (:and :empty-set (:cat :epsilon))) (:or clojure.lang.IMeta :empty-set (:* (:or (:and)))) (:and :sigma (:+ :sigma) (:cat (:+ (:cat)) :sigma)))
cp calls= 99973   cpo calls= 100000  tp calls= 100009  pattern (:* :sigma)
    cpo arg frequencies:
   59974 :  :sigma
   19995 : (seq len 2) (:* :sigma)
   9990 : (seq len 3) (:cat :sigma (:* :sigma))
   9989 : (seq len 3) (:and (:cat :sigma (:* :sigma)) :sigma)
   19 :  :epsilon
   3 : (seq len 1) (:cat)
   3 :  :empty-set
   1 : (seq len 16387) (:cat :epsilon (:* :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) ...)
   1 : (seq len 8195) (:cat :epsilon (:* :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) ...)
   1 : (seq len 4099) (:cat :epsilon (:* :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) ...)
   1 : (seq len 2051) (:cat :epsilon (:* :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) ...)
   1 : (seq len 1027) (:cat :epsilon (:* :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) ...)
   1 : (seq len 515) (:cat :epsilon (:* :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) ...)
   1 : (seq len 259) (:cat :epsilon (:* :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) ...)
   1 : (seq len 131) (:cat :epsilon (:* :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) ...)
   1 : (seq len 67) (:cat :epsilon (:* :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) ...)
   1 : (seq len 35) (:cat :epsilon (:* :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma))
   1 : (seq len 19) (:cat :epsilon (:* :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma))
   1 : (seq len 11) (:cat :epsilon (:* :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma))
   1 : (seq len 7) (:cat :epsilon (:* :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma))
   1 : (seq len 5) (:cat :epsilon (:not (:and :empty-set (:cat :epsilon))) (:or clojure.lang.IMeta :empty-set (:* (:or (:and)))) (:and :sigma (:+ :sigma) (:cat (:+ (:cat)) :sigma)))
   1 : (seq len 4) (:or clojure.lang.IMeta :empty-set (:* (:or (:and))))
   1 : (seq len 4) (:and :sigma (:+ :sigma) (:cat (:+ (:cat)) :sigma))
   1 : (seq len 3) (:and :empty-set (:cat :epsilon))
   1 : (seq len 3) (:cat (:+ (:cat)) :sigma)
   1 : (seq len 2) (:* (:cat))
   1 : (seq len 2) (:cat :sigma)
   1 : (seq len 2) (:+ (:cat))
   1 : (seq len 2) (:* (:or (:and)))
   1 : (seq len 2) (:+ :sigma)
   1 : (seq len 2) (:or (:and))
   1 : (seq len 2) (:not (:and :empty-set (:cat :epsilon)))
   1 : (seq len 2) (:cat :epsilon)
   1 :  clojure.lang.IMeta
    --------------------
cp calls= 199972   cpo calls= 200000  tp calls= 200009  pattern :sigma
    cpo arg frequencies:
   119973 :  :sigma
   39996 : (seq len 2) (:* :sigma)
   19989 : (seq len 3) (:cat :sigma (:* :sigma))
   19988 : (seq len 3) (:and (:cat :sigma (:* :sigma)) :sigma)
   20 :  :epsilon
   3 : (seq len 1) (:cat)
   3 :  :empty-set
   1 : (seq len 32771) (:cat :epsilon (:* :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) ...)
   1 : (seq len 16387) (:cat :epsilon (:* :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) ...)
   1 : (seq len 8195) (:cat :epsilon (:* :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) ...)
   1 : (seq len 4099) (:cat :epsilon (:* :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) ...)
   1 : (seq len 2051) (:cat :epsilon (:* :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) ...)
   1 : (seq len 1027) (:cat :epsilon (:* :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) ...)
   1 : (seq len 515) (:cat :epsilon (:* :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) ...)
   1 : (seq len 259) (:cat :epsilon (:* :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) ...)
   1 : (seq len 131) (:cat :epsilon (:* :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) ...)
   1 : (seq len 67) (:cat :epsilon (:* :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) ...)
   1 : (seq len 35) (:cat :epsilon (:* :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma))
   1 : (seq len 19) (:cat :epsilon (:* :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma))
   1 : (seq len 11) (:cat :epsilon (:* :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma))
   1 : (seq len 7) (:cat :epsilon (:* :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma))
   1 : (seq len 5) (:cat :epsilon (:not (:and :empty-set (:cat :epsilon))) (:or clojure.lang.IMeta :empty-set (:* (:or (:and)))) (:and :sigma (:+ :sigma) (:cat (:+ (:cat)) :sigma)))
   1 : (seq len 4) (:or clojure.lang.IMeta :empty-set (:* (:or (:and))))
   1 : (seq len 4) (:and :sigma (:+ :sigma) (:cat (:+ (:cat)) :sigma))
   1 : (seq len 3) (:and :empty-set (:cat :epsilon))
   1 : (seq len 3) (:cat (:+ (:cat)) :sigma)
   1 : (seq len 2) (:* (:cat))
   1 : (seq len 2) (:cat :sigma)
   1 : (seq len 2) (:+ (:cat))
   1 : (seq len 2) (:* (:or (:and)))
   1 : (seq len 2) (:+ :sigma)
   1 : (seq len 2) (:or (:and))
   1 : (seq len 2) (:not (:and :empty-set (:cat :epsilon)))
   1 : (seq len 2) (:cat :epsilon)
   1 :  clojure.lang.IMeta
    --------------------
cp calls= 299972   cpo calls= 300000  tp calls= 300009  pattern :sigma
    cpo arg frequencies:
   179973 :  :sigma
   59996 : (seq len 2) (:* :sigma)
   29989 : (seq len 3) (:cat :sigma (:* :sigma))
   29988 : (seq len 3) (:and (:cat :sigma (:* :sigma)) :sigma)
   20 :  :epsilon
   3 : (seq len 1) (:cat)
   3 :  :empty-set
   1 : (seq len 32771) (:cat :epsilon (:* :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) ...)
   1 : (seq len 16387) (:cat :epsilon (:* :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) ...)
   1 : (seq len 8195) (:cat :epsilon (:* :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) ...)
   1 : (seq len 4099) (:cat :epsilon (:* :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) ...)
   1 : (seq len 2051) (:cat :epsilon (:* :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) ...)
   1 : (seq len 1027) (:cat :epsilon (:* :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) ...)
   1 : (seq len 515) (:cat :epsilon (:* :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) ...)
   1 : (seq len 259) (:cat :epsilon (:* :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) ...)
   1 : (seq len 131) (:cat :epsilon (:* :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) ...)
   1 : (seq len 67) (:cat :epsilon (:* :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) ...)
   1 : (seq len 35) (:cat :epsilon (:* :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma))
   1 : (seq len 19) (:cat :epsilon (:* :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma))
   1 : (seq len 11) (:cat :epsilon (:* :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma))
   1 : (seq len 7) (:cat :epsilon (:* :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma))
   1 : (seq len 5) (:cat :epsilon (:not (:and :empty-set (:cat :epsilon))) (:or clojure.lang.IMeta :empty-set (:* (:or (:and)))) (:and :sigma (:+ :sigma) (:cat (:+ (:cat)) :sigma)))
   1 : (seq len 4) (:or clojure.lang.IMeta :empty-set (:* (:or (:and))))
   1 : (seq len 4) (:and :sigma (:+ :sigma) (:cat (:+ (:cat)) :sigma))
   1 : (seq len 3) (:and :empty-set (:cat :epsilon))
   1 : (seq len 3) (:cat (:+ (:cat)) :sigma)
   1 : (seq len 2) (:* (:cat))
   1 : (seq len 2) (:cat :sigma)
   1 : (seq len 2) (:+ (:cat))
   1 : (seq len 2) (:* (:or (:and)))
   1 : (seq len 2) (:+ :sigma)
   1 : (seq len 2) (:or (:and))
   1 : (seq len 2) (:not (:and :empty-set (:cat :epsilon)))
   1 : (seq len 2) (:cat :epsilon)
   1 :  clojure.lang.IMeta
    --------------------
cp calls= 399971   cpo calls= 400000  tp calls= 400009  pattern (:* :sigma)
    cpo arg frequencies:
   239972 :  :sigma
   79995 : (seq len 2) (:* :sigma)
   39989 : (seq len 3) (:cat :sigma (:* :sigma))
   39988 : (seq len 3) (:and (:cat :sigma (:* :sigma)) :sigma)
   21 :  :epsilon
   3 : (seq len 1) (:cat)
   3 :  :empty-set
   1 : (seq len 65539) (:cat :epsilon (:* :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) ...)
   1 : (seq len 32771) (:cat :epsilon (:* :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) ...)
   1 : (seq len 16387) (:cat :epsilon (:* :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) ...)
   1 : (seq len 8195) (:cat :epsilon (:* :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) ...)
   1 : (seq len 4099) (:cat :epsilon (:* :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) ...)
   1 : (seq len 2051) (:cat :epsilon (:* :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) ...)
   1 : (seq len 1027) (:cat :epsilon (:* :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) ...)
   1 : (seq len 515) (:cat :epsilon (:* :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) ...)
   1 : (seq len 259) (:cat :epsilon (:* :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) ...)
   1 : (seq len 131) (:cat :epsilon (:* :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) ...)
   1 : (seq len 67) (:cat :epsilon (:* :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) ...)
   1 : (seq len 35) (:cat :epsilon (:* :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma))
   1 : (seq len 19) (:cat :epsilon (:* :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma))
   1 : (seq len 11) (:cat :epsilon (:* :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma))
   1 : (seq len 7) (:cat :epsilon (:* :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma))
   1 : (seq len 5) (:cat :epsilon (:not (:and :empty-set (:cat :epsilon))) (:or clojure.lang.IMeta :empty-set (:* (:or (:and)))) (:and :sigma (:+ :sigma) (:cat (:+ (:cat)) :sigma)))
   1 : (seq len 4) (:or clojure.lang.IMeta :empty-set (:* (:or (:and))))
   1 : (seq len 4) (:and :sigma (:+ :sigma) (:cat (:+ (:cat)) :sigma))
   1 : (seq len 3) (:and :empty-set (:cat :epsilon))
   1 : (seq len 3) (:cat (:+ (:cat)) :sigma)
   1 : (seq len 2) (:* (:cat))
   1 : (seq len 2) (:cat :sigma)
   1 : (seq len 2) (:+ (:cat))
   1 : (seq len 2) (:* (:or (:and)))
   1 : (seq len 2) (:+ :sigma)
   1 : (seq len 2) (:or (:and))
   1 : (seq len 2) (:not (:and :empty-set (:cat :epsilon)))
   1 : (seq len 2) (:cat :epsilon)
   1 :  clojure.lang.IMeta
    --------------------
cp calls= 499971   cpo calls= 500000  tp calls= 500009  pattern (:* :sigma)
    cpo arg frequencies:
   299972 :  :sigma
   99995 : (seq len 2) (:* :sigma)
   49989 : (seq len 3) (:cat :sigma (:* :sigma))
   49988 : (seq len 3) (:and (:cat :sigma (:* :sigma)) :sigma)
   21 :  :epsilon
   3 : (seq len 1) (:cat)
   3 :  :empty-set
   1 : (seq len 65539) (:cat :epsilon (:* :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) ...)
   1 : (seq len 32771) (:cat :epsilon (:* :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) ...)
   1 : (seq len 16387) (:cat :epsilon (:* :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) ...)
   1 : (seq len 8195) (:cat :epsilon (:* :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) ...)
   1 : (seq len 4099) (:cat :epsilon (:* :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) ...)
   1 : (seq len 2051) (:cat :epsilon (:* :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) ...)
   1 : (seq len 1027) (:cat :epsilon (:* :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) ...)
   1 : (seq len 515) (:cat :epsilon (:* :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) ...)
   1 : (seq len 259) (:cat :epsilon (:* :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) ...)
   1 : (seq len 131) (:cat :epsilon (:* :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) ...)
   1 : (seq len 67) (:cat :epsilon (:* :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) ...)
   1 : (seq len 35) (:cat :epsilon (:* :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma))
   1 : (seq len 19) (:cat :epsilon (:* :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma))
   1 : (seq len 11) (:cat :epsilon (:* :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma))
   1 : (seq len 7) (:cat :epsilon (:* :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma))
   1 : (seq len 5) (:cat :epsilon (:not (:and :empty-set (:cat :epsilon))) (:or clojure.lang.IMeta :empty-set (:* (:or (:and)))) (:and :sigma (:+ :sigma) (:cat (:+ (:cat)) :sigma)))
   1 : (seq len 4) (:or clojure.lang.IMeta :empty-set (:* (:or (:and))))
   1 : (seq len 4) (:and :sigma (:+ :sigma) (:cat (:+ (:cat)) :sigma))
   1 : (seq len 3) (:and :empty-set (:cat :epsilon))
   1 : (seq len 3) (:cat (:+ (:cat)) :sigma)
   1 : (seq len 2) (:* (:cat))
   1 : (seq len 2) (:cat :sigma)
   1 : (seq len 2) (:+ (:cat))
   1 : (seq len 2) (:* (:or (:and)))
   1 : (seq len 2) (:+ :sigma)
   1 : (seq len 2) (:or (:and))
   1 : (seq len 2) (:not (:and :empty-set (:cat :epsilon)))
   1 : (seq len 2) (:cat :epsilon)
   1 :  clojure.lang.IMeta
    --------------------
cp calls= 599971   cpo calls= 600000  tp calls= 600009  pattern (:* :sigma)
    cpo arg frequencies:
   359972 :  :sigma
   119995 : (seq len 2) (:* :sigma)
   59989 : (seq len 3) (:cat :sigma (:* :sigma))
   59988 : (seq len 3) (:and (:cat :sigma (:* :sigma)) :sigma)
   21 :  :epsilon
   3 : (seq len 1) (:cat)
   3 :  :empty-set
   1 : (seq len 65539) (:cat :epsilon (:* :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) ...)
   1 : (seq len 32771) (:cat :epsilon (:* :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) ...)
   1 : (seq len 16387) (:cat :epsilon (:* :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) ...)
   1 : (seq len 8195) (:cat :epsilon (:* :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) ...)
   1 : (seq len 4099) (:cat :epsilon (:* :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) ...)
   1 : (seq len 2051) (:cat :epsilon (:* :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) ...)
   1 : (seq len 1027) (:cat :epsilon (:* :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) ...)
   1 : (seq len 515) (:cat :epsilon (:* :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) ...)
   1 : (seq len 259) (:cat :epsilon (:* :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) ...)
   1 : (seq len 131) (:cat :epsilon (:* :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) ...)
   1 : (seq len 67) (:cat :epsilon (:* :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) ...)
   1 : (seq len 35) (:cat :epsilon (:* :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma))
   1 : (seq len 19) (:cat :epsilon (:* :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma))
   1 : (seq len 11) (:cat :epsilon (:* :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma))
   1 : (seq len 7) (:cat :epsilon (:* :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma))
   1 : (seq len 5) (:cat :epsilon (:not (:and :empty-set (:cat :epsilon))) (:or clojure.lang.IMeta :empty-set (:* (:or (:and)))) (:and :sigma (:+ :sigma) (:cat (:+ (:cat)) :sigma)))
   1 : (seq len 4) (:or clojure.lang.IMeta :empty-set (:* (:or (:and))))
   1 : (seq len 4) (:and :sigma (:+ :sigma) (:cat (:+ (:cat)) :sigma))
   1 : (seq len 3) (:and :empty-set (:cat :epsilon))
   1 : (seq len 3) (:cat (:+ (:cat)) :sigma)
   1 : (seq len 2) (:* (:cat))
   1 : (seq len 2) (:cat :sigma)
   1 : (seq len 2) (:+ (:cat))
   1 : (seq len 2) (:* (:or (:and)))
   1 : (seq len 2) (:+ :sigma)
   1 : (seq len 2) (:or (:and))
   1 : (seq len 2) (:not (:and :empty-set (:cat :epsilon)))
   1 : (seq len 2) (:cat :epsilon)
   1 :  clojure.lang.IMeta
    --------------------
cp calls= 699970   cpo calls= 700000  tp calls= 700009  pattern :sigma
    cpo arg frequencies:
   419971 :  :sigma
   139996 : (seq len 2) (:* :sigma)
   69988 : (seq len 3) (:cat :sigma (:* :sigma))
   69987 : (seq len 3) (:and (:cat :sigma (:* :sigma)) :sigma)
   22 :  :epsilon
   3 : (seq len 1) (:cat)
   3 :  :empty-set
   1 : (seq len 131075) (:cat :epsilon (:* :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) ...)
   1 : (seq len 65539) (:cat :epsilon (:* :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) ...)
   1 : (seq len 32771) (:cat :epsilon (:* :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) ...)
   1 : (seq len 16387) (:cat :epsilon (:* :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) ...)
   1 : (seq len 8195) (:cat :epsilon (:* :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) ...)
   1 : (seq len 4099) (:cat :epsilon (:* :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) ...)
   1 : (seq len 2051) (:cat :epsilon (:* :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) ...)
   1 : (seq len 1027) (:cat :epsilon (:* :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) ...)
   1 : (seq len 515) (:cat :epsilon (:* :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) ...)
   1 : (seq len 259) (:cat :epsilon (:* :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) ...)
   1 : (seq len 131) (:cat :epsilon (:* :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) ...)
   1 : (seq len 67) (:cat :epsilon (:* :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) ...)
   1 : (seq len 35) (:cat :epsilon (:* :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma))
   1 : (seq len 19) (:cat :epsilon (:* :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma))
   1 : (seq len 11) (:cat :epsilon (:* :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma))
   1 : (seq len 7) (:cat :epsilon (:* :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma))
   1 : (seq len 5) (:cat :epsilon (:not (:and :empty-set (:cat :epsilon))) (:or clojure.lang.IMeta :empty-set (:* (:or (:and)))) (:and :sigma (:+ :sigma) (:cat (:+ (:cat)) :sigma)))
   1 : (seq len 4) (:or clojure.lang.IMeta :empty-set (:* (:or (:and))))
   1 : (seq len 4) (:and :sigma (:+ :sigma) (:cat (:+ (:cat)) :sigma))
   1 : (seq len 3) (:and :empty-set (:cat :epsilon))
   1 : (seq len 3) (:cat (:+ (:cat)) :sigma)
   1 : (seq len 2) (:* (:cat))
   1 : (seq len 2) (:cat :sigma)
   1 : (seq len 2) (:+ (:cat))
   1 : (seq len 2) (:* (:or (:and)))
   1 : (seq len 2) (:+ :sigma)
   1 : (seq len 2) (:or (:and))
   1 : (seq len 2) (:not (:and :empty-set (:cat :epsilon)))
   1 : (seq len 2) (:cat :epsilon)
   1 :  clojure.lang.IMeta
    --------------------
cp calls= 799970   cpo calls= 800000  tp calls= 800009  pattern :sigma
    cpo arg frequencies:
   479971 :  :sigma
   159996 : (seq len 2) (:* :sigma)
   79988 : (seq len 3) (:cat :sigma (:* :sigma))
   79987 : (seq len 3) (:and (:cat :sigma (:* :sigma)) :sigma)
   22 :  :epsilon
   3 : (seq len 1) (:cat)
   3 :  :empty-set
   1 : (seq len 131075) (:cat :epsilon (:* :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) ...)
   1 : (seq len 65539) (:cat :epsilon (:* :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) ...)
   1 : (seq len 32771) (:cat :epsilon (:* :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) ...)
   1 : (seq len 16387) (:cat :epsilon (:* :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) ...)
   1 : (seq len 8195) (:cat :epsilon (:* :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) ...)
   1 : (seq len 4099) (:cat :epsilon (:* :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) ...)
   1 : (seq len 2051) (:cat :epsilon (:* :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) ...)
   1 : (seq len 1027) (:cat :epsilon (:* :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) ...)
   1 : (seq len 515) (:cat :epsilon (:* :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) ...)
   1 : (seq len 259) (:cat :epsilon (:* :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) ...)
   1 : (seq len 131) (:cat :epsilon (:* :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) ...)
   1 : (seq len 67) (:cat :epsilon (:* :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) ...)
   1 : (seq len 35) (:cat :epsilon (:* :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma))
   1 : (seq len 19) (:cat :epsilon (:* :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma))
   1 : (seq len 11) (:cat :epsilon (:* :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma))
   1 : (seq len 7) (:cat :epsilon (:* :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma))
   1 : (seq len 5) (:cat :epsilon (:not (:and :empty-set (:cat :epsilon))) (:or clojure.lang.IMeta :empty-set (:* (:or (:and)))) (:and :sigma (:+ :sigma) (:cat (:+ (:cat)) :sigma)))
   1 : (seq len 4) (:or clojure.lang.IMeta :empty-set (:* (:or (:and))))
   1 : (seq len 4) (:and :sigma (:+ :sigma) (:cat (:+ (:cat)) :sigma))
   1 : (seq len 3) (:and :empty-set (:cat :epsilon))
   1 : (seq len 3) (:cat (:+ (:cat)) :sigma)
   1 : (seq len 2) (:* (:cat))
   1 : (seq len 2) (:cat :sigma)
   1 : (seq len 2) (:+ (:cat))
   1 : (seq len 2) (:* (:or (:and)))
   1 : (seq len 2) (:+ :sigma)
   1 : (seq len 2) (:or (:and))
   1 : (seq len 2) (:not (:and :empty-set (:cat :epsilon)))
   1 : (seq len 2) (:cat :epsilon)
   1 :  clojure.lang.IMeta
    --------------------
cp calls= 899970   cpo calls= 900000  tp calls= 900009  pattern :sigma
    cpo arg frequencies:
   539971 :  :sigma
   179996 : (seq len 2) (:* :sigma)
   89988 : (seq len 3) (:cat :sigma (:* :sigma))
   89987 : (seq len 3) (:and (:cat :sigma (:* :sigma)) :sigma)
   22 :  :epsilon
   3 : (seq len 1) (:cat)
   3 :  :empty-set
   1 : (seq len 131075) (:cat :epsilon (:* :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) ...)
   1 : (seq len 65539) (:cat :epsilon (:* :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) ...)
   1 : (seq len 32771) (:cat :epsilon (:* :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) ...)
   1 : (seq len 16387) (:cat :epsilon (:* :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) ...)
   1 : (seq len 8195) (:cat :epsilon (:* :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) ...)
   1 : (seq len 4099) (:cat :epsilon (:* :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) ...)
   1 : (seq len 2051) (:cat :epsilon (:* :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) ...)
   1 : (seq len 1027) (:cat :epsilon (:* :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) ...)
   1 : (seq len 515) (:cat :epsilon (:* :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) ...)
   1 : (seq len 259) (:cat :epsilon (:* :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) ...)
   1 : (seq len 131) (:cat :epsilon (:* :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) ...)
   1 : (seq len 67) (:cat :epsilon (:* :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) ...)
   1 : (seq len 35) (:cat :epsilon (:* :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma))
   1 : (seq len 19) (:cat :epsilon (:* :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma))
   1 : (seq len 11) (:cat :epsilon (:* :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma))
   1 : (seq len 7) (:cat :epsilon (:* :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma))
   1 : (seq len 5) (:cat :epsilon (:not (:and :empty-set (:cat :epsilon))) (:or clojure.lang.IMeta :empty-set (:* (:or (:and)))) (:and :sigma (:+ :sigma) (:cat (:+ (:cat)) :sigma)))
   1 : (seq len 4) (:or clojure.lang.IMeta :empty-set (:* (:or (:and))))
   1 : (seq len 4) (:and :sigma (:+ :sigma) (:cat (:+ (:cat)) :sigma))
   1 : (seq len 3) (:and :empty-set (:cat :epsilon))
   1 : (seq len 3) (:cat (:+ (:cat)) :sigma)
   1 : (seq len 2) (:* (:cat))
   1 : (seq len 2) (:cat :sigma)
   1 : (seq len 2) (:+ (:cat))
   1 : (seq len 2) (:* (:or (:and)))
   1 : (seq len 2) (:+ :sigma)
   1 : (seq len 2) (:or (:and))
   1 : (seq len 2) (:not (:and :empty-set (:cat :epsilon)))
   1 : (seq len 2) (:cat :epsilon)
   1 :  clojure.lang.IMeta
    --------------------
cp calls= 999970   cpo calls= 1000000  tp calls= 1000009  pattern :sigma
    cpo arg frequencies:
   599971 :  :sigma
   199996 : (seq len 2) (:* :sigma)
   99988 : (seq len 3) (:cat :sigma (:* :sigma))
   99987 : (seq len 3) (:and (:cat :sigma (:* :sigma)) :sigma)
   22 :  :epsilon
   3 : (seq len 1) (:cat)
   3 :  :empty-set
   1 : (seq len 131075) (:cat :epsilon (:* :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) ...)
   1 : (seq len 65539) (:cat :epsilon (:* :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) ...)
   1 : (seq len 32771) (:cat :epsilon (:* :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) ...)
   1 : (seq len 16387) (:cat :epsilon (:* :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) ...)
   1 : (seq len 8195) (:cat :epsilon (:* :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) ...)
   1 : (seq len 4099) (:cat :epsilon (:* :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) ...)
   1 : (seq len 2051) (:cat :epsilon (:* :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) ...)
   1 : (seq len 1027) (:cat :epsilon (:* :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) ...)
   1 : (seq len 515) (:cat :epsilon (:* :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) ...)
   1 : (seq len 259) (:cat :epsilon (:* :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) ...)
   1 : (seq len 131) (:cat :epsilon (:* :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) ...)
   1 : (seq len 67) (:cat :epsilon (:* :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) ...)
   1 : (seq len 35) (:cat :epsilon (:* :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma))
   1 : (seq len 19) (:cat :epsilon (:* :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma))
   1 : (seq len 11) (:cat :epsilon (:* :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma))
   1 : (seq len 7) (:cat :epsilon (:* :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma))
   1 : (seq len 5) (:cat :epsilon (:not (:and :empty-set (:cat :epsilon))) (:or clojure.lang.IMeta :empty-set (:* (:or (:and)))) (:and :sigma (:+ :sigma) (:cat (:+ (:cat)) :sigma)))
   1 : (seq len 4) (:or clojure.lang.IMeta :empty-set (:* (:or (:and))))
   1 : (seq len 4) (:and :sigma (:+ :sigma) (:cat (:+ (:cat)) :sigma))
   1 : (seq len 3) (:and :empty-set (:cat :epsilon))
   1 : (seq len 3) (:cat (:+ (:cat)) :sigma)
   1 : (seq len 2) (:* (:cat))
   1 : (seq len 2) (:cat :sigma)
   1 : (seq len 2) (:+ (:cat))
   1 : (seq len 2) (:* (:or (:and)))
   1 : (seq len 2) (:+ :sigma)
   1 : (seq len 2) (:or (:and))
   1 : (seq len 2) (:not (:and :empty-set (:cat :epsilon)))
   1 : (seq len 2) (:cat :epsilon)
   1 :  clojure.lang.IMeta
    --------------------
cp calls= 1099970   cpo calls= 1100000  tp calls= 1100009  pattern :sigma
    cpo arg frequencies:
   659971 :  :sigma
   219996 : (seq len 2) (:* :sigma)
   109988 : (seq len 3) (:cat :sigma (:* :sigma))
   109987 : (seq len 3) (:and (:cat :sigma (:* :sigma)) :sigma)
   22 :  :epsilon
   3 : (seq len 1) (:cat)
   3 :  :empty-set
   1 : (seq len 131075) (:cat :epsilon (:* :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) ...)
   1 : (seq len 65539) (:cat :epsilon (:* :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) ...)
   1 : (seq len 32771) (:cat :epsilon (:* :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) ...)
   1 : (seq len 16387) (:cat :epsilon (:* :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) ...)
   1 : (seq len 8195) (:cat :epsilon (:* :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) ...)
   1 : (seq len 4099) (:cat :epsilon (:* :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) ...)
   1 : (seq len 2051) (:cat :epsilon (:* :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) ...)
   1 : (seq len 1027) (:cat :epsilon (:* :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) ...)
   1 : (seq len 515) (:cat :epsilon (:* :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) ...)
   1 : (seq len 259) (:cat :epsilon (:* :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) ...)
   1 : (seq len 131) (:cat :epsilon (:* :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) ...)
   1 : (seq len 67) (:cat :epsilon (:* :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) ...)
   1 : (seq len 35) (:cat :epsilon (:* :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma))
   1 : (seq len 19) (:cat :epsilon (:* :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma))
   1 : (seq len 11) (:cat :epsilon (:* :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma))
   1 : (seq len 7) (:cat :epsilon (:* :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma))
   1 : (seq len 5) (:cat :epsilon (:not (:and :empty-set (:cat :epsilon))) (:or clojure.lang.IMeta :empty-set (:* (:or (:and)))) (:and :sigma (:+ :sigma) (:cat (:+ (:cat)) :sigma)))
   1 : (seq len 4) (:or clojure.lang.IMeta :empty-set (:* (:or (:and))))
   1 : (seq len 4) (:and :sigma (:+ :sigma) (:cat (:+ (:cat)) :sigma))
   1 : (seq len 3) (:and :empty-set (:cat :epsilon))
   1 : (seq len 3) (:cat (:+ (:cat)) :sigma)
   1 : (seq len 2) (:* (:cat))
   1 : (seq len 2) (:cat :sigma)
   1 : (seq len 2) (:+ (:cat))
   1 : (seq len 2) (:* (:or (:and)))
   1 : (seq len 2) (:+ :sigma)
   1 : (seq len 2) (:or (:and))
   1 : (seq len 2) (:not (:and :empty-set (:cat :epsilon)))
   1 : (seq len 2) (:cat :epsilon)
   1 :  clojure.lang.IMeta
    --------------------
cp calls= 1199970   cpo calls= 1200000  tp calls= 1200009  pattern :sigma
    cpo arg frequencies:
   719971 :  :sigma
   239996 : (seq len 2) (:* :sigma)
   119988 : (seq len 3) (:cat :sigma (:* :sigma))
   119987 : (seq len 3) (:and (:cat :sigma (:* :sigma)) :sigma)
   22 :  :epsilon
   3 : (seq len 1) (:cat)
   3 :  :empty-set
   1 : (seq len 131075) (:cat :epsilon (:* :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) ...)
   1 : (seq len 65539) (:cat :epsilon (:* :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) ...)
   1 : (seq len 32771) (:cat :epsilon (:* :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) ...)
   1 : (seq len 16387) (:cat :epsilon (:* :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) ...)
   1 : (seq len 8195) (:cat :epsilon (:* :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) ...)
   1 : (seq len 4099) (:cat :epsilon (:* :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) ...)
   1 : (seq len 2051) (:cat :epsilon (:* :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) ...)
   1 : (seq len 1027) (:cat :epsilon (:* :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) ...)
   1 : (seq len 515) (:cat :epsilon (:* :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) ...)
   1 : (seq len 259) (:cat :epsilon (:* :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) ...)
   1 : (seq len 131) (:cat :epsilon (:* :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) ...)
   1 : (seq len 67) (:cat :epsilon (:* :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) ...)
   1 : (seq len 35) (:cat :epsilon (:* :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma))
   1 : (seq len 19) (:cat :epsilon (:* :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma))
   1 : (seq len 11) (:cat :epsilon (:* :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma))
   1 : (seq len 7) (:cat :epsilon (:* :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma))
   1 : (seq len 5) (:cat :epsilon (:not (:and :empty-set (:cat :epsilon))) (:or clojure.lang.IMeta :empty-set (:* (:or (:and)))) (:and :sigma (:+ :sigma) (:cat (:+ (:cat)) :sigma)))
   1 : (seq len 4) (:or clojure.lang.IMeta :empty-set (:* (:or (:and))))
   1 : (seq len 4) (:and :sigma (:+ :sigma) (:cat (:+ (:cat)) :sigma))
   1 : (seq len 3) (:and :empty-set (:cat :epsilon))
   1 : (seq len 3) (:cat (:+ (:cat)) :sigma)
   1 : (seq len 2) (:* (:cat))
   1 : (seq len 2) (:cat :sigma)
   1 : (seq len 2) (:+ (:cat))
   1 : (seq len 2) (:* (:or (:and)))
   1 : (seq len 2) (:+ :sigma)
   1 : (seq len 2) (:or (:and))
   1 : (seq len 2) (:not (:and :empty-set (:cat :epsilon)))
   1 : (seq len 2) (:cat :epsilon)
   1 :  clojure.lang.IMeta
    --------------------
cp calls= 1299970   cpo calls= 1300000  tp calls= 1300009  pattern :sigma
    cpo arg frequencies:
   779971 :  :sigma
   259996 : (seq len 2) (:* :sigma)
   129988 : (seq len 3) (:cat :sigma (:* :sigma))
   129987 : (seq len 3) (:and (:cat :sigma (:* :sigma)) :sigma)
   22 :  :epsilon
   3 : (seq len 1) (:cat)
   3 :  :empty-set
   1 : (seq len 131075) (:cat :epsilon (:* :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) ...)
   1 : (seq len 65539) (:cat :epsilon (:* :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) ...)
   1 : (seq len 32771) (:cat :epsilon (:* :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) ...)
   1 : (seq len 16387) (:cat :epsilon (:* :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) ...)
   1 : (seq len 8195) (:cat :epsilon (:* :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) ...)
   1 : (seq len 4099) (:cat :epsilon (:* :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) ...)
   1 : (seq len 2051) (:cat :epsilon (:* :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) ...)
   1 : (seq len 1027) (:cat :epsilon (:* :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) ...)
   1 : (seq len 515) (:cat :epsilon (:* :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) ...)
   1 : (seq len 259) (:cat :epsilon (:* :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) ...)
   1 : (seq len 131) (:cat :epsilon (:* :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) ...)
   1 : (seq len 67) (:cat :epsilon (:* :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) ...)
   1 : (seq len 35) (:cat :epsilon (:* :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma))
   1 : (seq len 19) (:cat :epsilon (:* :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma))
   1 : (seq len 11) (:cat :epsilon (:* :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma))
   1 : (seq len 7) (:cat :epsilon (:* :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma))
   1 : (seq len 5) (:cat :epsilon (:not (:and :empty-set (:cat :epsilon))) (:or clojure.lang.IMeta :empty-set (:* (:or (:and)))) (:and :sigma (:+ :sigma) (:cat (:+ (:cat)) :sigma)))
   1 : (seq len 4) (:or clojure.lang.IMeta :empty-set (:* (:or (:and))))
   1 : (seq len 4) (:and :sigma (:+ :sigma) (:cat (:+ (:cat)) :sigma))
   1 : (seq len 3) (:and :empty-set (:cat :epsilon))
   1 : (seq len 3) (:cat (:+ (:cat)) :sigma)
   1 : (seq len 2) (:* (:cat))
   1 : (seq len 2) (:cat :sigma)
   1 : (seq len 2) (:+ (:cat))
   1 : (seq len 2) (:* (:or (:and)))
   1 : (seq len 2) (:+ :sigma)
   1 : (seq len 2) (:or (:and))
   1 : (seq len 2) (:not (:and :empty-set (:cat :epsilon)))
   1 : (seq len 2) (:cat :epsilon)
   1 :  clojure.lang.IMeta
    --------------------
cp calls= 1399969   cpo calls= 1400000  tp calls= 1400009  pattern (:* :sigma)
    cpo arg frequencies:
   839970 :  :sigma
   279995 : (seq len 2) (:* :sigma)
   139988 : (seq len 3) (:cat :sigma (:* :sigma))
   139987 : (seq len 3) (:and (:cat :sigma (:* :sigma)) :sigma)
   23 :  :epsilon
   3 : (seq len 1) (:cat)
   3 :  :empty-set
   1 : (seq len 262147) (:cat :epsilon (:* :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) ...)
   1 : (seq len 131075) (:cat :epsilon (:* :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) ...)
   1 : (seq len 65539) (:cat :epsilon (:* :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) ...)
   1 : (seq len 32771) (:cat :epsilon (:* :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) ...)
   1 : (seq len 16387) (:cat :epsilon (:* :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) ...)
   1 : (seq len 8195) (:cat :epsilon (:* :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) ...)
   1 : (seq len 4099) (:cat :epsilon (:* :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) ...)
   1 : (seq len 2051) (:cat :epsilon (:* :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) ...)
   1 : (seq len 1027) (:cat :epsilon (:* :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) ...)
   1 : (seq len 515) (:cat :epsilon (:* :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) ...)
   1 : (seq len 259) (:cat :epsilon (:* :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) ...)
   1 : (seq len 131) (:cat :epsilon (:* :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) ...)
   1 : (seq len 67) (:cat :epsilon (:* :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) ...)
   1 : (seq len 35) (:cat :epsilon (:* :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma))
   1 : (seq len 19) (:cat :epsilon (:* :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma))
   1 : (seq len 11) (:cat :epsilon (:* :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma))
   1 : (seq len 7) (:cat :epsilon (:* :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma))
   1 : (seq len 5) (:cat :epsilon (:not (:and :empty-set (:cat :epsilon))) (:or clojure.lang.IMeta :empty-set (:* (:or (:and)))) (:and :sigma (:+ :sigma) (:cat (:+ (:cat)) :sigma)))
   1 : (seq len 4) (:or clojure.lang.IMeta :empty-set (:* (:or (:and))))
   1 : (seq len 4) (:and :sigma (:+ :sigma) (:cat (:+ (:cat)) :sigma))
   1 : (seq len 3) (:and :empty-set (:cat :epsilon))
   1 : (seq len 3) (:cat (:+ (:cat)) :sigma)
   1 : (seq len 2) (:* (:cat))
   1 : (seq len 2) (:cat :sigma)
   1 : (seq len 2) (:+ (:cat))
   1 : (seq len 2) (:* (:or (:and)))
   1 : (seq len 2) (:+ :sigma)
   1 : (seq len 2) (:or (:and))
   1 : (seq len 2) (:not (:and :empty-set (:cat :epsilon)))
   1 : (seq len 2) (:cat :epsilon)
   1 :  clojure.lang.IMeta
    --------------------
cp calls= 1499969   cpo calls= 1500000  tp calls= 1500009  pattern (:* :sigma)
    cpo arg frequencies:
   899970 :  :sigma
   299995 : (seq len 2) (:* :sigma)
   149988 : (seq len 3) (:cat :sigma (:* :sigma))
   149987 : (seq len 3) (:and (:cat :sigma (:* :sigma)) :sigma)
   23 :  :epsilon
   3 : (seq len 1) (:cat)
   3 :  :empty-set
   1 : (seq len 262147) (:cat :epsilon (:* :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) ...)
   1 : (seq len 131075) (:cat :epsilon (:* :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) ...)
   1 : (seq len 65539) (:cat :epsilon (:* :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) ...)
   1 : (seq len 32771) (:cat :epsilon (:* :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) ...)
   1 : (seq len 16387) (:cat :epsilon (:* :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) ...)
   1 : (seq len 8195) (:cat :epsilon (:* :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) ...)
   1 : (seq len 4099) (:cat :epsilon (:* :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) ...)
   1 : (seq len 2051) (:cat :epsilon (:* :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) ...)
   1 : (seq len 1027) (:cat :epsilon (:* :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) ...)
   1 : (seq len 515) (:cat :epsilon (:* :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) ...)
   1 : (seq len 259) (:cat :epsilon (:* :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) ...)
   1 : (seq len 131) (:cat :epsilon (:* :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) ...)
   1 : (seq len 67) (:cat :epsilon (:* :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) ...)
   1 : (seq len 35) (:cat :epsilon (:* :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma))
   1 : (seq len 19) (:cat :epsilon (:* :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma))
   1 : (seq len 11) (:cat :epsilon (:* :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma))
   1 : (seq len 7) (:cat :epsilon (:* :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma))
   1 : (seq len 5) (:cat :epsilon (:not (:and :empty-set (:cat :epsilon))) (:or clojure.lang.IMeta :empty-set (:* (:or (:and)))) (:and :sigma (:+ :sigma) (:cat (:+ (:cat)) :sigma)))
   1 : (seq len 4) (:or clojure.lang.IMeta :empty-set (:* (:or (:and))))
   1 : (seq len 4) (:and :sigma (:+ :sigma) (:cat (:+ (:cat)) :sigma))
   1 : (seq len 3) (:and :empty-set (:cat :epsilon))
   1 : (seq len 3) (:cat (:+ (:cat)) :sigma)
   1 : (seq len 2) (:* (:cat))
   1 : (seq len 2) (:cat :sigma)
   1 : (seq len 2) (:+ (:cat))
   1 : (seq len 2) (:* (:or (:and)))
   1 : (seq len 2) (:+ :sigma)
   1 : (seq len 2) (:or (:and))
   1 : (seq len 2) (:not (:and :empty-set (:cat :epsilon)))
   1 : (seq len 2) (:cat :epsilon)
   1 :  clojure.lang.IMeta
    --------------------
cp calls= 1599969   cpo calls= 1600000  tp calls= 1600009  pattern (:* :sigma)
    cpo arg frequencies:
   959970 :  :sigma
   319995 : (seq len 2) (:* :sigma)
   159988 : (seq len 3) (:cat :sigma (:* :sigma))
   159987 : (seq len 3) (:and (:cat :sigma (:* :sigma)) :sigma)
   23 :  :epsilon
   3 : (seq len 1) (:cat)
   3 :  :empty-set
   1 : (seq len 262147) (:cat :epsilon (:* :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) ...)
   1 : (seq len 131075) (:cat :epsilon (:* :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) ...)
   1 : (seq len 65539) (:cat :epsilon (:* :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) ...)
   1 : (seq len 32771) (:cat :epsilon (:* :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) ...)
   1 : (seq len 16387) (:cat :epsilon (:* :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) ...)
   1 : (seq len 8195) (:cat :epsilon (:* :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) ...)
   1 : (seq len 4099) (:cat :epsilon (:* :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) ...)
   1 : (seq len 2051) (:cat :epsilon (:* :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) ...)
   1 : (seq len 1027) (:cat :epsilon (:* :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) ...)
   1 : (seq len 515) (:cat :epsilon (:* :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) ...)
   1 : (seq len 259) (:cat :epsilon (:* :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) ...)
   1 : (seq len 131) (:cat :epsilon (:* :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) ...)
   1 : (seq len 67) (:cat :epsilon (:* :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) ...)
   1 : (seq len 35) (:cat :epsilon (:* :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma))
   1 : (seq len 19) (:cat :epsilon (:* :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma))
   1 : (seq len 11) (:cat :epsilon (:* :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma))
   1 : (seq len 7) (:cat :epsilon (:* :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma))
   1 : (seq len 5) (:cat :epsilon (:not (:and :empty-set (:cat :epsilon))) (:or clojure.lang.IMeta :empty-set (:* (:or (:and)))) (:and :sigma (:+ :sigma) (:cat (:+ (:cat)) :sigma)))
   1 : (seq len 4) (:or clojure.lang.IMeta :empty-set (:* (:or (:and))))
   1 : (seq len 4) (:and :sigma (:+ :sigma) (:cat (:+ (:cat)) :sigma))
   1 : (seq len 3) (:and :empty-set (:cat :epsilon))
   1 : (seq len 3) (:cat (:+ (:cat)) :sigma)
   1 : (seq len 2) (:* (:cat))
   1 : (seq len 2) (:cat :sigma)
   1 : (seq len 2) (:+ (:cat))
   1 : (seq len 2) (:* (:or (:and)))
   1 : (seq len 2) (:+ :sigma)
   1 : (seq len 2) (:or (:and))
   1 : (seq len 2) (:not (:and :empty-set (:cat :epsilon)))
   1 : (seq len 2) (:cat :epsilon)
   1 :  clojure.lang.IMeta
    --------------------
cp calls= 1699969   cpo calls= 1700000  tp calls= 1700009  pattern (:* :sigma)
    cpo arg frequencies:
   1019970 :  :sigma
   339995 : (seq len 2) (:* :sigma)
   169988 : (seq len 3) (:cat :sigma (:* :sigma))
   169987 : (seq len 3) (:and (:cat :sigma (:* :sigma)) :sigma)
   23 :  :epsilon
   3 : (seq len 1) (:cat)
   3 :  :empty-set
   1 : (seq len 262147) (:cat :epsilon (:* :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) ...)
   1 : (seq len 131075) (:cat :epsilon (:* :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) ...)
   1 : (seq len 65539) (:cat :epsilon (:* :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) ...)
   1 : (seq len 32771) (:cat :epsilon (:* :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) ...)
   1 : (seq len 16387) (:cat :epsilon (:* :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) ...)
   1 : (seq len 8195) (:cat :epsilon (:* :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) ...)
   1 : (seq len 4099) (:cat :epsilon (:* :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) ...)
   1 : (seq len 2051) (:cat :epsilon (:* :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) ...)
   1 : (seq len 1027) (:cat :epsilon (:* :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) ...)
   1 : (seq len 515) (:cat :epsilon (:* :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) ...)
   1 : (seq len 259) (:cat :epsilon (:* :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) ...)
   1 : (seq len 131) (:cat :epsilon (:* :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) ...)
   1 : (seq len 67) (:cat :epsilon (:* :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) ...)
   1 : (seq len 35) (:cat :epsilon (:* :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma))
   1 : (seq len 19) (:cat :epsilon (:* :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma))
   1 : (seq len 11) (:cat :epsilon (:* :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma))
   1 : (seq len 7) (:cat :epsilon (:* :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma))
   1 : (seq len 5) (:cat :epsilon (:not (:and :empty-set (:cat :epsilon))) (:or clojure.lang.IMeta :empty-set (:* (:or (:and)))) (:and :sigma (:+ :sigma) (:cat (:+ (:cat)) :sigma)))
   1 : (seq len 4) (:or clojure.lang.IMeta :empty-set (:* (:or (:and))))
   1 : (seq len 4) (:and :sigma (:+ :sigma) (:cat (:+ (:cat)) :sigma))
   1 : (seq len 3) (:and :empty-set (:cat :epsilon))
   1 : (seq len 3) (:cat (:+ (:cat)) :sigma)
   1 : (seq len 2) (:* (:cat))
   1 : (seq len 2) (:cat :sigma)
   1 : (seq len 2) (:+ (:cat))
   1 : (seq len 2) (:* (:or (:and)))
   1 : (seq len 2) (:+ :sigma)
   1 : (seq len 2) (:or (:and))
   1 : (seq len 2) (:not (:and :empty-set (:cat :epsilon)))
   1 : (seq len 2) (:cat :epsilon)
   1 :  clojure.lang.IMeta
    --------------------
cp calls= 1799969   cpo calls= 1800000  tp calls= 1800009  pattern (:* :sigma)
    cpo arg frequencies:
   1079970 :  :sigma
   359995 : (seq len 2) (:* :sigma)
   179988 : (seq len 3) (:cat :sigma (:* :sigma))
   179987 : (seq len 3) (:and (:cat :sigma (:* :sigma)) :sigma)
   23 :  :epsilon
   3 : (seq len 1) (:cat)
   3 :  :empty-set
   1 : (seq len 262147) (:cat :epsilon (:* :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) ...)
   1 : (seq len 131075) (:cat :epsilon (:* :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) ...)
   1 : (seq len 65539) (:cat :epsilon (:* :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) ...)
   1 : (seq len 32771) (:cat :epsilon (:* :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) ...)
   1 : (seq len 16387) (:cat :epsilon (:* :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) ...)
   1 : (seq len 8195) (:cat :epsilon (:* :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) ...)
   1 : (seq len 4099) (:cat :epsilon (:* :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) ...)
   1 : (seq len 2051) (:cat :epsilon (:* :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) ...)
   1 : (seq len 1027) (:cat :epsilon (:* :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) ...)
   1 : (seq len 515) (:cat :epsilon (:* :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) ...)
   1 : (seq len 259) (:cat :epsilon (:* :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) ...)
   1 : (seq len 131) (:cat :epsilon (:* :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) ...)
   1 : (seq len 67) (:cat :epsilon (:* :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) ...)
   1 : (seq len 35) (:cat :epsilon (:* :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma))
   1 : (seq len 19) (:cat :epsilon (:* :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma))
   1 : (seq len 11) (:cat :epsilon (:* :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma))
   1 : (seq len 7) (:cat :epsilon (:* :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma))
   1 : (seq len 5) (:cat :epsilon (:not (:and :empty-set (:cat :epsilon))) (:or clojure.lang.IMeta :empty-set (:* (:or (:and)))) (:and :sigma (:+ :sigma) (:cat (:+ (:cat)) :sigma)))
   1 : (seq len 4) (:or clojure.lang.IMeta :empty-set (:* (:or (:and))))
   1 : (seq len 4) (:and :sigma (:+ :sigma) (:cat (:+ (:cat)) :sigma))
   1 : (seq len 3) (:and :empty-set (:cat :epsilon))
   1 : (seq len 3) (:cat (:+ (:cat)) :sigma)
   1 : (seq len 2) (:* (:cat))
   1 : (seq len 2) (:cat :sigma)
   1 : (seq len 2) (:+ (:cat))
   1 : (seq len 2) (:* (:or (:and)))
   1 : (seq len 2) (:+ :sigma)
   1 : (seq len 2) (:or (:and))
   1 : (seq len 2) (:not (:and :empty-set (:cat :epsilon)))
   1 : (seq len 2) (:cat :epsilon)
   1 :  clojure.lang.IMeta
    --------------------
cp calls= 1899969   cpo calls= 1900000  tp calls= 1900009  pattern (:* :sigma)
    cpo arg frequencies:
   1139970 :  :sigma
   379995 : (seq len 2) (:* :sigma)
   189988 : (seq len 3) (:cat :sigma (:* :sigma))
   189987 : (seq len 3) (:and (:cat :sigma (:* :sigma)) :sigma)
   23 :  :epsilon
   3 : (seq len 1) (:cat)
   3 :  :empty-set
   1 : (seq len 262147) (:cat :epsilon (:* :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) ...)
   1 : (seq len 131075) (:cat :epsilon (:* :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) ...)
   1 : (seq len 65539) (:cat :epsilon (:* :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) ...)
   1 : (seq len 32771) (:cat :epsilon (:* :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) ...)
   1 : (seq len 16387) (:cat :epsilon (:* :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) ...)
   1 : (seq len 8195) (:cat :epsilon (:* :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) ...)
   1 : (seq len 4099) (:cat :epsilon (:* :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) ...)
   1 : (seq len 2051) (:cat :epsilon (:* :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) ...)
   1 : (seq len 1027) (:cat :epsilon (:* :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) ...)
   1 : (seq len 515) (:cat :epsilon (:* :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) ...)
   1 : (seq len 259) (:cat :epsilon (:* :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) ...)
   1 : (seq len 131) (:cat :epsilon (:* :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) ...)
   1 : (seq len 67) (:cat :epsilon (:* :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) ...)
   1 : (seq len 35) (:cat :epsilon (:* :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma))
   1 : (seq len 19) (:cat :epsilon (:* :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma))
   1 : (seq len 11) (:cat :epsilon (:* :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma))
   1 : (seq len 7) (:cat :epsilon (:* :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma))
   1 : (seq len 5) (:cat :epsilon (:not (:and :empty-set (:cat :epsilon))) (:or clojure.lang.IMeta :empty-set (:* (:or (:and)))) (:and :sigma (:+ :sigma) (:cat (:+ (:cat)) :sigma)))
   1 : (seq len 4) (:or clojure.lang.IMeta :empty-set (:* (:or (:and))))
   1 : (seq len 4) (:and :sigma (:+ :sigma) (:cat (:+ (:cat)) :sigma))
   1 : (seq len 3) (:and :empty-set (:cat :epsilon))
   1 : (seq len 3) (:cat (:+ (:cat)) :sigma)
   1 : (seq len 2) (:* (:cat))
   1 : (seq len 2) (:cat :sigma)
   1 : (seq len 2) (:+ (:cat))
   1 : (seq len 2) (:* (:or (:and)))
   1 : (seq len 2) (:+ :sigma)
   1 : (seq len 2) (:or (:and))
   1 : (seq len 2) (:not (:and :empty-set (:cat :epsilon)))
   1 : (seq len 2) (:cat :epsilon)
   1 :  clojure.lang.IMeta
    --------------------
cp calls= 1999969   cpo calls= 2000000  tp calls= 2000009  pattern (:* :sigma)
    cpo arg frequencies:
   1199970 :  :sigma
   399995 : (seq len 2) (:* :sigma)
   199988 : (seq len 3) (:cat :sigma (:* :sigma))
   199987 : (seq len 3) (:and (:cat :sigma (:* :sigma)) :sigma)
   23 :  :epsilon
   3 : (seq len 1) (:cat)
   3 :  :empty-set
   1 : (seq len 262147) (:cat :epsilon (:* :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) ...)
   1 : (seq len 131075) (:cat :epsilon (:* :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) ...)
   1 : (seq len 65539) (:cat :epsilon (:* :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) ...)
   1 : (seq len 32771) (:cat :epsilon (:* :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) ...)
   1 : (seq len 16387) (:cat :epsilon (:* :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) ...)
   1 : (seq len 8195) (:cat :epsilon (:* :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) ...)
   1 : (seq len 4099) (:cat :epsilon (:* :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) ...)
   1 : (seq len 2051) (:cat :epsilon (:* :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) ...)
   1 : (seq len 1027) (:cat :epsilon (:* :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) ...)
   1 : (seq len 515) (:cat :epsilon (:* :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) ...)
   1 : (seq len 259) (:cat :epsilon (:* :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) ...)
   1 : (seq len 131) (:cat :epsilon (:* :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) ...)
   1 : (seq len 67) (:cat :epsilon (:* :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) ...)
   1 : (seq len 35) (:cat :epsilon (:* :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma))
   1 : (seq len 19) (:cat :epsilon (:* :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma))
   1 : (seq len 11) (:cat :epsilon (:* :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma))
   1 : (seq len 7) (:cat :epsilon (:* :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma))
   1 : (seq len 5) (:cat :epsilon (:not (:and :empty-set (:cat :epsilon))) (:or clojure.lang.IMeta :empty-set (:* (:or (:and)))) (:and :sigma (:+ :sigma) (:cat (:+ (:cat)) :sigma)))
   1 : (seq len 4) (:or clojure.lang.IMeta :empty-set (:* (:or (:and))))
   1 : (seq len 4) (:and :sigma (:+ :sigma) (:cat (:+ (:cat)) :sigma))
   1 : (seq len 3) (:and :empty-set (:cat :epsilon))
   1 : (seq len 3) (:cat (:+ (:cat)) :sigma)
   1 : (seq len 2) (:* (:cat))
   1 : (seq len 2) (:cat :sigma)
   1 : (seq len 2) (:+ (:cat))
   1 : (seq len 2) (:* (:or (:and)))
   1 : (seq len 2) (:+ :sigma)
   1 : (seq len 2) (:or (:and))
   1 : (seq len 2) (:not (:and :empty-set (:cat :epsilon)))
   1 : (seq len 2) (:cat :epsilon)
   1 :  clojure.lang.IMeta
    --------------------
cp calls= 2099969   cpo calls= 2100000  tp calls= 2100009  pattern (:* :sigma)
    cpo arg frequencies:
   1259970 :  :sigma
   419995 : (seq len 2) (:* :sigma)
   209988 : (seq len 3) (:cat :sigma (:* :sigma))
   209987 : (seq len 3) (:and (:cat :sigma (:* :sigma)) :sigma)
   23 :  :epsilon
   3 : (seq len 1) (:cat)
   3 :  :empty-set
   1 : (seq len 262147) (:cat :epsilon (:* :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) ...)
   1 : (seq len 131075) (:cat :epsilon (:* :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) ...)
   1 : (seq len 65539) (:cat :epsilon (:* :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) ...)
   1 : (seq len 32771) (:cat :epsilon (:* :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) ...)
   1 : (seq len 16387) (:cat :epsilon (:* :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) ...)
   1 : (seq len 8195) (:cat :epsilon (:* :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) ...)
   1 : (seq len 4099) (:cat :epsilon (:* :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) ...)
   1 : (seq len 2051) (:cat :epsilon (:* :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) ...)
   1 : (seq len 1027) (:cat :epsilon (:* :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) ...)
   1 : (seq len 515) (:cat :epsilon (:* :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) ...)
   1 : (seq len 259) (:cat :epsilon (:* :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) ...)
   1 : (seq len 131) (:cat :epsilon (:* :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) ...)
   1 : (seq len 67) (:cat :epsilon (:* :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) ...)
   1 : (seq len 35) (:cat :epsilon (:* :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma))
   1 : (seq len 19) (:cat :epsilon (:* :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma))
   1 : (seq len 11) (:cat :epsilon (:* :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma))
   1 : (seq len 7) (:cat :epsilon (:* :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma))
   1 : (seq len 5) (:cat :epsilon (:not (:and :empty-set (:cat :epsilon))) (:or clojure.lang.IMeta :empty-set (:* (:or (:and)))) (:and :sigma (:+ :sigma) (:cat (:+ (:cat)) :sigma)))
   1 : (seq len 4) (:or clojure.lang.IMeta :empty-set (:* (:or (:and))))
   1 : (seq len 4) (:and :sigma (:+ :sigma) (:cat (:+ (:cat)) :sigma))
   1 : (seq len 3) (:and :empty-set (:cat :epsilon))
   1 : (seq len 3) (:cat (:+ (:cat)) :sigma)
   1 : (seq len 2) (:* (:cat))
   1 : (seq len 2) (:cat :sigma)
   1 : (seq len 2) (:+ (:cat))
   1 : (seq len 2) (:* (:or (:and)))
   1 : (seq len 2) (:+ :sigma)
   1 : (seq len 2) (:or (:and))
   1 : (seq len 2) (:not (:and :empty-set (:cat :epsilon)))
   1 : (seq len 2) (:cat :epsilon)
   1 :  clojure.lang.IMeta
    --------------------
cp calls= 2199969   cpo calls= 2200000  tp calls= 2200009  pattern (:* :sigma)
    cpo arg frequencies:
   1319970 :  :sigma
   439995 : (seq len 2) (:* :sigma)
   219988 : (seq len 3) (:cat :sigma (:* :sigma))
   219987 : (seq len 3) (:and (:cat :sigma (:* :sigma)) :sigma)
   23 :  :epsilon
   3 : (seq len 1) (:cat)
   3 :  :empty-set
   1 : (seq len 262147) (:cat :epsilon (:* :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) ...)
   1 : (seq len 131075) (:cat :epsilon (:* :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) ...)
   1 : (seq len 65539) (:cat :epsilon (:* :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) ...)
   1 : (seq len 32771) (:cat :epsilon (:* :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) ...)
   1 : (seq len 16387) (:cat :epsilon (:* :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) ...)
   1 : (seq len 8195) (:cat :epsilon (:* :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) ...)
   1 : (seq len 4099) (:cat :epsilon (:* :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) ...)
   1 : (seq len 2051) (:cat :epsilon (:* :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) ...)
   1 : (seq len 1027) (:cat :epsilon (:* :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) ...)
   1 : (seq len 515) (:cat :epsilon (:* :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) ...)
   1 : (seq len 259) (:cat :epsilon (:* :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) ...)
   1 : (seq len 131) (:cat :epsilon (:* :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) ...)
   1 : (seq len 67) (:cat :epsilon (:* :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) ...)
   1 : (seq len 35) (:cat :epsilon (:* :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma))
   1 : (seq len 19) (:cat :epsilon (:* :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma))
   1 : (seq len 11) (:cat :epsilon (:* :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma))
   1 : (seq len 7) (:cat :epsilon (:* :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma))
   1 : (seq len 5) (:cat :epsilon (:not (:and :empty-set (:cat :epsilon))) (:or clojure.lang.IMeta :empty-set (:* (:or (:and)))) (:and :sigma (:+ :sigma) (:cat (:+ (:cat)) :sigma)))
   1 : (seq len 4) (:or clojure.lang.IMeta :empty-set (:* (:or (:and))))
   1 : (seq len 4) (:and :sigma (:+ :sigma) (:cat (:+ (:cat)) :sigma))
   1 : (seq len 3) (:and :empty-set (:cat :epsilon))
   1 : (seq len 3) (:cat (:+ (:cat)) :sigma)
   1 : (seq len 2) (:* (:cat))
   1 : (seq len 2) (:cat :sigma)
   1 : (seq len 2) (:+ (:cat))
   1 : (seq len 2) (:* (:or (:and)))
   1 : (seq len 2) (:+ :sigma)
   1 : (seq len 2) (:or (:and))
   1 : (seq len 2) (:not (:and :empty-set (:cat :epsilon)))
   1 : (seq len 2) (:cat :epsilon)
   1 :  clojure.lang.IMeta
    --------------------
cp calls= 2299969   cpo calls= 2300000  tp calls= 2300009  pattern (:* :sigma)
    cpo arg frequencies:
   1379970 :  :sigma
   459995 : (seq len 2) (:* :sigma)
   229988 : (seq len 3) (:cat :sigma (:* :sigma))
   229987 : (seq len 3) (:and (:cat :sigma (:* :sigma)) :sigma)
   23 :  :epsilon
   3 : (seq len 1) (:cat)
   3 :  :empty-set
   1 : (seq len 262147) (:cat :epsilon (:* :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) ...)
   1 : (seq len 131075) (:cat :epsilon (:* :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) ...)
   1 : (seq len 65539) (:cat :epsilon (:* :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) ...)
   1 : (seq len 32771) (:cat :epsilon (:* :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) ...)
   1 : (seq len 16387) (:cat :epsilon (:* :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) ...)
   1 : (seq len 8195) (:cat :epsilon (:* :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) ...)
   1 : (seq len 4099) (:cat :epsilon (:* :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) ...)
   1 : (seq len 2051) (:cat :epsilon (:* :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) ...)
   1 : (seq len 1027) (:cat :epsilon (:* :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) ...)
   1 : (seq len 515) (:cat :epsilon (:* :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) ...)
   1 : (seq len 259) (:cat :epsilon (:* :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) ...)
   1 : (seq len 131) (:cat :epsilon (:* :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) ...)
   1 : (seq len 67) (:cat :epsilon (:* :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) ...)
   1 : (seq len 35) (:cat :epsilon (:* :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma))
   1 : (seq len 19) (:cat :epsilon (:* :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma))
   1 : (seq len 11) (:cat :epsilon (:* :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma))
   1 : (seq len 7) (:cat :epsilon (:* :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma))
   1 : (seq len 5) (:cat :epsilon (:not (:and :empty-set (:cat :epsilon))) (:or clojure.lang.IMeta :empty-set (:* (:or (:and)))) (:and :sigma (:+ :sigma) (:cat (:+ (:cat)) :sigma)))
   1 : (seq len 4) (:or clojure.lang.IMeta :empty-set (:* (:or (:and))))
   1 : (seq len 4) (:and :sigma (:+ :sigma) (:cat (:+ (:cat)) :sigma))
   1 : (seq len 3) (:and :empty-set (:cat :epsilon))
   1 : (seq len 3) (:cat (:+ (:cat)) :sigma)
   1 : (seq len 2) (:* (:cat))
   1 : (seq len 2) (:cat :sigma)
   1 : (seq len 2) (:+ (:cat))
   1 : (seq len 2) (:* (:or (:and)))
   1 : (seq len 2) (:+ :sigma)
   1 : (seq len 2) (:or (:and))
   1 : (seq len 2) (:not (:and :empty-set (:cat :epsilon)))
   1 : (seq len 2) (:cat :epsilon)
   1 :  clojure.lang.IMeta
    --------------------
cp calls= 2399969   cpo calls= 2400000  tp calls= 2400009  pattern (:* :sigma)
    cpo arg frequencies:
   1439970 :  :sigma
   479995 : (seq len 2) (:* :sigma)
   239988 : (seq len 3) (:cat :sigma (:* :sigma))
   239987 : (seq len 3) (:and (:cat :sigma (:* :sigma)) :sigma)
   23 :  :epsilon
   3 : (seq len 1) (:cat)
   3 :  :empty-set
   1 : (seq len 262147) (:cat :epsilon (:* :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) ...)
   1 : (seq len 131075) (:cat :epsilon (:* :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) ...)
   1 : (seq len 65539) (:cat :epsilon (:* :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) ...)
   1 : (seq len 32771) (:cat :epsilon (:* :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) ...)
   1 : (seq len 16387) (:cat :epsilon (:* :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) ...)
   1 : (seq len 8195) (:cat :epsilon (:* :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) ...)
   1 : (seq len 4099) (:cat :epsilon (:* :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) ...)
   1 : (seq len 2051) (:cat :epsilon (:* :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) ...)
   1 : (seq len 1027) (:cat :epsilon (:* :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) ...)
   1 : (seq len 515) (:cat :epsilon (:* :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) ...)
   1 : (seq len 259) (:cat :epsilon (:* :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) ...)
   1 : (seq len 131) (:cat :epsilon (:* :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) ...)
   1 : (seq len 67) (:cat :epsilon (:* :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) ...)
   1 : (seq len 35) (:cat :epsilon (:* :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma))
   1 : (seq len 19) (:cat :epsilon (:* :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma))
   1 : (seq len 11) (:cat :epsilon (:* :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma))
   1 : (seq len 7) (:cat :epsilon (:* :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma))
   1 : (seq len 5) (:cat :epsilon (:not (:and :empty-set (:cat :epsilon))) (:or clojure.lang.IMeta :empty-set (:* (:or (:and)))) (:and :sigma (:+ :sigma) (:cat (:+ (:cat)) :sigma)))
   1 : (seq len 4) (:or clojure.lang.IMeta :empty-set (:* (:or (:and))))
   1 : (seq len 4) (:and :sigma (:+ :sigma) (:cat (:+ (:cat)) :sigma))
   1 : (seq len 3) (:and :empty-set (:cat :epsilon))
   1 : (seq len 3) (:cat (:+ (:cat)) :sigma)
   1 : (seq len 2) (:* (:cat))
   1 : (seq len 2) (:cat :sigma)
   1 : (seq len 2) (:+ (:cat))
   1 : (seq len 2) (:* (:or (:and)))
   1 : (seq len 2) (:+ :sigma)
   1 : (seq len 2) (:or (:and))
   1 : (seq len 2) (:not (:and :empty-set (:cat :epsilon)))
   1 : (seq len 2) (:cat :epsilon)
   1 :  clojure.lang.IMeta
    --------------------
cp calls= 2499969   cpo calls= 2500000  tp calls= 2500009  pattern (:* :sigma)
    cpo arg frequencies:
   1499970 :  :sigma
   499995 : (seq len 2) (:* :sigma)
   249988 : (seq len 3) (:cat :sigma (:* :sigma))
   249987 : (seq len 3) (:and (:cat :sigma (:* :sigma)) :sigma)
   23 :  :epsilon
   3 : (seq len 1) (:cat)
   3 :  :empty-set
   1 : (seq len 262147) (:cat :epsilon (:* :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) ...)
   1 : (seq len 131075) (:cat :epsilon (:* :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) ...)
   1 : (seq len 65539) (:cat :epsilon (:* :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) ...)
   1 : (seq len 32771) (:cat :epsilon (:* :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) ...)
   1 : (seq len 16387) (:cat :epsilon (:* :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) ...)
   1 : (seq len 8195) (:cat :epsilon (:* :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) ...)
   1 : (seq len 4099) (:cat :epsilon (:* :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) ...)
   1 : (seq len 2051) (:cat :epsilon (:* :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) ...)
   1 : (seq len 1027) (:cat :epsilon (:* :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) ...)
   1 : (seq len 515) (:cat :epsilon (:* :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) ...)
   1 : (seq len 259) (:cat :epsilon (:* :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) ...)
   1 : (seq len 131) (:cat :epsilon (:* :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) ...)
   1 : (seq len 67) (:cat :epsilon (:* :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) ...)
   1 : (seq len 35) (:cat :epsilon (:* :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma))
   1 : (seq len 19) (:cat :epsilon (:* :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma))
   1 : (seq len 11) (:cat :epsilon (:* :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma))
   1 : (seq len 7) (:cat :epsilon (:* :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma))
   1 : (seq len 5) (:cat :epsilon (:not (:and :empty-set (:cat :epsilon))) (:or clojure.lang.IMeta :empty-set (:* (:or (:and)))) (:and :sigma (:+ :sigma) (:cat (:+ (:cat)) :sigma)))
   1 : (seq len 4) (:or clojure.lang.IMeta :empty-set (:* (:or (:and))))
   1 : (seq len 4) (:and :sigma (:+ :sigma) (:cat (:+ (:cat)) :sigma))
   1 : (seq len 3) (:and :empty-set (:cat :epsilon))
   1 : (seq len 3) (:cat (:+ (:cat)) :sigma)
   1 : (seq len 2) (:* (:cat))
   1 : (seq len 2) (:cat :sigma)
   1 : (seq len 2) (:+ (:cat))
   1 : (seq len 2) (:* (:or (:and)))
   1 : (seq len 2) (:+ :sigma)
   1 : (seq len 2) (:or (:and))
   1 : (seq len 2) (:not (:and :empty-set (:cat :epsilon)))
   1 : (seq len 2) (:cat :epsilon)
   1 :  clojure.lang.IMeta
    --------------------
cp calls= 2599969   cpo calls= 2600000  tp calls= 2600009  pattern (:* :sigma)
    cpo arg frequencies:
   1559970 :  :sigma
   519995 : (seq len 2) (:* :sigma)
   259988 : (seq len 3) (:cat :sigma (:* :sigma))
   259987 : (seq len 3) (:and (:cat :sigma (:* :sigma)) :sigma)
   23 :  :epsilon
   3 : (seq len 1) (:cat)
   3 :  :empty-set
   1 : (seq len 262147) (:cat :epsilon (:* :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) ...)
   1 : (seq len 131075) (:cat :epsilon (:* :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) ...)
   1 : (seq len 65539) (:cat :epsilon (:* :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) ...)
   1 : (seq len 32771) (:cat :epsilon (:* :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) ...)
   1 : (seq len 16387) (:cat :epsilon (:* :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) ...)
   1 : (seq len 8195) (:cat :epsilon (:* :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) ...)
   1 : (seq len 4099) (:cat :epsilon (:* :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) ...)
   1 : (seq len 2051) (:cat :epsilon (:* :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) ...)
   1 : (seq len 1027) (:cat :epsilon (:* :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) ...)
   1 : (seq len 515) (:cat :epsilon (:* :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) ...)
   1 : (seq len 259) (:cat :epsilon (:* :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) ...)
   1 : (seq len 131) (:cat :epsilon (:* :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) ...)
   1 : (seq len 67) (:cat :epsilon (:* :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) ...)
   1 : (seq len 35) (:cat :epsilon (:* :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma))
   1 : (seq len 19) (:cat :epsilon (:* :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma))
   1 : (seq len 11) (:cat :epsilon (:* :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma))
   1 : (seq len 7) (:cat :epsilon (:* :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma))
   1 : (seq len 5) (:cat :epsilon (:not (:and :empty-set (:cat :epsilon))) (:or clojure.lang.IMeta :empty-set (:* (:or (:and)))) (:and :sigma (:+ :sigma) (:cat (:+ (:cat)) :sigma)))
   1 : (seq len 4) (:or clojure.lang.IMeta :empty-set (:* (:or (:and))))
   1 : (seq len 4) (:and :sigma (:+ :sigma) (:cat (:+ (:cat)) :sigma))
   1 : (seq len 3) (:and :empty-set (:cat :epsilon))
   1 : (seq len 3) (:cat (:+ (:cat)) :sigma)
   1 : (seq len 2) (:* (:cat))
   1 : (seq len 2) (:cat :sigma)
   1 : (seq len 2) (:+ (:cat))
   1 : (seq len 2) (:* (:or (:and)))
   1 : (seq len 2) (:+ :sigma)
   1 : (seq len 2) (:or (:and))
   1 : (seq len 2) (:not (:and :empty-set (:cat :epsilon)))
   1 : (seq len 2) (:cat :epsilon)
   1 :  clojure.lang.IMeta
    --------------------
cp calls= 2699968   cpo calls= 2700000  tp calls= 2700009  pattern :sigma
    cpo arg frequencies:
   1619969 :  :sigma
   539996 : (seq len 2) (:* :sigma)
   269987 : (seq len 3) (:cat :sigma (:* :sigma))
   269986 : (seq len 3) (:and (:cat :sigma (:* :sigma)) :sigma)
   24 :  :epsilon
   3 : (seq len 1) (:cat)
   3 :  :empty-set
   1 : (seq len 524291) (:cat :epsilon (:* :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) ...)
   1 : (seq len 262147) (:cat :epsilon (:* :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) ...)
   1 : (seq len 131075) (:cat :epsilon (:* :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) ...)
   1 : (seq len 65539) (:cat :epsilon (:* :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) ...)
   1 : (seq len 32771) (:cat :epsilon (:* :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) ...)
   1 : (seq len 16387) (:cat :epsilon (:* :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) ...)
   1 : (seq len 8195) (:cat :epsilon (:* :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) ...)
   1 : (seq len 4099) (:cat :epsilon (:* :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) ...)
   1 : (seq len 2051) (:cat :epsilon (:* :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) ...)
   1 : (seq len 1027) (:cat :epsilon (:* :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) ...)
   1 : (seq len 515) (:cat :epsilon (:* :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) ...)
   1 : (seq len 259) (:cat :epsilon (:* :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) ...)
   1 : (seq len 131) (:cat :epsilon (:* :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) ...)
   1 : (seq len 67) (:cat :epsilon (:* :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) ...)
   1 : (seq len 35) (:cat :epsilon (:* :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma))
   1 : (seq len 19) (:cat :epsilon (:* :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma))
   1 : (seq len 11) (:cat :epsilon (:* :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma))
   1 : (seq len 7) (:cat :epsilon (:* :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma) (:* :sigma) (:and (:cat :sigma (:* :sigma)) :sigma))
   1 : (seq len 5) (:cat :epsilon (:not (:and :empty-set (:cat :epsilon))) (:or clojure.lang.IMeta :empty-set (:* (:or (:and)))) (:and :sigma (:+ :sigma) (:cat (:+ (:cat)) :sigma)))
   1 : (seq len 4) (:or clojure.lang.IMeta :empty-set (:* (:or (:and))))
   1 : (seq len 4) (:and :sigma (:+ :sigma) (:cat (:+ (:cat)) :sigma))
   1 : (seq len 3) (:and :empty-set (:cat :epsilon))
   1 : (seq len 3) (:cat (:+ (:cat)) :sigma)
   1 : (seq len 2) (:* (:cat))
   1 : (seq len 2) (:cat :sigma)
   1 : (seq len 2) (:+ (:cat))
   1 : (seq len 2) (:* (:or (:and)))
   1 : (seq len 2) (:+ :sigma)
   1 : (seq len 2) (:or (:and))
   1 : (seq len 2) (:not (:and :empty-set (:cat :epsilon)))
   1 : (seq len 2) (:cat :epsilon)
   1 :  clojure.lang.IMeta
    --------------------
Execution error (OutOfMemoryError) at java.util.Arrays/copyOf (Arrays.java:3332).
GC overhead limit exceeded

user=> Bye for now!
